
// /Users/michaelmartinez/webviewer/Content/js/jquery.min.js
/*! jQuery v1.12.2 | (c) jQuery Foundation | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="1.12.2",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray||function(a){return"array"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!k.call(a,"constructor")&&!k.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(!l.ownFirst)for(b in a)return k.call(a,b);for(b in a);return void 0===b||k.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(h)return h.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=e.call(arguments,2),d=function(){return a.apply(b||this,c.concat(e.call(arguments)))},d.guid=a.guid=a.guid||n.guid++,d):void 0},now:function(){return+new Date},support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",O=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_=/[+~]/,aa=/'|\\/g,ba=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+qa(r[h]);s=r.join(","),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ia(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ia(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||"")||fa.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ia(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ja("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ja("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute("disabled")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,y=/^.[^:#\[\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return n.inArray(a,b)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;e>b;b++)if(n.contains(d[b],this))return!0}));for(b=0;e>b;b++)n.find(a,d[b],c);return c=this.pushStack(e>1?n.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(e="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}if(f=d.getElementById(e[2]),f&&f.parentNode){if(f.id!==e[2])return A.find(a);this.length=1,this[0]=f}return this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b,c=n(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(n.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?n.inArray(this[0],n(a)):n.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return F(a,"nextSibling")},prev:function(a){return F(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return n.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||(e=n.uniqueSort(e)),D.test(a)&&(e=e.reverse())),this.pushStack(e)}});var G=/\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=!0,c||j.disable(),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function J(){d.addEventListener?(d.removeEventListener("DOMContentLoaded",K),a.removeEventListener("load",K)):(d.detachEvent("onreadystatechange",K),a.detachEvent("onload",K))}function K(){(d.addEventListener||"load"===a.event.type||"complete"===d.readyState)&&(J(),n.ready())}n.ready.promise=function(b){if(!I)if(I=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll)a.setTimeout(n.ready);else if(d.addEventListener)d.addEventListener("DOMContentLoaded",K),a.addEventListener("load",K);else{d.attachEvent("onreadystatechange",K),a.attachEvent("onload",K);var c=!1;try{c=null==a.frameElement&&d.documentElement}catch(e){}c&&c.doScroll&&!function f(){if(!n.isReady){try{c.doScroll("left")}catch(b){return a.setTimeout(f,50)}J(),n.ready()}}()}return I.promise(b)},n.ready.promise();var L;for(L in n(l))break;l.ownFirst="0"===L,l.inlineBlockNeedsLayout=!1,n(function(){var a,b,c,e;c=d.getElementsByTagName("body")[0],c&&c.style&&(b=d.createElement("div"),e=d.createElement("div"),e.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(e).appendChild(b),"undefined"!=typeof b.style.zoom&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",l.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(e))}),function(){var a=d.createElement("div");l.deleteExpando=!0;try{delete a.test}catch(b){l.deleteExpando=!1}a=null}();var M=function(a){var b=n.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b},N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(O,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}n.data(a,b,c)}else c=void 0;
}return c}function Q(a){var b;for(b in a)if(("data"!==b||!n.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function R(a,b,d,e){if(M(a)){var f,g,h=n.expando,i=a.nodeType,j=i?n.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||n.guid++:h),j[k]||(j[k]=i?{}:{toJSON:n.noop}),"object"!=typeof b&&"function"!=typeof b||(e?j[k]=n.extend(j[k],b):j[k].data=n.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[n.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[n.camelCase(b)])):f=g,f}}function S(a,b,c){if(M(a)){var d,e,f=a.nodeType,g=f?n.cache:a,h=f?a[n.expando]:n.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){n.isArray(b)?b=b.concat(n.map(b,n.camelCase)):b in d?b=[b]:(b=n.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!Q(d):!n.isEmptyObject(d))return}(c||(delete g[h].data,Q(g[h])))&&(f?n.cleanData([a],!0):l.deleteExpando||g!=g.window?delete g[h]:g[h]=void 0)}}}n.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?n.cache[a[n.expando]]:a[n.expando],!!a&&!Q(a)},data:function(a,b,c){return R(a,b,c)},removeData:function(a,b){return S(a,b)},_data:function(a,b,c){return R(a,b,c,!0)},_removeData:function(a,b){return S(a,b,!0)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=n.data(f),1===f.nodeType&&!n._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));n._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){n.data(this,a)}):arguments.length>1?this.each(function(){n.data(this,a,b)}):f?P(f,a,n.data(f,a)):void 0},removeData:function(a){return this.each(function(){n.removeData(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=n._data(a,b),c&&(!d||n.isArray(c)?d=n._data(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return n._data(a,c)||n._data(a,c,{empty:n.Callbacks("once memory").add(function(){n._removeData(a,b+"queue"),n._removeData(a,c)})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=n._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}}),function(){var a;l.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,e;return c=d.getElementsByTagName("body")[0],c&&c.style?(b=d.createElement("div"),e=d.createElement("div"),e.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(e).appendChild(b),"undefined"!=typeof b.style.zoom&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(d.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(e),a):void 0}}();var T=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,U=new RegExp("^(?:([+-])=|)("+T+")([a-z%]*)$","i"),V=["Top","Right","Bottom","Left"],W=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function X(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&U.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var Y=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)Y(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},Z=/^(?:checkbox|radio)$/i,$=/<([\w:-]+)/,_=/^$|\/(?:java|ecma)script/i,aa=/^\s+/,ba="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";function ca(a){var b=ba.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}!function(){var a=d.createElement("div"),b=d.createDocumentFragment(),c=d.createElement("input");a.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",l.leadingWhitespace=3===a.firstChild.nodeType,l.tbody=!a.getElementsByTagName("tbody").length,l.htmlSerialize=!!a.getElementsByTagName("link").length,l.html5Clone="<:nav></:nav>"!==d.createElement("nav").cloneNode(!0).outerHTML,c.type="checkbox",c.checked=!0,b.appendChild(c),l.appendChecked=c.checked,a.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!a.cloneNode(!0).lastChild.defaultValue,b.appendChild(a),c=d.createElement("input"),c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),a.appendChild(c),l.checkClone=a.cloneNode(!0).cloneNode(!0).lastChild.checked,l.noCloneEvent=!!a.addEventListener,a[n.expando]=1,l.attributes=!a.getAttribute(n.expando)}();var da={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:l.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};da.optgroup=da.option,da.tbody=da.tfoot=da.colgroup=da.caption=da.thead,da.th=da.td;function ea(a,b){var c,d,e=0,f="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||n.nodeName(d,b)?f.push(d):n.merge(f,ea(d,b));return void 0===b||b&&n.nodeName(a,b)?n.merge([a],f):f}function fa(a,b){for(var c,d=0;null!=(c=a[d]);d++)n._data(c,"globalEval",!b||n._data(b[d],"globalEval"))}var ga=/<|&#?\w+;/,ha=/<tbody/i;function ia(a){Z.test(a.type)&&(a.defaultChecked=a.checked)}function ja(a,b,c,d,e){for(var f,g,h,i,j,k,m,o=a.length,p=ca(b),q=[],r=0;o>r;r++)if(g=a[r],g||0===g)if("object"===n.type(g))n.merge(q,g.nodeType?[g]:g);else if(ga.test(g)){i=i||p.appendChild(b.createElement("div")),j=($.exec(g)||["",""])[1].toLowerCase(),m=da[j]||da._default,i.innerHTML=m[1]+n.htmlPrefilter(g)+m[2],f=m[0];while(f--)i=i.lastChild;if(!l.leadingWhitespace&&aa.test(g)&&q.push(b.createTextNode(aa.exec(g)[0])),!l.tbody){g="table"!==j||ha.test(g)?"<table>"!==m[1]||ha.test(g)?0:i:i.firstChild,f=g&&g.childNodes.length;while(f--)n.nodeName(k=g.childNodes[f],"tbody")&&!k.childNodes.length&&g.removeChild(k)}n.merge(q,i.childNodes),i.textContent="";while(i.firstChild)i.removeChild(i.firstChild);i=p.lastChild}else q.push(b.createTextNode(g));i&&p.removeChild(i),l.appendChecked||n.grep(ea(q,"input"),ia),r=0;while(g=q[r++])if(d&&n.inArray(g,d)>-1)e&&e.push(g);else if(h=n.contains(g.ownerDocument,g),i=ea(p.appendChild(g),"script"),h&&fa(i),c){f=0;while(g=i[f++])_.test(g.type||"")&&c.push(g)}return i=null,p}!function(){var b,c,e=d.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(l[b]=c in a)||(e.setAttribute(c,"t"),l[b]=e.attributes[c].expando===!1);e=null}();var ka=/^(?:input|select|textarea)$/i,la=/^key/,ma=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,na=/^(?:focusinfocus|focusoutblur)$/,oa=/^([^.]*)(?:\.(.+)|)/;function pa(){return!0}function qa(){return!1}function ra(){try{return d.activeElement}catch(a){}}function sa(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)sa(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=qa;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=n.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return"undefined"==typeof n||a&&n.event.triggered===a.type?void 0:n.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(G)||[""],h=b.length;while(h--)f=oa.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=n.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=n.event.special[o]||{},l=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},i),(m=g[o])||(m=g[o]=[],m.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,l):m.push(l),n.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n.hasData(a)&&n._data(a);if(r&&(k=r.events)){b=(b||"").match(G)||[""],j=b.length;while(j--)if(h=oa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=m.length;while(f--)g=m[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(m.splice(f,1),g.selector&&m.delegateCount--,l.remove&&l.remove.call(a,g));i&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(k)&&(delete r.handle,n._removeData(a,"events"))}},trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(i=m=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!na.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),h=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),l=n.event.special[q]||{},f||!l.trigger||l.trigger.apply(e,c)!==!1)){if(!f&&!l.noBubble&&!n.isWindow(e)){for(j=l.delegateType||q,na.test(j+q)||(i=i.parentNode);i;i=i.parentNode)p.push(i),m=i;m===(e.ownerDocument||d)&&p.push(m.defaultView||m.parentWindow||a)}o=0;while((i=p[o++])&&!b.isPropagationStopped())b.type=o>1?j:l.bindType||q,g=(n._data(i,"events")||{})[b.type]&&n._data(i,"handle"),g&&g.apply(i,c),g=h&&i[h],g&&g.apply&&M(i)&&(b.result=g.apply(i,c),b.result===!1&&b.preventDefault());if(b.type=q,!f&&!b.isDefaultPrevented()&&(!l._default||l._default.apply(p.pop(),c)===!1)&&M(e)&&h&&e[q]&&!n.isWindow(e)){m=e[h],m&&(e[h]=null),n.event.triggered=q;try{e[q]()}catch(s){}n.event.triggered=void 0,m&&(e[h]=m)}return b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(n._data(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ma.test(f)?this.mouseHooks:la.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=g.srcElement||d),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,h.filter?h.filter(a,g):a},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button,h=b.fromElement;return null==a.pageX&&null!=b.clientX&&(e=a.target.ownerDocument||d,f=e.documentElement,c=e.body,a.pageX=b.clientX+(f&&f.scrollLeft||c&&c.scrollLeft||0)-(f&&f.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(f&&f.scrollTop||c&&c.scrollTop||0)-(f&&f.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&h&&(a.relatedTarget=h===a.target?b.toElement:h),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ra()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===ra()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return n.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=d.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)}:function(a,b,c){var d="on"+b;a.detachEvent&&("undefined"==typeof a[d]&&(a[d]=null),a.detachEvent(d,c))},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?pa:qa):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:qa,isPropagationStopped:qa,isImmediatePropagationStopped:qa,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=pa,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=pa,a&&!this.isSimulated&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=pa,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),l.submit||(n.event.special.submit={setup:function(){return n.nodeName(this,"form")?!1:void n.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=n.nodeName(b,"input")||n.nodeName(b,"button")?n.prop(b,"form"):void 0;c&&!n._data(c,"submit")&&(n.event.add(c,"submit._submit",function(a){a._submitBubble=!0}),n._data(c,"submit",!0))})},postDispatch:function(a){a._submitBubble&&(delete a._submitBubble,this.parentNode&&!a.isTrigger&&n.event.simulate("submit",this.parentNode,a))},teardown:function(){return n.nodeName(this,"form")?!1:void n.event.remove(this,"._submit")}}),l.change||(n.event.special.change={setup:function(){return ka.test(this.nodeName)?("checkbox"!==this.type&&"radio"!==this.type||(n.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._justChanged=!0)}),n.event.add(this,"click._change",function(a){this._justChanged&&!a.isTrigger&&(this._justChanged=!1),n.event.simulate("change",this,a)})),!1):void n.event.add(this,"beforeactivate._change",function(a){var b=a.target;ka.test(b.nodeName)&&!n._data(b,"change")&&(n.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||n.event.simulate("change",this.parentNode,a)}),n._data(b,"change",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return n.event.remove(this,"._change"),!ka.test(this.nodeName)}}),l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=n._data(d,b);e||d.addEventListener(a,c,!0),n._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=n._data(d,b)-1;e?n._data(d,b,e):(d.removeEventListener(a,c,!0),n._removeData(d,b))}}}),n.fn.extend({on:function(a,b,c,d){return sa(this,a,b,c,d)},one:function(a,b,c,d){return sa(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=qa),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var ta=/ jQuery\d+="(?:null|\d+)"/g,ua=new RegExp("<(?:"+ba+")[\\s/>]","i"),va=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,wa=/<script|<style|<link/i,xa=/checked\s*(?:[^=]|=\s*.checked.)/i,ya=/^true\/(.*)/,za=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Aa=ca(d),Ba=Aa.appendChild(d.createElement("div"));function Ca(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function Da(a){return a.type=(null!==n.find.attr(a,"type"))+"/"+a.type,a}function Ea(a){var b=ya.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Fa(a,b){if(1===b.nodeType&&n.hasData(a)){var c,d,e,f=n._data(a),g=n._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)n.event.add(b,c,h[c][d])}g.data&&(g.data=n.extend({},g.data))}}function Ga(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!l.noCloneEvent&&b[n.expando]){e=n._data(b);for(d in e.events)n.removeEvent(b,d,e.handle);b.removeAttribute(n.expando)}"script"===c&&b.text!==a.text?(Da(b).text=a.text,Ea(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),l.html5Clone&&a.innerHTML&&!n.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&Z.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}}function Ha(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&xa.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),Ha(f,b,c,d)});if(o&&(k=ja(b,a[0].ownerDocument,!1,a,d),e=k.firstChild,1===k.childNodes.length&&(k=e),e||d)){for(i=n.map(ea(k,"script"),Da),h=i.length;o>m;m++)g=k,m!==p&&(g=n.clone(g,!0,!0),h&&n.merge(i,ea(g,"script"))),c.call(a[m],g,m);if(h)for(j=i[i.length-1].ownerDocument,n.map(i,Ea),m=0;h>m;m++)g=i[m],_.test(g.type||"")&&!n._data(g,"globalEval")&&n.contains(j,g)&&(g.src?n._evalUrl&&n._evalUrl(g.src):n.globalEval((g.text||g.textContent||g.innerHTML||"").replace(za,"")));k=e=null}return a}function Ia(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(ea(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&fa(ea(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(va,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h,i=n.contains(a.ownerDocument,a);if(l.html5Clone||n.isXMLDoc(a)||!ua.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(Ba.innerHTML=a.outerHTML,Ba.removeChild(f=Ba.firstChild)),!(l.noCloneEvent&&l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(d=ea(f),h=ea(a),g=0;null!=(e=h[g]);++g)d[g]&&Ga(e,d[g]);if(b)if(c)for(h=h||ea(a),d=d||ea(f),g=0;null!=(e=h[g]);g++)Fa(e,d[g]);else Fa(a,f);return d=ea(f,"script"),d.length>0&&fa(d,!i&&ea(a,"script")),d=h=e=null,f},cleanData:function(a,b){for(var d,e,f,g,h=0,i=n.expando,j=n.cache,k=l.attributes,m=n.event.special;null!=(d=a[h]);h++)if((b||M(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)m[e]?n.event.remove(d,e):n.removeEvent(d,e,g.handle);j[f]&&(delete j[f],k||"undefined"==typeof d.removeAttribute?d[i]=void 0:d.removeAttribute(i),c.push(f))}}}),n.fn.extend({domManip:Ha,detach:function(a){return Ia(this,a,!0)},remove:function(a){return Ia(this,a)},text:function(a){return Y(this,function(a){return void 0===a?n.text(this):this.empty().append((this[0]&&this[0].ownerDocument||d).createTextNode(a))},null,a,arguments.length)},append:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.appendChild(a)}})},prepend:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&n.cleanData(ea(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&n.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return Y(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(ta,""):void 0;if("string"==typeof a&&!wa.test(a)&&(l.htmlSerialize||!ua.test(a))&&(l.leadingWhitespace||!aa.test(a))&&!da[($.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(ea(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ha(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(ea(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=0,e=[],f=n(a),h=f.length-1;h>=d;d++)c=d===h?this:this.clone(!0),n(f[d])[b](c),g.apply(e,c.get());return this.pushStack(e)}});var Ja,Ka={HTML:"block",BODY:"block"};function La(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function Ma(a){var b=d,c=Ka[a];return c||(c=La(a,b),"none"!==c&&c||(Ja=(Ja||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Ja[0].contentWindow||Ja[0].contentDocument).document,b.write(),b.close(),c=La(a,b),Ja.detach()),Ka[a]=c),c}var Na=/^margin/,Oa=new RegExp("^("+T+")(?!px)[a-z%]+$","i"),Pa=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Qa=d.documentElement;!function(){var b,c,e,f,g,h,i=d.createElement("div"),j=d.createElement("div");if(j.style){j.style.cssText="float:left;opacity:.5",l.opacity="0.5"===j.style.opacity,l.cssFloat=!!j.style.cssFloat,j.style.backgroundClip="content-box",j.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===j.style.backgroundClip,i=d.createElement("div"),i.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",j.innerHTML="",i.appendChild(j),l.boxSizing=""===j.style.boxSizing||""===j.style.MozBoxSizing||""===j.style.WebkitBoxSizing,n.extend(l,{reliableHiddenOffsets:function(){return null==b&&k(),f},boxSizingReliable:function(){return null==b&&k(),e},pixelMarginRight:function(){return null==b&&k(),c},pixelPosition:function(){return null==b&&k(),b},reliableMarginRight:function(){return null==b&&k(),g},reliableMarginLeft:function(){return null==b&&k(),h}});function k(){var k,l,m=d.documentElement;m.appendChild(i),j.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",b=e=h=!1,c=g=!0,a.getComputedStyle&&(l=a.getComputedStyle(j),b="1%"!==(l||{}).top,h="2px"===(l||{}).marginLeft,e="4px"===(l||{width:"4px"}).width,j.style.marginRight="50%",c="4px"===(l||{marginRight:"4px"}).marginRight,k=j.appendChild(d.createElement("div")),k.style.cssText=j.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",k.style.marginRight=k.style.width="0",j.style.width="1px",g=!parseFloat((a.getComputedStyle(k)||{}).marginRight),j.removeChild(k)),j.style.display="none",f=0===j.getClientRects().length,f&&(j.style.display="",j.innerHTML="<table><tr><td></td><td>t</td></tr></table>",k=j.getElementsByTagName("td"),k[0].style.cssText="margin:0;border:0;padding:0;display:none",f=0===k[0].offsetHeight,f&&(k[0].style.display="",k[1].style.display="none",f=0===k[0].offsetHeight)),m.removeChild(i)}}}();var Ra,Sa,Ta=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ra=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Sa=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ra(a),g=c?c.getPropertyValue(b)||c[b]:void 0,""!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Oa.test(g)&&Na.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0===g?g:g+""}):Qa.currentStyle&&(Ra=function(a){return a.currentStyle},Sa=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ra(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Oa.test(g)&&!Ta.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Ua(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Va=/alpha\([^)]*\)/i,Wa=/opacity\s*=\s*([^)]*)/i,Xa=/^(none|table(?!-c[ea]).+)/,Ya=new RegExp("^("+T+")(.*)$","i"),Za={position:"absolute",visibility:"hidden",display:"block"},$a={letterSpacing:"0",fontWeight:"400"},_a=["Webkit","O","Moz","ms"],ab=d.createElement("div").style;function bb(a){if(a in ab)return a;var b=a.charAt(0).toUpperCase()+a.slice(1),c=_a.length;while(c--)if(a=_a[c]+b,a in ab)return a}function cb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=n._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&W(d)&&(f[g]=n._data(d,"olddisplay",Ma(d.nodeName)))):(e=W(d),(c&&"none"!==c||!e)&&n._data(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function db(a,b,c){var d=Ya.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function eb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+V[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+V[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+V[f]+"Width",!0,e))):(g+=n.css(a,"padding"+V[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+V[f]+"Width",!0,e)));return g}function fb(b,c,e){var f=!0,g="width"===c?b.offsetWidth:b.offsetHeight,h=Ra(b),i=l.boxSizing&&"border-box"===n.css(b,"boxSizing",!1,h);if(d.msFullscreenElement&&a.top!==a&&b.getClientRects().length&&(g=Math.round(100*b.getBoundingClientRect()[c])),0>=g||null==g){if(g=Sa(b,c,h),(0>g||null==g)&&(g=b.style[c]),Oa.test(g))return g;f=i&&(l.boxSizingReliable()||g===b.style[c]),g=parseFloat(g)||0}return g+eb(b,c,e||(i?"border":"content"),f,h)+"px"}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Sa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":l.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;if(b=n.cssProps[h]||(n.cssProps[h]=bb(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=U.exec(c))&&e[1]&&(c=X(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=bb(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Sa(a,b,d)),"normal"===f&&b in $a&&(f=$a[b]),""===c||c?(e=parseFloat(f),c===!0||isFinite(e)?e||0:f):f}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Xa.test(n.css(a,"display"))&&0===a.offsetWidth?Pa(a,Za,function(){return fb(a,b,d)}):fb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ra(a);return db(a,c,d?eb(a,b,d,l.boxSizing&&"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),l.opacity||(n.cssHooks.opacity={get:function(a,b){return Wa.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=n.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===n.trim(f.replace(Va,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Va.test(f)?f.replace(Va,e):f+" "+e)}}),n.cssHooks.marginRight=Ua(l.reliableMarginRight,function(a,b){return b?Pa(a,{display:"inline-block"},Sa,[a,"marginRight"]):void 0}),n.cssHooks.marginLeft=Ua(l.reliableMarginLeft,function(a,b){
return b?(parseFloat(Sa(a,"marginLeft"))||(n.contains(a.ownerDocument,a)?a.getBoundingClientRect().left-Pa(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}):0))+"px":void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+V[d]+b]=f[d]||f[d-2]||f[0];return e}},Na.test(a)||(n.cssHooks[a+b].set=db)}),n.fn.extend({css:function(a,b){return Y(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ra(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return cb(this,!0)},hide:function(){return cb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){W(this)?n(this).show():n(this).hide()})}});function gb(a,b,c,d,e){return new gb.prototype.init(a,b,c,d,e)}n.Tween=gb,gb.prototype={constructor:gb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=gb.propHooks[this.prop];return a&&a.get?a.get(this):gb.propHooks._default.get(this)},run:function(a){var b,c=gb.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):gb.propHooks._default.set(this),this}},gb.prototype.init.prototype=gb.prototype,gb.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},gb.propHooks.scrollTop=gb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=gb.prototype.init,n.fx.step={};var hb,ib,jb=/^(?:toggle|show|hide)$/,kb=/queueHooks$/;function lb(){return a.setTimeout(function(){hb=void 0}),hb=n.now()}function mb(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=V[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function nb(a,b,c){for(var d,e=(qb.tweeners[b]||[]).concat(qb.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ob(a,b,c){var d,e,f,g,h,i,j,k,m=this,o={},p=a.style,q=a.nodeType&&W(a),r=n._data(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,m.always(function(){m.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=n.css(a,"display"),k="none"===j?n._data(a,"olddisplay")||Ma(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(l.inlineBlockNeedsLayout&&"inline"!==Ma(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",l.shrinkWrapBlocks()||m.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],jb.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(o))"inline"===("none"===j?Ma(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=n._data(a,"fxshow",{}),f&&(r.hidden=!q),q?n(a).show():m.done(function(){n(a).hide()}),m.done(function(){var b;n._removeData(a,"fxshow");for(b in o)n.style(a,b,o[b])});for(d in o)g=nb(q?r[d]:0,d,m),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function pb(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function qb(a,b,c){var d,e,f=0,g=qb.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=hb||lb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:hb||lb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(pb(k,j.opts.specialEasing);g>f;f++)if(d=qb.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,nb,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(qb,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return X(c.elem,a,U.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],qb.tweeners[c]=qb.tweeners[c]||[],qb.tweeners[c].unshift(b)},prefilters:[ob],prefilter:function(a,b){b?qb.prefilters.unshift(a):qb.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(W).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=qb(this,n.extend({},a),f);(e||n._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=n._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&kb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=n._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(mb(b,!0),a,d,e)}}),n.each({slideDown:mb("show"),slideUp:mb("hide"),slideToggle:mb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=n.timers,c=0;for(hb=n.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||n.fx.stop(),hb=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){ib||(ib=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(ib),ib=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a,b=d.createElement("input"),c=d.createElement("div"),e=d.createElement("select"),f=e.appendChild(d.createElement("option"));c=d.createElement("div"),c.setAttribute("className","t"),c.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=c.getElementsByTagName("a")[0],b.setAttribute("type","checkbox"),c.appendChild(b),a=c.getElementsByTagName("a")[0],a.style.cssText="top:1px",l.getSetAttribute="t"!==c.className,l.style=/top/.test(a.getAttribute("style")),l.hrefNormalized="/a"===a.getAttribute("href"),l.checkOn=!!b.value,l.optSelected=f.selected,l.enctype=!!d.createElement("form").enctype,e.disabled=!0,l.optDisabled=!f.disabled,b=d.createElement("input"),b.setAttribute("value",""),l.input=""===b.getAttribute("value"),b.value="t",b.setAttribute("type","radio"),l.radioValue="t"===b.value}();var rb=/\r/g,sb=/[\x20\t\r\n\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(rb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a)).replace(sb," ")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)if(d=e[g],n.inArray(n.valHooks.option.get(d),f)>-1)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var tb,ub,vb=n.expr.attrHandle,wb=/^(?:checked|selected)$/i,xb=l.getSetAttribute,yb=l.input;n.fn.extend({attr:function(a,b){return Y(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ub:tb)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)?yb&&xb||!wb.test(c)?a[d]=!1:a[n.camelCase("default-"+c)]=a[d]=!1:n.attr(a,c,""),a.removeAttribute(xb?c:d)}}),ub={set:function(a,b,c){return b===!1?n.removeAttr(a,c):yb&&xb||!wb.test(c)?a.setAttribute(!xb&&n.propFix[c]||c,c):a[n.camelCase("default-"+c)]=a[c]=!0,c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=vb[b]||n.find.attr;yb&&xb||!wb.test(b)?vb[b]=function(a,b,d){var e,f;return d||(f=vb[b],vb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,vb[b]=f),e}:vb[b]=function(a,b,c){return c?void 0:a[n.camelCase("default-"+b)]?b.toLowerCase():null}}),yb&&xb||(n.attrHooks.value={set:function(a,b,c){return n.nodeName(a,"input")?void(a.defaultValue=b):tb&&tb.set(a,b,c)}}),xb||(tb={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},vb.id=vb.name=vb.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},n.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:tb.set},n.attrHooks.contenteditable={set:function(a,b,c){tb.set(a,""===b?!1:b,c)}},n.each(["width","height"],function(a,b){n.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),l.style||(n.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var zb=/^(?:input|select|textarea|button|object)$/i,Ab=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return Y(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return a=n.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):zb.test(a.nodeName)||Ab.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.hrefNormalized||n.each(["href","src"],function(a,b){n.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this}),l.enctype||(n.propFix.enctype="encoding");var Bb=/[\t\r\n\f]/g;function Cb(a){return n.attr(a,"class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,Cb(this)))});if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=Cb(c),d=1===c.nodeType&&(" "+e+" ").replace(Bb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&n.attr(c,"class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,Cb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=Cb(c),d=1===c.nodeType&&(" "+e+" ").replace(Bb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&n.attr(c,"class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,Cb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=Cb(this),b&&n._data(this,"__className__",b),n.attr(this,"class",b||a===!1?"":n._data(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+Cb(c)+" ").replace(Bb," ").indexOf(b)>-1)return!0;return!1}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var Db=a.location,Eb=n.now(),Fb=/\?/,Gb=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;n.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=n.trim(b+"");return e&&!n.trim(e.replace(Gb,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():n.error("Invalid JSON: "+b)},n.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new a.DOMParser,c=d.parseFromString(b,"text/xml")):(c=new a.ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var Hb=/#.*$/,Ib=/([?&])_=[^&]*/,Jb=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Kb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Lb=/^(?:GET|HEAD)$/,Mb=/^\/\//,Nb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Ob={},Pb={},Qb="*/".concat("*"),Rb=Db.href,Sb=Nb.exec(Rb.toLowerCase())||[];function Tb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Ub(a,b,c,d){var e={},f=a===Pb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Vb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&n.extend(!0,a,c),a}function Wb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Xb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Rb,type:"GET",isLocal:Kb.test(Sb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Qb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Vb(Vb(a,n.ajaxSettings),b):Vb(n.ajaxSettings,a)},ajaxPrefilter:Tb(Ob),ajaxTransport:Tb(Pb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var d,e,f,g,h,i,j,k,l=n.ajaxSetup({},c),m=l.context||l,o=l.context&&(m.nodeType||m.jquery)?n(m):n.event,p=n.Deferred(),q=n.Callbacks("once memory"),r=l.statusCode||{},s={},t={},u=0,v="canceled",w={readyState:0,getResponseHeader:function(a){var b;if(2===u){if(!k){k={};while(b=Jb.exec(g))k[b[1].toLowerCase()]=b[2]}b=k[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===u?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return u||(a=t[c]=t[c]||a,s[a]=b),this},overrideMimeType:function(a){return u||(l.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>u)for(b in a)r[b]=[r[b],a[b]];else w.always(a[w.status]);return this},abort:function(a){var b=a||v;return j&&j.abort(b),y(0,b),this}};if(p.promise(w).complete=q.add,w.success=w.done,w.error=w.fail,l.url=((b||l.url||Rb)+"").replace(Hb,"").replace(Mb,Sb[1]+"//"),l.type=c.method||c.type||l.method||l.type,l.dataTypes=n.trim(l.dataType||"*").toLowerCase().match(G)||[""],null==l.crossDomain&&(d=Nb.exec(l.url.toLowerCase()),l.crossDomain=!(!d||d[1]===Sb[1]&&d[2]===Sb[2]&&(d[3]||("http:"===d[1]?"80":"443"))===(Sb[3]||("http:"===Sb[1]?"80":"443")))),l.data&&l.processData&&"string"!=typeof l.data&&(l.data=n.param(l.data,l.traditional)),Ub(Ob,l,c,w),2===u)return w;i=n.event&&l.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),l.type=l.type.toUpperCase(),l.hasContent=!Lb.test(l.type),f=l.url,l.hasContent||(l.data&&(f=l.url+=(Fb.test(f)?"&":"?")+l.data,delete l.data),l.cache===!1&&(l.url=Ib.test(f)?f.replace(Ib,"$1_="+Eb++):f+(Fb.test(f)?"&":"?")+"_="+Eb++)),l.ifModified&&(n.lastModified[f]&&w.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&w.setRequestHeader("If-None-Match",n.etag[f])),(l.data&&l.hasContent&&l.contentType!==!1||c.contentType)&&w.setRequestHeader("Content-Type",l.contentType),w.setRequestHeader("Accept",l.dataTypes[0]&&l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+("*"!==l.dataTypes[0]?", "+Qb+"; q=0.01":""):l.accepts["*"]);for(e in l.headers)w.setRequestHeader(e,l.headers[e]);if(l.beforeSend&&(l.beforeSend.call(m,w,l)===!1||2===u))return w.abort();v="abort";for(e in{success:1,error:1,complete:1})w[e](l[e]);if(j=Ub(Pb,l,c,w)){if(w.readyState=1,i&&o.trigger("ajaxSend",[w,l]),2===u)return w;l.async&&l.timeout>0&&(h=a.setTimeout(function(){w.abort("timeout")},l.timeout));try{u=1,j.send(s,y)}catch(x){if(!(2>u))throw x;y(-1,x)}}else y(-1,"No Transport");function y(b,c,d,e){var k,s,t,v,x,y=c;2!==u&&(u=2,h&&a.clearTimeout(h),j=void 0,g=e||"",w.readyState=b>0?4:0,k=b>=200&&300>b||304===b,d&&(v=Wb(l,w,d)),v=Xb(l,v,w,k),k?(l.ifModified&&(x=w.getResponseHeader("Last-Modified"),x&&(n.lastModified[f]=x),x=w.getResponseHeader("etag"),x&&(n.etag[f]=x)),204===b||"HEAD"===l.type?y="nocontent":304===b?y="notmodified":(y=v.state,s=v.data,t=v.error,k=!t)):(t=y,!b&&y||(y="error",0>b&&(b=0))),w.status=b,w.statusText=(c||y)+"",k?p.resolveWith(m,[s,y,w]):p.rejectWith(m,[w,y,t]),w.statusCode(r),r=void 0,i&&o.trigger(k?"ajaxSuccess":"ajaxError",[w,l,k?s:t]),q.fireWith(m,[w,y]),i&&(o.trigger("ajaxComplete",[w,l]),--n.active||n.event.trigger("ajaxStop")))}return w},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){if(n.isFunction(a))return this.each(function(b){n(this).wrapAll(a.call(this,b))});if(this[0]){var b=n(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}});function Yb(a){return a.style&&a.style.display||n.css(a,"display")}function Zb(a){while(a&&1===a.nodeType){if("none"===Yb(a)||"hidden"===a.type)return!0;a=a.parentNode}return!1}n.expr.filters.hidden=function(a){return l.reliableHiddenOffsets()?a.offsetWidth<=0&&a.offsetHeight<=0&&!a.getClientRects().length:Zb(a)},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var $b=/%20/g,_b=/\[\]$/,ac=/\r?\n/g,bc=/^(?:submit|button|image|reset|file)$/i,cc=/^(?:input|select|textarea|keygen)/i;function dc(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||_b.test(a)?d(a,e):dc(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)dc(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)dc(c,a[c],b,e);return d.join("&").replace($b,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&cc.test(this.nodeName)&&!bc.test(a)&&(this.checked||!Z.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(ac,"\r\n")}}):{name:b.name,value:c.replace(ac,"\r\n")}}).get()}}),n.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return this.isLocal?ic():d.documentMode>8?hc():/^(get|post|head|put|delete|options)$/i.test(this.type)&&hc()||ic()}:hc;var ec=0,fc={},gc=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in fc)fc[a](void 0,!0)}),l.cors=!!gc&&"withCredentials"in gc,gc=l.ajax=!!gc,gc&&n.ajaxTransport(function(b){if(!b.crossDomain||l.cors){var c;return{send:function(d,e){var f,g=b.xhr(),h=++ec;if(g.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(f in b.xhrFields)g[f]=b.xhrFields[f];b.mimeType&&g.overrideMimeType&&g.overrideMimeType(b.mimeType),b.crossDomain||d["X-Requested-With"]||(d["X-Requested-With"]="XMLHttpRequest");for(f in d)void 0!==d[f]&&g.setRequestHeader(f,d[f]+"");g.send(b.hasContent&&b.data||null),c=function(a,d){var f,i,j;if(c&&(d||4===g.readyState))if(delete fc[h],c=void 0,g.onreadystatechange=n.noop,d)4!==g.readyState&&g.abort();else{j={},f=g.status,"string"==typeof g.responseText&&(j.text=g.responseText);try{i=g.statusText}catch(k){i=""}f||!b.isLocal||b.crossDomain?1223===f&&(f=204):f=j.text?200:404}j&&e(f,i,j,g.getAllResponseHeaders())},b.async?4===g.readyState?a.setTimeout(c):g.onreadystatechange=fc[h]=c:c()},abort:function(){c&&c(void 0,!0)}}}});function hc(){try{return new a.XMLHttpRequest}catch(b){}}function ic(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}n.ajaxPrefilter(function(a){a.crossDomain&&(a.contents.script=!1)}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=d.head||n("head")[0]||d.documentElement;return{send:function(e,f){b=d.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||f(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var jc=[],kc=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=jc.pop()||n.expando+"_"+Eb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(kc.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&kc.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(kc,"$1"+e):b.jsonp!==!1&&(b.url+=(Fb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,jc.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ja([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var lc=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&lc)return lc.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h,a.length)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(g,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function mc(a){return n.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&n.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,n.contains(b,e)?("undefined"!=typeof e.getBoundingClientRect&&(d=e.getBoundingClientRect()),c=mc(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===n.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(c=a.offset()),c.top+=n.css(a[0],"borderTopWidth",!0),c.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-n.css(d,"marginTop",!0),left:b.left-c.left-n.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Qa})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);n.fn[a]=function(d){return Y(this,function(a,d,e){var f=mc(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?n(f).scrollLeft():e,c?e:n(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Ua(l.pixelPosition,function(a,c){
return c?(c=Sa(a,b),Oa.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return Y(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var nc=a.jQuery,oc=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=oc),b&&a.jQuery===n&&(a.jQuery=nc),n},b||(a.jQuery=a.$=n),n});

// /Users/michaelmartinez/webviewer/Content/js/jquery.cookie.js
/*!
 * jQuery Cookie Plugin v1.3.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function ($, document, undefined) {

	var pluses = /\+/g;

	function raw(s) {
		return s;
	}

	function decoded(s) {
		return unRfc2068(decodeURIComponent(s.replace(pluses, ' ')));
	}

	function unRfc2068(value) {
		if (value.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape
			value = value.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}
		return value;
	}

	function fromJSON(value) {
		return config.json ? JSON.parse(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// write
		if (value !== undefined) {
			options = $.extend({}, config.defaults, options);

			if (value === null) {
				options.expires = -1;
			}

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setDate(t.getDate() + days);
			}

			value = config.json ? JSON.stringify(value) : String(value);

			return (document.cookie = [
				encodeURIComponent(key), '=', config.raw ? value : encodeURIComponent(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// read
		var decode = config.raw ? raw : decoded;
		var cookies = document.cookie.split('; ');
		var result = key ? null : {};
		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = decode(parts.join('='));

			if (key && key === name) {
				result = fromJSON(cookie);
				break;
			}

			if (!key) {
				result[name] = fromJSON(cookie);
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) !== null) {
			$.cookie(key, null, options);
			return true;
		}
		return false;
	};

})(jQuery, document);

// /Users/michaelmartinez/webviewer/Content/js/jquery.mousewheel.js
/*! Copyright (c) 2013 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 *
 * Version: 3.1.3
 *
 * Requires: 1.2.2+
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];
    var toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'];
    var lowestDelta, lowestDeltaXY;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    $.event.special.mousewheel = {
        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
        },

        unmousewheel: function(fn) {
            return this.unbind("mousewheel", fn);
        }
    });


    function handler(event) {
        var orgEvent = event || window.event,
            args = [].slice.call(arguments, 1),
            delta = 0,
            deltaX = 0,
            deltaY = 0,
            absDelta = 0,
            absDeltaXY = 0,
            fn;
        event = $.event.fix(orgEvent);
        event.type = "mousewheel";

        // Old school scrollwheel delta
        if ( orgEvent.wheelDelta ) { delta = orgEvent.wheelDelta; }
        if ( orgEvent.detail )     { delta = orgEvent.detail * -1; }

        // New school wheel delta (wheel event)
        if ( orgEvent.deltaY ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( orgEvent.deltaX ) {
            deltaX = orgEvent.deltaX;
            delta  = deltaX * -1;
        }

        // Webkit
        if ( orgEvent.wheelDeltaY !== undefined ) { deltaY = orgEvent.wheelDeltaY; }
        if ( orgEvent.wheelDeltaX !== undefined ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Look for lowest delta to normalize the delta values
        absDelta = Math.abs(delta);
        if ( !lowestDelta || absDelta < lowestDelta ) { lowestDelta = absDelta; }
        absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX));
        if ( !lowestDeltaXY || absDeltaXY < lowestDeltaXY ) { lowestDeltaXY = absDeltaXY; }

        // Get a whole value for the deltas
        fn = delta > 0 ? 'floor' : 'ceil';
        delta  = Math[fn](delta / lowestDelta);
        deltaX = Math[fn](deltaX / lowestDeltaXY);
        deltaY = Math[fn](deltaY / lowestDeltaXY);

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

}));

// /Users/michaelmartinez/webviewer/Content/js/jquery.contextmenu.js
/*!
 * jQuery contextMenu - Plugin for simple contextMenu handling
 *
 * Version: 1.6.6
 *
 * Authors: Rodney Rehm, Addy Osmani (patches for FF)
 * Web: http://medialize.github.com/jQuery-contextMenu/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */

(function($, undefined){
    
    // TODO: -
        // ARIA stuff: menuitem, menuitemcheckbox und menuitemradio
        // create <menu> structure if $.support[htmlCommand || htmlMenuitem] and !opt.disableNative

// determine html5 compatibility
$.support.htmlMenuitem = ('HTMLMenuItemElement' in window);
$.support.htmlCommand = ('HTMLCommandElement' in window);
$.support.eventSelectstart = ("onselectstart" in document.documentElement);
/* // should the need arise, test for css user-select
$.support.cssUserSelect = (function(){
    var t = false,
        e = document.createElement('div');
    
    $.each('Moz|Webkit|Khtml|O|ms|Icab|'.split('|'), function(i, prefix) {
        var propCC = prefix + (prefix ? 'U' : 'u') + 'serSelect',
            prop = (prefix ? ('-' + prefix.toLowerCase() + '-') : '') + 'user-select';
            
        e.style.cssText = prop + ': text;';
        if (e.style[propCC] == 'text') {
            t = true;
            return false;
        }
        
        return true;
    });
    
    return t;
})();
*/

if (!$.ui || !$.ui.widget) {
    // duck punch $.cleanData like jQueryUI does to get that remove event
    // https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.widget.js#L16-24
    var _cleanData = $.cleanData;
    $.cleanData = function( elems ) {
        for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
            try {
                $( elem ).triggerHandler( "remove" );
                // http://bugs.jquery.com/ticket/8235
            } catch( e ) {}
        }
        _cleanData( elems );
    };
}

var // currently active contextMenu trigger
    $currentTrigger = null,
    // is contextMenu initialized with at least one menu?
    initialized = false,
    // window handle
    $win = $(window),
    // number of registered menus
    counter = 0,
    // mapping selector to namespace
    namespaces = {},
    // mapping namespace to options
    menus = {},
    // custom command type handlers
    types = {},
    // default values
    defaults = {
        // selector of contextMenu trigger
        selector: null,
        // where to append the menu to
        appendTo: null,
        // method to trigger context menu ["right", "left", "hover"]
        trigger: "right",
        // hide menu when mouse leaves trigger / menu elements
        autoHide: false,
        // ms to wait before showing a hover-triggered context menu
        delay: 200,
        // flag denoting if a second trigger should simply move (true) or rebuild (false) an open menu
        // as long as the trigger happened on one of the trigger-element's child nodes
        reposition: true,
        // determine position to show menu at
        determinePosition: function($menu) {
            // position to the lower middle of the trigger element
            if ($.ui && $.ui.position) {
                // .position() is provided as a jQuery UI utility
                // (...and it won't work on hidden elements)
                $menu.css('display', 'block').position({
                    my: "center top",
                    at: "center bottom",
                    of: this,
                    offset: "0 5",
                    collision: "fit"
                }).css('display', 'none');
            } else {
                // determine contextMenu position
                var offset = this.offset();
                offset.top += this.outerHeight();
                offset.left += this.outerWidth() / 2 - $menu.outerWidth() / 2;
                $menu.css(offset);
            }
        },
        // position menu
        position: function(opt, x, y) {
            var $this = this,
                offset;
            // determine contextMenu position
            if (!x && !y) {
                opt.determinePosition.call(this, opt.$menu);
                return;
            } else if (x === "maintain" && y === "maintain") {
                // x and y must not be changed (after re-show on command click)
                offset = opt.$menu.position();
            } else {
                // x and y are given (by mouse event)
                offset = {top: y, left: x};
            }
            
            // correct offset if viewport demands it
            var bottom = $win.scrollTop() + $win.height(),
                right = $win.scrollLeft() + $win.width(),
                height = opt.$menu.height(),
                width = opt.$menu.width();
            
            if (offset.top + height > bottom) {
                offset.top -= height;
            }
            
            if (offset.left + width > right) {
                offset.left -= width;
            }
            
            opt.$menu.css(offset);
        },
        // position the sub-menu
        positionSubmenu: function($menu) {
            if ($.ui && $.ui.position) {
                // .position() is provided as a jQuery UI utility
                // (...and it won't work on hidden elements)
                $menu.css('display', 'block').position({
                    my: "left top",
                    at: "right top",
                    of: this,
                    collision: "flipfit fit"
                }).css('display', '');
            } else {
                // determine contextMenu position
                var offset = {
                    top: 0,
                    left: this.outerWidth()
                };
                $menu.css(offset);
            }
        },
        // offset to add to zIndex
        zIndex: 1,
        // show hide animation settings
        animation: {
            duration: 50,
            show: 'slideDown',
            hide: 'slideUp'
        },
        // events
        events: {
            show: $.noop,
            hide: $.noop
        },
        // default callback
        callback: null,
        // list of contextMenu items
        items: {}
    },
    // mouse position for hover activation
    hoveract = {
        timer: null,
        pageX: null,
        pageY: null
    },
    // determine zIndex
    zindex = function($t) {
        var zin = 0,
            $tt = $t;

        while (true) {
            zin = Math.max(zin, parseInt($tt.css('z-index'), 10) || 0);
            $tt = $tt.parent();
            if (!$tt || !$tt.length || "html body".indexOf($tt.prop('nodeName').toLowerCase()) > -1 ) {
                break;
            }
        }
        
        return zin;
    },
    // event handlers
    handle = {
        // abort anything
        abortevent: function(e){
            e.preventDefault();
            e.stopImmediatePropagation();
        },
        
        // contextmenu show dispatcher
        contextmenu: function(e) {
            var $this = $(this);
            
            // disable actual context-menu
            e.preventDefault();
            e.stopImmediatePropagation();
            
            // abort native-triggered events unless we're triggering on right click
            if (e.data.trigger != 'right' && e.originalEvent) {
                return;
            }
            
            // abort event if menu is visible for this trigger
            if ($this.hasClass('context-menu-active')) {
                return;
            }
            
            if (!$this.hasClass('context-menu-disabled')) {
                // theoretically need to fire a show event at <menu>
                // http://www.whatwg.org/specs/web-apps/current-work/multipage/interactive-elements.html#context-menus
                // var evt = jQuery.Event("show", { data: data, pageX: e.pageX, pageY: e.pageY, relatedTarget: this });
                // e.data.$menu.trigger(evt);
                
                $currentTrigger = $this;
                if (e.data.build) {
                    var built = e.data.build($currentTrigger, e);
                    // abort if build() returned false
                    if (built === false) {
                        return;
                    }
                    
                    // dynamically build menu on invocation
                    e.data = $.extend(true, {}, defaults, e.data, built || {});

                    // abort if there are no items to display
                    if (!e.data.items || $.isEmptyObject(e.data.items)) {
                        // Note: jQuery captures and ignores errors from event handlers
                        if (window.console) {
                            (console.error || console.log)("No items specified to show in contextMenu");
                        }
                        
                        throw new Error('No Items specified');
                    }
                    
                    // backreference for custom command type creation
                    e.data.$trigger = $currentTrigger;
                    
                    op.create(e.data);
                }
                // show menu
                op.show.call($this, e.data, e.pageX, e.pageY);
            }
        },
        // contextMenu left-click trigger
        click: function(e) {
            e.preventDefault();
            e.stopImmediatePropagation();
            $(this).trigger($.Event("contextmenu", { data: e.data, pageX: e.pageX, pageY: e.pageY }));
        },
        // contextMenu right-click trigger
        mousedown: function(e) {
            // register mouse down
            var $this = $(this);
            
            // hide any previous menus
            if ($currentTrigger && $currentTrigger.length && !$currentTrigger.is($this)) {
                $currentTrigger.data('contextMenu').$menu.trigger('contextmenu:hide');
            }
            
            // activate on right click
            if (e.button == 2) {
                $currentTrigger = $this.data('contextMenuActive', true);
            }
        },
        // contextMenu right-click trigger
        mouseup: function(e) {
            // show menu
            var $this = $(this);
            if ($this.data('contextMenuActive') && $currentTrigger && $currentTrigger.length && $currentTrigger.is($this) && !$this.hasClass('context-menu-disabled')) {
                e.preventDefault();
                e.stopImmediatePropagation();
                $currentTrigger = $this;
                $this.trigger($.Event("contextmenu", { data: e.data, pageX: e.pageX, pageY: e.pageY }));
            }
            
            $this.removeData('contextMenuActive');
        },
        // contextMenu hover trigger
        mouseenter: function(e) {
            var $this = $(this),
                $related = $(e.relatedTarget),
                $document = $(document);
            
            // abort if we're coming from a menu
            if ($related.is('.context-menu-list') || $related.closest('.context-menu-list').length) {
                return;
            }
            
            // abort if a menu is shown
            if ($currentTrigger && $currentTrigger.length) {
                return;
            }
            
            hoveract.pageX = e.pageX;
            hoveract.pageY = e.pageY;
            hoveract.data = e.data;
            $document.on('mousemove.contextMenuShow', handle.mousemove);
            hoveract.timer = setTimeout(function() {
                hoveract.timer = null;
                $document.off('mousemove.contextMenuShow');
                $currentTrigger = $this;
                $this.trigger($.Event("contextmenu", { data: hoveract.data, pageX: hoveract.pageX, pageY: hoveract.pageY }));
            }, e.data.delay );
        },
        // contextMenu hover trigger
        mousemove: function(e) {
            hoveract.pageX = e.pageX;
            hoveract.pageY = e.pageY;
        },
        // contextMenu hover trigger
        mouseleave: function(e) {
            // abort if we're leaving for a menu
            var $related = $(e.relatedTarget);
            if ($related.is('.context-menu-list') || $related.closest('.context-menu-list').length) {
                return;
            }
            
            try {
                clearTimeout(hoveract.timer);
            } catch(e) {}
            
            hoveract.timer = null;
        },
        
        // click on layer to hide contextMenu
        layerClick: function(e) {
            var $this = $(this),
                root = $this.data('contextMenuRoot'),
                mouseup = false,
                button = e.button,
                x = e.pageX,
                y = e.pageY,
                target, 
                offset,
                selectors;
                
            e.preventDefault();
            e.stopImmediatePropagation();
            
            setTimeout(function() {
                var $window, hideshow, possibleTarget;
                var triggerAction = ((root.trigger == 'left' && button === 0) || (root.trigger == 'right' && button === 2));
                
                // find the element that would've been clicked, wasn't the layer in the way
                if (document.elementFromPoint) {
                    root.$layer.hide();
                    target = document.elementFromPoint(x - $win.scrollLeft(), y - $win.scrollTop());
                    root.$layer.show();
                }
                
                if (root.reposition && triggerAction) {
                    if (document.elementFromPoint) {
                        if (root.$trigger.is(target) || root.$trigger.has(target).length) {
                            root.position.call(root.$trigger, root, x, y);
                            return;
                        }
                    } else {
                        offset = root.$trigger.offset();
                        $window = $(window);
                        // while this looks kinda awful, it's the best way to avoid
                        // unnecessarily calculating any positions
                        offset.top += $window.scrollTop();
                        if (offset.top <= e.pageY) {
                            offset.left += $window.scrollLeft();
                            if (offset.left <= e.pageX) {
                                offset.bottom = offset.top + root.$trigger.outerHeight();
                                if (offset.bottom >= e.pageY) {
                                    offset.right = offset.left + root.$trigger.outerWidth();
                                    if (offset.right >= e.pageX) {
                                        // reposition
                                        root.position.call(root.$trigger, root, x, y);
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
                
                if (target && triggerAction) {
                    root.$trigger.one('contextmenu:hidden', function() {
                        $(target).contextMenu({x: x, y: y});
                    });
                }

                root.$menu.trigger('contextmenu:hide');
            }, 50);
        },
        // key handled :hover
        keyStop: function(e, opt) {
            if (!opt.isInput) {
                e.preventDefault();
            }
            
            e.stopPropagation();
        },
        key: function(e) {
            var opt = $currentTrigger.data('contextMenu') || {};

            switch (e.keyCode) {
                case 9:
                case 38: // up
                    handle.keyStop(e, opt);
                    // if keyCode is [38 (up)] or [9 (tab) with shift]
                    if (opt.isInput) {
                        if (e.keyCode == 9 && e.shiftKey) {
                            e.preventDefault();
                            opt.$selected && opt.$selected.find('input, textarea, select').blur();
                            opt.$menu.trigger('prevcommand');
                            return;
                        } else if (e.keyCode == 38 && opt.$selected.find('input, textarea, select').prop('type') == 'checkbox') {
                            // checkboxes don't capture this key
                            e.preventDefault();
                            return;
                        }
                    } else if (e.keyCode != 9 || e.shiftKey) {
                        opt.$menu.trigger('prevcommand');
                        return;
                    }
                    // omitting break;
                    
                // case 9: // tab - reached through omitted break;
                case 40: // down
                    handle.keyStop(e, opt);
                    if (opt.isInput) {
                        if (e.keyCode == 9) {
                            e.preventDefault();
                            opt.$selected && opt.$selected.find('input, textarea, select').blur();
                            opt.$menu.trigger('nextcommand');
                            return;
                        } else if (e.keyCode == 40 && opt.$selected.find('input, textarea, select').prop('type') == 'checkbox') {
                            // checkboxes don't capture this key
                            e.preventDefault();
                            return;
                        }
                    } else {
                        opt.$menu.trigger('nextcommand');
                        return;
                    }
                    break;
                
                case 37: // left
                    handle.keyStop(e, opt);
                    if (opt.isInput || !opt.$selected || !opt.$selected.length) {
                        break;
                    }
                
                    if (!opt.$selected.parent().hasClass('context-menu-root')) {
                        var $parent = opt.$selected.parent().parent();
                        opt.$selected.trigger('contextmenu:blur');
                        opt.$selected = $parent;
                        return;
                    }
                    break;
                    
                case 39: // right
                    handle.keyStop(e, opt);
                    if (opt.isInput || !opt.$selected || !opt.$selected.length) {
                        break;
                    }
                    
                    var itemdata = opt.$selected.data('contextMenu') || {};
                    if (itemdata.$menu && opt.$selected.hasClass('context-menu-submenu')) {
                        opt.$selected = null;
                        itemdata.$selected = null;
                        itemdata.$menu.trigger('nextcommand');
                        return;
                    }
                    break;
                
                case 35: // end
                case 36: // home
                    if (opt.$selected && opt.$selected.find('input, textarea, select').length) {
                        return;
                    } else {
                        (opt.$selected && opt.$selected.parent() || opt.$menu)
                            .children(':not(.disabled, .not-selectable)')[e.keyCode == 36 ? 'first' : 'last']()
                            .trigger('contextmenu:focus');
                        e.preventDefault();
                        return;
                    }
                    break;
                    
                case 13: // enter
                    handle.keyStop(e, opt);
                    if (opt.isInput) {
                        if (opt.$selected && !opt.$selected.is('textarea, select')) {
                            e.preventDefault();
                            return;
                        }
                        break;
                    }
                    opt.$selected && opt.$selected.trigger('mouseup');
                    return;
                    
                case 32: // space
                case 33: // page up
                case 34: // page down
                    // prevent browser from scrolling down while menu is visible
                    handle.keyStop(e, opt);
                    return;
                    
                case 27: // esc
                    handle.keyStop(e, opt);
                    opt.$menu.trigger('contextmenu:hide');
                    return;
                    
                default: // 0-9, a-z
                    var k = (String.fromCharCode(e.keyCode)).toUpperCase();
                    if (opt.accesskeys[k]) {
                        // according to the specs accesskeys must be invoked immediately
                        opt.accesskeys[k].$node.trigger(opt.accesskeys[k].$menu
                            ? 'contextmenu:focus'
                            : 'mouseup'
                        );
                        return;
                    }
                    break;
            }
            // pass event to selected item, 
            // stop propagation to avoid endless recursion
            e.stopPropagation();
            opt.$selected && opt.$selected.trigger(e);
        },

        // select previous possible command in menu
        prevItem: function(e) {
            e.stopPropagation();
            var opt = $(this).data('contextMenu') || {};

            // obtain currently selected menu
            if (opt.$selected) {
                var $s = opt.$selected;
                opt = opt.$selected.parent().data('contextMenu') || {};
                opt.$selected = $s;
            }
            
            var $children = opt.$menu.children(),
                $prev = !opt.$selected || !opt.$selected.prev().length ? $children.last() : opt.$selected.prev(),
                $round = $prev;
            
            // skip disabled
            while ($prev.hasClass('disabled') || $prev.hasClass('not-selectable')) {
                if ($prev.prev().length) {
                    $prev = $prev.prev();
                } else {
                    $prev = $children.last();
                }
                if ($prev.is($round)) {
                    // break endless loop
                    return;
                }
            }
            
            // leave current
            if (opt.$selected) {
                handle.itemMouseleave.call(opt.$selected.get(0), e);
            }
            
            // activate next
            handle.itemMouseenter.call($prev.get(0), e);
            
            // focus input
            var $input = $prev.find('input, textarea, select');
            if ($input.length) {
                $input.focus();
            }
        },
        // select next possible command in menu
        nextItem: function(e) {
            e.stopPropagation();
            var opt = $(this).data('contextMenu') || {};

            // obtain currently selected menu
            if (opt.$selected) {
                var $s = opt.$selected;
                opt = opt.$selected.parent().data('contextMenu') || {};
                opt.$selected = $s;
            }

            var $children = opt.$menu.children(),
                $next = !opt.$selected || !opt.$selected.next().length ? $children.first() : opt.$selected.next(),
                $round = $next;

            // skip disabled
            while ($next.hasClass('disabled') || $next.hasClass('not-selectable')) {
                if ($next.next().length) {
                    $next = $next.next();
                } else {
                    $next = $children.first();
                }
                if ($next.is($round)) {
                    // break endless loop
                    return;
                }
            }
            
            // leave current
            if (opt.$selected) {
                handle.itemMouseleave.call(opt.$selected.get(0), e);
            }
            
            // activate next
            handle.itemMouseenter.call($next.get(0), e);
            
            // focus input
            var $input = $next.find('input, textarea, select');
            if ($input.length) {
                $input.focus();
            }
        },
        
        // flag that we're inside an input so the key handler can act accordingly
        focusInput: function(e) {
            var $this = $(this).closest('.context-menu-item'),
                data = $this.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot;

            root.$selected = opt.$selected = $this;
            root.isInput = opt.isInput = true;
        },
        // flag that we're inside an input so the key handler can act accordingly
        blurInput: function(e) {
            var $this = $(this).closest('.context-menu-item'),
                data = $this.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot;

            root.isInput = opt.isInput = false;
        },
        
        // :hover on menu
        menuMouseenter: function(e) {
            var root = $(this).data().contextMenuRoot;
            root.hovering = true;
        },
        // :hover on menu
        menuMouseleave: function(e) {
            var root = $(this).data().contextMenuRoot;
            if (root.$layer && root.$layer.is(e.relatedTarget)) {
                root.hovering = false;
            }
        },
        
        // :hover done manually so key handling is possible
        itemMouseenter: function(e) {
            var $this = $(this),
                data = $this.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot;
            
            root.hovering = true;

            // abort if we're re-entering
            if (e && root.$layer && root.$layer.is(e.relatedTarget)) {
                e.preventDefault();
                e.stopImmediatePropagation();
            }

            // make sure only one item is selected
            (opt.$menu ? opt : root).$menu
                .children('.hover').trigger('contextmenu:blur');

            if ($this.hasClass('disabled') || $this.hasClass('not-selectable')) {
                opt.$selected = null;
                return;
            }
            
            $this.trigger('contextmenu:focus');
        },
        // :hover done manually so key handling is possible
        itemMouseleave: function(e) {
            var $this = $(this),
                data = $this.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot;

            if (root !== opt && root.$layer && root.$layer.is(e.relatedTarget)) {
                root.$selected && root.$selected.trigger('contextmenu:blur');
                e.preventDefault();
                e.stopImmediatePropagation();
                root.$selected = opt.$selected = opt.$node;
                return;
            }
            
            $this.trigger('contextmenu:blur');
        },
        // contextMenu item click
        itemClick: function(e) {
            var $this = $(this),
                data = $this.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot,
                key = data.contextMenuKey,
                callback;

            // abort if the key is unknown or disabled or is a menu
            if (!opt.items[key] || $this.is('.disabled, .context-menu-submenu, .context-menu-separator, .not-selectable')) {
                return;
            }

            e.preventDefault();
            e.stopImmediatePropagation();

            if ($.isFunction(root.callbacks[key]) && Object.prototype.hasOwnProperty.call(root.callbacks, key)) {
                // item-specific callback
                callback = root.callbacks[key];
            } else if ($.isFunction(root.callback)) {
                // default callback
                callback = root.callback;                
            } else {
                // no callback, no action
                return;
            }

            // hide menu if callback doesn't stop that
            if (callback.call(root.$trigger, key, root) !== false) {
                root.$menu.trigger('contextmenu:hide');
            } else if (root.$menu.parent().length) {
                op.update.call(root.$trigger, root);
            }
        },
        // ignore click events on input elements
        inputClick: function(e) {
            e.stopImmediatePropagation();
        },
        
        // hide <menu>
        hideMenu: function(e, data) {
            var root = $(this).data('contextMenuRoot');
            op.hide.call(root.$trigger, root, data && data.force);
        },
        // focus <command>
        focusItem: function(e) {
            e.stopPropagation();
            var $this = $(this),
                data = $this.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot;

            $this.addClass('hover')
                .siblings('.hover').trigger('contextmenu:blur');
            
            // remember selected
            opt.$selected = root.$selected = $this;
            
            // position sub-menu - do after show so dumb $.ui.position can keep up
            if (opt.$node) {
                root.positionSubmenu.call(opt.$node, opt.$menu);
            }
        },
        // blur <command>
        blurItem: function(e) {
            e.stopPropagation();
            var $this = $(this),
                data = $this.data(),
                opt = data.contextMenu,
                root = data.contextMenuRoot;
            
            $this.removeClass('hover');
            opt.$selected = null;
        }
    },
    // operations
    op = {
        show: function(opt, x, y) {
            var $trigger = $(this),
                offset,
                css = {};

            // hide any open menus
            $('#context-menu-layer').trigger('mousedown');

            // backreference for callbacks
            opt.$trigger = $trigger;

            // show event
            if (opt.events.show.call($trigger, opt) === false) {
                $currentTrigger = null;
                return;
            }

            // create or update context menu
            op.update.call($trigger, opt);
            
            // position menu
            opt.position.call($trigger, opt, x, y);

            // make sure we're in front
            if (opt.zIndex) {
                css.zIndex = zindex($trigger) + opt.zIndex;
            }
            
            // add layer
            op.layer.call(opt.$menu, opt, css.zIndex);
            
            // adjust sub-menu zIndexes
            opt.$menu.find('ul').css('zIndex', css.zIndex + 1);
            
            // position and show context menu
            opt.$menu.css( css )[opt.animation.show](opt.animation.duration, function() {
                $trigger.trigger('contextmenu:visible');
            });
            // make options available and set state
            $trigger
                .data('contextMenu', opt)
                .addClass("context-menu-active");
            
            // register key handler
            $(document).off('keydown.contextMenu').on('keydown.contextMenu', handle.key);
            // register autoHide handler
            if (opt.autoHide) {
                // mouse position handler
                $(document).on('mousemove.contextMenuAutoHide', function(e) {
                    // need to capture the offset on mousemove,
                    // since the page might've been scrolled since activation
                    var pos = $trigger.offset();
                    pos.right = pos.left + $trigger.outerWidth();
                    pos.bottom = pos.top + $trigger.outerHeight();
                    
                    if (opt.$layer && !opt.hovering && (!(e.pageX >= pos.left && e.pageX <= pos.right) || !(e.pageY >= pos.top && e.pageY <= pos.bottom))) {
                        // if mouse in menu...
                        opt.$menu.trigger('contextmenu:hide');
                    }
                });
            }
        },
        hide: function(opt, force) {
            var $trigger = $(this);
            if (!opt) {
                opt = $trigger.data('contextMenu') || {};
            }
            
            // hide event
            if (!force && opt.events && opt.events.hide.call($trigger, opt) === false) {
                return;
            }
            
            // remove options and revert state
            $trigger
                .removeData('contextMenu')
                .removeClass("context-menu-active");
            
            if (opt.$layer) {
                // keep layer for a bit so the contextmenu event can be aborted properly by opera
                setTimeout((function($layer) {
                    return function(){
                        $layer.remove();
                    };
                })(opt.$layer), 10);
                
                try {
                    delete opt.$layer;
                } catch(e) {
                    opt.$layer = null;
                }
            }
            
            // remove handle
            $currentTrigger = null;
            // remove selected
            opt.$menu.find('.hover').trigger('contextmenu:blur');
            opt.$selected = null;
            // unregister key and mouse handlers
            //$(document).off('.contextMenuAutoHide keydown.contextMenu'); // http://bugs.jquery.com/ticket/10705
            $(document).off('.contextMenuAutoHide').off('keydown.contextMenu');
            // hide menu
            opt.$menu && opt.$menu[opt.animation.hide](opt.animation.duration, function (){
                // tear down dynamically built menu after animation is completed.
                if (opt.build) {
                    opt.$menu.remove();
                    $.each(opt, function(key, value) {
                        switch (key) {
                            case 'ns':
                            case 'selector':
                            case 'build':
                            case 'trigger':
                                return true;

                            default:
                                opt[key] = undefined;
                                try {
                                    delete opt[key];
                                } catch (e) {}
                                return true;
                        }
                    });
                }
                
                setTimeout(function() {
                    $trigger.trigger('contextmenu:hidden');
                }, 10);
            });
        },
        create: function(opt, root) {
            if (root === undefined) {
                root = opt;
            }
            // create contextMenu
            opt.$menu = $('<ul class="context-menu-list"></ul>').addClass(opt.className || "").data({
                'contextMenu': opt,
                'contextMenuRoot': root
            });
            
            $.each(['callbacks', 'commands', 'inputs'], function(i,k){
                opt[k] = {};
                if (!root[k]) {
                    root[k] = {};
                }
            });
            
            root.accesskeys || (root.accesskeys = {});
            
            // create contextMenu items
            $.each(opt.items, function(key, item){
                var $t = $('<li class="context-menu-item"></li>').addClass(item.className || ""),
                    $label = null,
                    $input = null;
                
                // iOS needs to see a click-event bound to an element to actually
                // have the TouchEvents infrastructure trigger the click event
                $t.on('click', $.noop);
                
                item.$node = $t.data({
                    'contextMenu': opt,
                    'contextMenuRoot': root,
                    'contextMenuKey': key
                });
                
                // register accesskey
                // NOTE: the accesskey attribute should be applicable to any element, but Safari5 and Chrome13 still can't do that
                if (item.accesskey) {
                    var aks = splitAccesskey(item.accesskey);
                    for (var i=0, ak; ak = aks[i]; i++) {
                        if (!root.accesskeys[ak]) {
                            root.accesskeys[ak] = item;
                            item._name = item.name.replace(new RegExp('(' + ak + ')', 'i'), '<span class="context-menu-accesskey">$1</span>');
                            break;
                        }
                    }
                }
                
                if (typeof item == "string") {
                    $t.addClass('context-menu-separator not-selectable');
                } else if (item.type && types[item.type]) {
                    // run custom type handler
                    types[item.type].call($t, item, opt, root);
                    // register commands
                    $.each([opt, root], function(i,k){
                        k.commands[key] = item;
                        if ($.isFunction(item.callback)) {
                            k.callbacks[key] = item.callback;
                        }
                    });
                } else {
                    // add label for input
                    if (item.type == 'html') {
                        $t.addClass('context-menu-html not-selectable');
                    } else if (item.type) {
                        $label = $('<label></label>').appendTo($t);
                        $('<span></span>').html(item._name || item.name).appendTo($label);
                        $t.addClass('context-menu-input');
                        opt.hasTypes = true;
                        $.each([opt, root], function(i,k){
                            k.commands[key] = item;
                            k.inputs[key] = item;
                        });
                    } else if (item.items) {
                        item.type = 'sub';
                    }
                
                    switch (item.type) {
                        case 'text':
                            $input = $('<input type="text" value="1" name="" value="">')
                                .attr('name', 'context-menu-input-' + key)
                                .val(item.value || "")
                                .appendTo($label);
                            break;
                    
                        case 'textarea':
                            $input = $('<textarea name=""></textarea>')
                                .attr('name', 'context-menu-input-' + key)
                                .val(item.value || "")
                                .appendTo($label);

                            if (item.height) {
                                $input.height(item.height);
                            }
                            break;

                        case 'checkbox':
                            $input = $('<input type="checkbox" value="1" name="" value="">')
                                .attr('name', 'context-menu-input-' + key)
                                .val(item.value || "")
                                .prop("checked", !!item.selected)
                                .prependTo($label);
                            break;

                        case 'radio':
                            $input = $('<input type="radio" value="1" name="" value="">')
                                .attr('name', 'context-menu-input-' + item.radio)
                                .val(item.value || "")
                                .prop("checked", !!item.selected)
                                .prependTo($label);
                            break;
                    
                        case 'select':
                            $input = $('<select name="">')
                                .attr('name', 'context-menu-input-' + key)
                                .appendTo($label);
                            if (item.options) {
                                $.each(item.options, function(value, text) {
                                    $('<option></option>').val(value).text(text).appendTo($input);
                                });
                                $input.val(item.selected);
                            }
                            break;
                        
                        case 'sub':
                            // FIXME: shouldn't this .html() be a .text()?
                            $('<span></span>').html(item._name || item.name).appendTo($t);
                            item.appendTo = item.$node;
                            op.create(item, root);
                            $t.data('contextMenu', item).addClass('context-menu-submenu');
                            item.callback = null;
                            break;
                        
                        case 'html':
                            $(item.html).appendTo($t);
                            break;
                        
                        default:
                            $.each([opt, root], function(i,k){
                                k.commands[key] = item;
                                if ($.isFunction(item.callback)) {
                                    k.callbacks[key] = item.callback;
                                }
                            });
                            // FIXME: shouldn't this .html() be a .text()?
                            $('<span></span>').html(item._name || item.name || "").appendTo($t);
                            break;
                    }
                    
                    // disable key listener in <input>
                    if (item.type && item.type != 'sub' && item.type != 'html') {
                        $input
                            .on('focus', handle.focusInput)
                            .on('blur', handle.blurInput);
                        
                        if (item.events) {
                            $input.on(item.events, opt);
                        }
                    }
                
                    // add icons
                    if (item.icon) {
                        $t.addClass("icon icon-" + item.icon);
                    }
                }
                
                // cache contained elements
                item.$input = $input;
                item.$label = $label;

                // attach item to menu
                $t.appendTo(opt.$menu);
                
                // Disable text selection
                if (!opt.hasTypes && $.support.eventSelectstart) {
                    // browsers support user-select: none, 
                    // IE has a special event for text-selection
                    // browsers supporting neither will not be preventing text-selection
                    $t.on('selectstart.disableTextSelect', handle.abortevent);
                }
            });
            // attach contextMenu to <body> (to bypass any possible overflow:hidden issues on parents of the trigger element)
            if (!opt.$node) {
                opt.$menu.css('display', 'none').addClass('context-menu-root');
            }
            opt.$menu.appendTo(opt.appendTo || document.body);
        },
        resize: function($menu, nested) {
            // determine widths of submenus, as CSS won't grow them automatically
            // position:absolute within position:absolute; min-width:100; max-width:200; results in width: 100;
            // kinda sucks hard...

            // determine width of absolutely positioned element
            $menu.css({position: 'absolute', display: 'block'});
            // don't apply yet, because that would break nested elements' widths
            // add a pixel to circumvent word-break issue in IE9 - #80
            $menu.data('width', Math.ceil($menu.width()) + 1);
            // reset styles so they allow nested elements to grow/shrink naturally
            $menu.css({
                position: 'static',
                minWidth: '0px',
                maxWidth: '100000px'
            });
            // identify width of nested menus
            $menu.find('> li > ul').each(function() {
                op.resize($(this), true);
            });
            // reset and apply changes in the end because nested
            // elements' widths wouldn't be calculatable otherwise
            if (!nested) {
                $menu.find('ul').andSelf().css({
                    position: '', 
                    display: '',
                    minWidth: '',
                    maxWidth: ''
                }).width(function() {
                    return $(this).data('width');
                });
            }
        },
        update: function(opt, root) {
            var $trigger = this;
            if (root === undefined) {
                root = opt;
                op.resize(opt.$menu);
            }
            // re-check disabled for each item
            opt.$menu.children().each(function(){
                var $item = $(this),
                    key = $item.data('contextMenuKey'),
                    item = opt.items[key],
                    disabled = ($.isFunction(item.disabled) && item.disabled.call($trigger, key, root)) || item.disabled === true;

                // dis- / enable item
                $item[disabled ? 'addClass' : 'removeClass']('disabled');
                
                if (item.type) {
                    // dis- / enable input elements
                    $item.find('input, select, textarea').prop('disabled', disabled);
                    
                    // update input states
                    switch (item.type) {
                        case 'text':
                        case 'textarea':
                            item.$input.val(item.value || "");
                            break;
                            
                        case 'checkbox':
                        case 'radio':
                            item.$input.val(item.value || "").prop('checked', !!item.selected);
                            break;
                            
                        case 'select':
                            item.$input.val(item.selected || "");
                            break;
                    }
                }
                
                if (item.$menu) {
                    // update sub-menu
                    op.update.call($trigger, item, root);
                }
            });
        },
        layer: function(opt, zIndex) {
            // add transparent layer for click area
            // filter and background for Internet Explorer, Issue #23
            var $layer = opt.$layer = $('<div id="context-menu-layer" style="position:fixed; z-index:' + zIndex + '; top:0; left:0; opacity: 0; filter: alpha(opacity=0); background-color: #000;"></div>')
                .css({height: $win.height(), width: $win.width(), display: 'block'})
                .data('contextMenuRoot', opt)
                .insertBefore(this)
                .on('contextmenu', handle.abortevent)
                .on('mousedown', handle.layerClick);
            
            // IE6 doesn't know position:fixed;
            if (!$.support.fixedPosition) {
                $layer.css({
                    'position' : 'absolute',
                    'height' : $(document).height()
                });
            }
            
            return $layer;
        }
    };

// split accesskey according to http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#assigned-access-key
function splitAccesskey(val) {
    var t = val.split(/\s+/),
        keys = [];
        
    for (var i=0, k; k = t[i]; i++) {
        k = k[0].toUpperCase(); // first character only
        // theoretically non-accessible characters should be ignored, but different systems, different keyboard layouts, ... screw it.
        // a map to look up already used access keys would be nice
        keys.push(k);
    }
    
    return keys;
}

// handle contextMenu triggers
$.fn.contextMenu = function(operation) {
    if (operation === undefined) {
        this.first().trigger('contextmenu');
    } else if (operation.x && operation.y) {
        this.first().trigger($.Event("contextmenu", {pageX: operation.x, pageY: operation.y}));
    } else if (operation === "hide") {
        var $menu = this.data('contextMenu').$menu;
        $menu && $menu.trigger('contextmenu:hide');
    } else if (operation === "destroy") {
        $.contextMenu("destroy", {context: this});
    } else if ($.isPlainObject(operation)) {
        operation.context = this;
        $.contextMenu("create", operation);
    } else if (operation) {
        this.removeClass('context-menu-disabled');
    } else if (!operation) {
        this.addClass('context-menu-disabled');
    }
    
    return this;
};

// manage contextMenu instances
$.contextMenu = function(operation, options) {
    if (typeof operation != 'string') {
        options = operation;
        operation = 'create';
    }
    
    if (typeof options == 'string') {
        options = {selector: options};
    } else if (options === undefined) {
        options = {};
    }
    
    // merge with default options
    var o = $.extend(true, {}, defaults, options || {});
    var $document = $(document);
    var $context = $document;
    var _hasContext = false;
    
    if (!o.context || !o.context.length) {
        o.context = document;
    } else {
        // you never know what they throw at you...
        $context = $(o.context).first();
        o.context = $context.get(0);
        _hasContext = o.context !== document;
    }
    
    switch (operation) {
        case 'create':
            // no selector no joy
            if (!o.selector) {
                throw new Error('No selector specified');
            }
            // make sure internal classes are not bound to
            if (o.selector.match(/.context-menu-(list|item|input)($|\s)/)) {
                throw new Error('Cannot bind to selector "' + o.selector + '" as it contains a reserved className');
            }
            if (!o.build && (!o.items || $.isEmptyObject(o.items))) {
                throw new Error('No Items specified');
            }
            counter ++;
            o.ns = '.contextMenu' + counter;
            if (!_hasContext) {
                namespaces[o.selector] = o.ns;
            }
            menus[o.ns] = o;
            
            // default to right click
            if (!o.trigger) {
                o.trigger = 'right';
            }
            
            if (!initialized) {
                // make sure item click is registered first
                $document
                    .on({
                        'contextmenu:hide.contextMenu': handle.hideMenu,
                        'prevcommand.contextMenu': handle.prevItem,
                        'nextcommand.contextMenu': handle.nextItem,
                        'contextmenu.contextMenu': handle.abortevent,
                        'mouseenter.contextMenu': handle.menuMouseenter,
                        'mouseleave.contextMenu': handle.menuMouseleave
                    }, '.context-menu-list')
                    .on('mouseup.contextMenu', '.context-menu-input', handle.inputClick)
                    .on({
                        'mouseup.contextMenu': handle.itemClick,
                        'contextmenu:focus.contextMenu': handle.focusItem,
                        'contextmenu:blur.contextMenu': handle.blurItem,
                        'contextmenu.contextMenu': handle.abortevent,
                        'mouseenter.contextMenu': handle.itemMouseenter,
                        'mouseleave.contextMenu': handle.itemMouseleave
                    }, '.context-menu-item');

                initialized = true;
            }
            
            // engage native contextmenu event
            $context
                .on('contextmenu' + o.ns, o.selector, o, handle.contextmenu);
            
            if (_hasContext) {
                // add remove hook, just in case
                $context.on('remove' + o.ns, function() {
                    $(this).contextMenu("destroy");
                });
            }
            
            switch (o.trigger) {
                case 'hover':
                        $context
                            .on('mouseenter' + o.ns, o.selector, o, handle.mouseenter)
                            .on('mouseleave' + o.ns, o.selector, o, handle.mouseleave);                    
                    break;
                    
                case 'left':
                        $context.on('click' + o.ns, o.selector, o, handle.click);
                    break;
                /*
                default:
                    // http://www.quirksmode.org/dom/events/contextmenu.html
                    $document
                        .on('mousedown' + o.ns, o.selector, o, handle.mousedown)
                        .on('mouseup' + o.ns, o.selector, o, handle.mouseup);
                    break;
                */
            }
            
            // create menu
            if (!o.build) {
                op.create(o);
            }
            break;
        
        case 'destroy':
            var $visibleMenu;
            if (_hasContext) {
                // get proper options 
                var context = o.context;
                $.each(menus, function(ns, o) {
                    if (o.context !== context) {
                        return true;
                    }
                    
                    $visibleMenu = $('.context-menu-list').filter(':visible');
                    if ($visibleMenu.length && $visibleMenu.data().contextMenuRoot.$trigger.is($(o.context).find(o.selector))) {
                        $visibleMenu.trigger('contextmenu:hide', {force: true});
                    }

                    try {
                        if (menus[o.ns].$menu) {
                            menus[o.ns].$menu.remove();
                        }

                        delete menus[o.ns];
                    } catch(e) {
                        menus[o.ns] = null;
                    }

                    $(o.context).off(o.ns);
                    
                    return true;
                });
            } else if (!o.selector) {
                $document.off('.contextMenu .contextMenuAutoHide');
                $.each(menus, function(ns, o) {
                    $(o.context).off(o.ns);
                });
                
                namespaces = {};
                menus = {};
                counter = 0;
                initialized = false;
                
                $('#context-menu-layer, .context-menu-list').remove();
            } else if (namespaces[o.selector]) {
                $visibleMenu = $('.context-menu-list').filter(':visible');
                if ($visibleMenu.length && $visibleMenu.data().contextMenuRoot.$trigger.is(o.selector)) {
                    $visibleMenu.trigger('contextmenu:hide', {force: true});
                }
                
                try {
                    if (menus[namespaces[o.selector]].$menu) {
                        menus[namespaces[o.selector]].$menu.remove();
                    }
                    
                    delete menus[namespaces[o.selector]];
                } catch(e) {
                    menus[namespaces[o.selector]] = null;
                }
                
                $document.off(namespaces[o.selector]);
            }
            break;
        
        case 'html5':
            // if <command> or <menuitem> are not handled by the browser,
            // or options was a bool true,
            // initialize $.contextMenu for them
            if ((!$.support.htmlCommand && !$.support.htmlMenuitem) || (typeof options == "boolean" && options)) {
                $('menu[type="context"]').each(function() {
                    if (this.id) {
                        $.contextMenu({
                            selector: '[contextmenu=' + this.id +']',
                            items: $.contextMenu.fromMenu(this)
                        });
                    }
                }).css('display', 'none');
            }
            break;
        
        default:
            throw new Error('Unknown operation "' + operation + '"');
    }
    
    return this;
};

// import values into <input> commands
$.contextMenu.setInputValues = function(opt, data) {
    if (data === undefined) {
        data = {};
    }
    
    $.each(opt.inputs, function(key, item) {
        switch (item.type) {
            case 'text':
            case 'textarea':
                item.value = data[key] || "";
                break;

            case 'checkbox':
                item.selected = data[key] ? true : false;
                break;
                
            case 'radio':
                item.selected = (data[item.radio] || "") == item.value ? true : false;
                break;
            
            case 'select':
                item.selected = data[key] || "";
                break;
        }
    });
};

// export values from <input> commands
$.contextMenu.getInputValues = function(opt, data) {
    if (data === undefined) {
        data = {};
    }
    
    $.each(opt.inputs, function(key, item) {
        switch (item.type) {
            case 'text':
            case 'textarea':
            case 'select':
                data[key] = item.$input.val();
                break;

            case 'checkbox':
                data[key] = item.$input.prop('checked');
                break;
                
            case 'radio':
                if (item.$input.prop('checked')) {
                    data[item.radio] = item.value;
                }
                break;
        }
    });
    
    return data;
};

// find <label for="xyz">
function inputLabel(node) {
    return (node.id && $('label[for="'+ node.id +'"]').val()) || node.name;
}

// convert <menu> to items object
function menuChildren(items, $children, counter) {
    if (!counter) {
        counter = 0;
    }
    
    $children.each(function() {
        var $node = $(this),
            node = this,
            nodeName = this.nodeName.toLowerCase(),
            label,
            item;
        
        // extract <label><input>
        if (nodeName == 'label' && $node.find('input, textarea, select').length) {
            label = $node.text();
            $node = $node.children().first();
            node = $node.get(0);
            nodeName = node.nodeName.toLowerCase();
        }
        
        /*
         * <menu> accepts flow-content as children. that means <embed>, <canvas> and such are valid menu items.
         * Not being the sadistic kind, $.contextMenu only accepts:
         * <command>, <menuitem>, <hr>, <span>, <p> <input [text, radio, checkbox]>, <textarea>, <select> and of course <menu>.
         * Everything else will be imported as an html node, which is not interfaced with contextMenu.
         */
        
        // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#concept-command
        switch (nodeName) {
            // http://www.whatwg.org/specs/web-apps/current-work/multipage/interactive-elements.html#the-menu-element
            case 'menu':
                item = {name: $node.attr('label'), items: {}};
                counter = menuChildren(item.items, $node.children(), counter);
                break;
            
            // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#using-the-a-element-to-define-a-command
            case 'a':
            // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#using-the-button-element-to-define-a-command
            case 'button':
                item = {
                    name: $node.text(),
                    disabled: !!$node.attr('disabled'),
                    callback: (function(){ return function(){ $node.click(); }; })()
                };
                break;
            
            // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#using-the-command-element-to-define-a-command

            case 'menuitem':
            case 'command':
                switch ($node.attr('type')) {
                    case undefined:
                    case 'command':
                    case 'menuitem':
                        item = {
                            name: $node.attr('label'),
                            disabled: !!$node.attr('disabled'),
                            callback: (function(){ return function(){ $node.click(); }; })()
                        };
                        break;
                        
                    case 'checkbox':
                        item = {
                            type: 'checkbox',
                            disabled: !!$node.attr('disabled'),
                            name: $node.attr('label'),
                            selected: !!$node.attr('checked')
                        };
                        break;
                        
                    case 'radio':
                        item = {
                            type: 'radio',
                            disabled: !!$node.attr('disabled'),
                            name: $node.attr('label'),
                            radio: $node.attr('radiogroup'),
                            value: $node.attr('id'),
                            selected: !!$node.attr('checked')
                        };
                        break;
                        
                    default:
                        item = undefined;
                }
                break;
 
            case 'hr':
                item = '-------';
                break;
                
            case 'input':
                switch ($node.attr('type')) {
                    case 'text':
                        item = {
                            type: 'text',
                            name: label || inputLabel(node),
                            disabled: !!$node.attr('disabled'),
                            value: $node.val()
                        };
                        break;
                        
                    case 'checkbox':
                        item = {
                            type: 'checkbox',
                            name: label || inputLabel(node),
                            disabled: !!$node.attr('disabled'),
                            selected: !!$node.attr('checked')
                        };
                        break;
                        
                    case 'radio':
                        item = {
                            type: 'radio',
                            name: label || inputLabel(node),
                            disabled: !!$node.attr('disabled'),
                            radio: !!$node.attr('name'),
                            value: $node.val(),
                            selected: !!$node.attr('checked')
                        };
                        break;
                    
                    default:
                        item = undefined;
                        break;
                }
                break;
                
            case 'select':
                item = {
                    type: 'select',
                    name: label || inputLabel(node),
                    disabled: !!$node.attr('disabled'),
                    selected: $node.val(),
                    options: {}
                };
                $node.children().each(function(){
                    item.options[this.value] = $(this).text();
                });
                break;
                
            case 'textarea':
                item = {
                    type: 'textarea',
                    name: label || inputLabel(node),
                    disabled: !!$node.attr('disabled'),
                    value: $node.val()
                };
                break;
            
            case 'label':
                break;
            
            default:
                item = {type: 'html', html: $node.clone(true)};
                break;
        }
        
        if (item) {
            counter++;
            items['key' + counter] = item;
        }
    });
    
    return counter;
}

// convert html5 menu
$.contextMenu.fromMenu = function(element) {
    var $this = $(element),
        items = {};
        
    menuChildren(items, $this.children());
    
    return items;
};

// make defaults accessible
$.contextMenu.defaults = defaults;
$.contextMenu.types = types;
// export internal functions - undocumented, for hacking only!
$.contextMenu.handle = handle;
$.contextMenu.op = op;
$.contextMenu.menus = menus;

})(jQuery);

// /Users/michaelmartinez/webviewer/Content/js/jquery.ui.position.js
/*!
 * jQuery UI Position v1.10.0
 * http://jqueryui.com
 *
 * Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */
(function( $, undefined ) {

$.ui = $.ui || {};

var cachedScrollbarWidth,
	max = Math.max,
	abs = Math.abs,
	round = Math.round,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseInt( offsets[ 0 ], 10 ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseInt( offsets[ 1 ], 10 ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[0];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[0];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[0].clientWidth;
		}

		div.remove();

		return (cachedScrollbarWidth = w1 - w2);
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow ? "" : within.element.css( "overflow-x" ),
			overflowY = within.isWindow ? "" : within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[0].scrollHeight );
		return {
			width: hasOverflowX ? $.position.scrollbarWidth() : 0,
			height: hasOverflowY ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[0] );
		return {
			element: withinElement,
			isWindow: isWindow,
			offset: withinElement.offset() || { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),
			width: isWindow ? withinElement.width() : withinElement.outerWidth(),
			height: isWindow ? withinElement.height() : withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[0].preventDefault ) {
		// force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;
	// clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	});

	// normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each(function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		// if the browser doesn't support fractions, then round for consistent results
		if ( !$.support.offsetFractions ) {
			position.left = round( position.left );
			position.top = round( position.top );
		}

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[ i ] ] ) {
				$.ui.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem : elem
				});
			}
		});

		if ( options.using ) {
			// adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	});
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// element is wider than within
			if ( data.collisionWidth > outerWidth ) {
				// element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
					position.left += overLeft - newOverRight;
				// element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;
				// element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}
			// too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;
			// too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;
			// adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// element is taller than within
			if ( data.collisionHeight > outerHeight ) {
				// element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
					position.top += overTop - newOverBottom;
				// element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;
				// element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}
			// too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;
			// too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;
			// adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			}
			else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
				if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
			else if ( overBottom > 0 ) {
				newOverTop = position.top -  data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
				if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.ui.position.flip.left.apply( this, arguments );
			$.ui.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.ui.position.flip.top.apply( this, arguments );
			$.ui.position.fit.top.apply( this, arguments );
		}
	}
};

// fraction support test
(function () {
	var testElement, testElementParent, testElementStyle, offsetLeft, i,
		body = document.getElementsByTagName( "body" )[ 0 ],
		div = document.createElement( "div" );

	//Create a "fake body" for testing based on method used in jQuery.support
	testElement = document.createElement( body ? "div" : "body" );
	testElementStyle = {
		visibility: "hidden",
		width: 0,
		height: 0,
		border: 0,
		margin: 0,
		background: "none"
	};
	if ( body ) {
		$.extend( testElementStyle, {
			position: "absolute",
			left: "-1000px",
			top: "-1000px"
		});
	}
	for ( i in testElementStyle ) {
		testElement.style[ i ] = testElementStyle[ i ];
	}
	testElement.appendChild( div );
	testElementParent = body || document.documentElement;
	testElementParent.insertBefore( testElement, testElementParent.firstChild );

	div.style.cssText = "position: absolute; left: 10.7432222px;";

	offsetLeft = $( div ).offset().left;
	$.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;

	testElement.innerHTML = "";
	testElementParent.removeChild( testElement );
})();

}( jQuery ) );
// /Users/michaelmartinez/webviewer/Content/js/underscore.min.js
(function(){var n=this,t=n._,r={},e=Array.prototype,u=Object.prototype,i=Function.prototype,a=e.push,o=e.slice,c=e.concat,l=u.toString,f=u.hasOwnProperty,s=e.forEach,p=e.map,h=e.reduce,v=e.reduceRight,d=e.filter,g=e.every,m=e.some,y=e.indexOf,b=e.lastIndexOf,x=Array.isArray,_=Object.keys,j=i.bind,w=function(n){return n instanceof w?n:this instanceof w?(this._wrapped=n,void 0):new w(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=w),exports._=w):n._=w,w.VERSION="1.4.4";var A=w.each=w.forEach=function(n,t,e){if(null!=n)if(s&&n.forEach===s)n.forEach(t,e);else if(n.length===+n.length){for(var u=0,i=n.length;i>u;u++)if(t.call(e,n[u],u,n)===r)return}else for(var a in n)if(w.has(n,a)&&t.call(e,n[a],a,n)===r)return};w.map=w.collect=function(n,t,r){var e=[];return null==n?e:p&&n.map===p?n.map(t,r):(A(n,function(n,u,i){e[e.length]=t.call(r,n,u,i)}),e)};var O="Reduce of empty array with no initial value";w.reduce=w.foldl=w.inject=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),h&&n.reduce===h)return e&&(t=w.bind(t,e)),u?n.reduce(t,r):n.reduce(t);if(A(n,function(n,i,a){u?r=t.call(e,r,n,i,a):(r=n,u=!0)}),!u)throw new TypeError(O);return r},w.reduceRight=w.foldr=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),v&&n.reduceRight===v)return e&&(t=w.bind(t,e)),u?n.reduceRight(t,r):n.reduceRight(t);var i=n.length;if(i!==+i){var a=w.keys(n);i=a.length}if(A(n,function(o,c,l){c=a?a[--i]:--i,u?r=t.call(e,r,n[c],c,l):(r=n[c],u=!0)}),!u)throw new TypeError(O);return r},w.find=w.detect=function(n,t,r){var e;return E(n,function(n,u,i){return t.call(r,n,u,i)?(e=n,!0):void 0}),e},w.filter=w.select=function(n,t,r){var e=[];return null==n?e:d&&n.filter===d?n.filter(t,r):(A(n,function(n,u,i){t.call(r,n,u,i)&&(e[e.length]=n)}),e)},w.reject=function(n,t,r){return w.filter(n,function(n,e,u){return!t.call(r,n,e,u)},r)},w.every=w.all=function(n,t,e){t||(t=w.identity);var u=!0;return null==n?u:g&&n.every===g?n.every(t,e):(A(n,function(n,i,a){return(u=u&&t.call(e,n,i,a))?void 0:r}),!!u)};var E=w.some=w.any=function(n,t,e){t||(t=w.identity);var u=!1;return null==n?u:m&&n.some===m?n.some(t,e):(A(n,function(n,i,a){return u||(u=t.call(e,n,i,a))?r:void 0}),!!u)};w.contains=w.include=function(n,t){return null==n?!1:y&&n.indexOf===y?n.indexOf(t)!=-1:E(n,function(n){return n===t})},w.invoke=function(n,t){var r=o.call(arguments,2),e=w.isFunction(t);return w.map(n,function(n){return(e?t:n[t]).apply(n,r)})},w.pluck=function(n,t){return w.map(n,function(n){return n[t]})},w.where=function(n,t,r){return w.isEmpty(t)?r?null:[]:w[r?"find":"filter"](n,function(n){for(var r in t)if(t[r]!==n[r])return!1;return!0})},w.findWhere=function(n,t){return w.where(n,t,!0)},w.max=function(n,t,r){if(!t&&w.isArray(n)&&n[0]===+n[0]&&65535>n.length)return Math.max.apply(Math,n);if(!t&&w.isEmpty(n))return-1/0;var e={computed:-1/0,value:-1/0};return A(n,function(n,u,i){var a=t?t.call(r,n,u,i):n;a>=e.computed&&(e={value:n,computed:a})}),e.value},w.min=function(n,t,r){if(!t&&w.isArray(n)&&n[0]===+n[0]&&65535>n.length)return Math.min.apply(Math,n);if(!t&&w.isEmpty(n))return 1/0;var e={computed:1/0,value:1/0};return A(n,function(n,u,i){var a=t?t.call(r,n,u,i):n;e.computed>a&&(e={value:n,computed:a})}),e.value},w.shuffle=function(n){var t,r=0,e=[];return A(n,function(n){t=w.random(r++),e[r-1]=e[t],e[t]=n}),e};var k=function(n){return w.isFunction(n)?n:function(t){return t[n]}};w.sortBy=function(n,t,r){var e=k(t);return w.pluck(w.map(n,function(n,t,u){return{value:n,index:t,criteria:e.call(r,n,t,u)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||r===void 0)return 1;if(e>r||e===void 0)return-1}return n.index<t.index?-1:1}),"value")};var F=function(n,t,r,e){var u={},i=k(t||w.identity);return A(n,function(t,a){var o=i.call(r,t,a,n);e(u,o,t)}),u};w.groupBy=function(n,t,r){return F(n,t,r,function(n,t,r){(w.has(n,t)?n[t]:n[t]=[]).push(r)})},w.countBy=function(n,t,r){return F(n,t,r,function(n,t){w.has(n,t)||(n[t]=0),n[t]++})},w.sortedIndex=function(n,t,r,e){r=null==r?w.identity:k(r);for(var u=r.call(e,t),i=0,a=n.length;a>i;){var o=i+a>>>1;u>r.call(e,n[o])?i=o+1:a=o}return i},w.toArray=function(n){return n?w.isArray(n)?o.call(n):n.length===+n.length?w.map(n,w.identity):w.values(n):[]},w.size=function(n){return null==n?0:n.length===+n.length?n.length:w.keys(n).length},w.first=w.head=w.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:o.call(n,0,t)},w.initial=function(n,t,r){return o.call(n,0,n.length-(null==t||r?1:t))},w.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:o.call(n,Math.max(n.length-t,0))},w.rest=w.tail=w.drop=function(n,t,r){return o.call(n,null==t||r?1:t)},w.compact=function(n){return w.filter(n,w.identity)};var R=function(n,t,r){return A(n,function(n){w.isArray(n)?t?a.apply(r,n):R(n,t,r):r.push(n)}),r};w.flatten=function(n,t){return R(n,t,[])},w.without=function(n){return w.difference(n,o.call(arguments,1))},w.uniq=w.unique=function(n,t,r,e){w.isFunction(t)&&(e=r,r=t,t=!1);var u=r?w.map(n,r,e):n,i=[],a=[];return A(u,function(r,e){(t?e&&a[a.length-1]===r:w.contains(a,r))||(a.push(r),i.push(n[e]))}),i},w.union=function(){return w.uniq(c.apply(e,arguments))},w.intersection=function(n){var t=o.call(arguments,1);return w.filter(w.uniq(n),function(n){return w.every(t,function(t){return w.indexOf(t,n)>=0})})},w.difference=function(n){var t=c.apply(e,o.call(arguments,1));return w.filter(n,function(n){return!w.contains(t,n)})},w.zip=function(){for(var n=o.call(arguments),t=w.max(w.pluck(n,"length")),r=Array(t),e=0;t>e;e++)r[e]=w.pluck(n,""+e);return r},w.object=function(n,t){if(null==n)return{};for(var r={},e=0,u=n.length;u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},w.indexOf=function(n,t,r){if(null==n)return-1;var e=0,u=n.length;if(r){if("number"!=typeof r)return e=w.sortedIndex(n,t),n[e]===t?e:-1;e=0>r?Math.max(0,u+r):r}if(y&&n.indexOf===y)return n.indexOf(t,r);for(;u>e;e++)if(n[e]===t)return e;return-1},w.lastIndexOf=function(n,t,r){if(null==n)return-1;var e=null!=r;if(b&&n.lastIndexOf===b)return e?n.lastIndexOf(t,r):n.lastIndexOf(t);for(var u=e?r:n.length;u--;)if(n[u]===t)return u;return-1},w.range=function(n,t,r){1>=arguments.length&&(t=n||0,n=0),r=arguments[2]||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=0,i=Array(e);e>u;)i[u++]=n,n+=r;return i},w.bind=function(n,t){if(n.bind===j&&j)return j.apply(n,o.call(arguments,1));var r=o.call(arguments,2);return function(){return n.apply(t,r.concat(o.call(arguments)))}},w.partial=function(n){var t=o.call(arguments,1);return function(){return n.apply(this,t.concat(o.call(arguments)))}},w.bindAll=function(n){var t=o.call(arguments,1);return 0===t.length&&(t=w.functions(n)),A(t,function(t){n[t]=w.bind(n[t],n)}),n},w.memoize=function(n,t){var r={};return t||(t=w.identity),function(){var e=t.apply(this,arguments);return w.has(r,e)?r[e]:r[e]=n.apply(this,arguments)}},w.delay=function(n,t){var r=o.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},w.defer=function(n){return w.delay.apply(w,[n,1].concat(o.call(arguments,1)))},w.throttle=function(n,t){var r,e,u,i,a=0,o=function(){a=new Date,u=null,i=n.apply(r,e)};return function(){var c=new Date,l=t-(c-a);return r=this,e=arguments,0>=l?(clearTimeout(u),u=null,a=c,i=n.apply(r,e)):u||(u=setTimeout(o,l)),i}},w.debounce=function(n,t,r){var e,u;return function(){var i=this,a=arguments,o=function(){e=null,r||(u=n.apply(i,a))},c=r&&!e;return clearTimeout(e),e=setTimeout(o,t),c&&(u=n.apply(i,a)),u}},w.once=function(n){var t,r=!1;return function(){return r?t:(r=!0,t=n.apply(this,arguments),n=null,t)}},w.wrap=function(n,t){return function(){var r=[n];return a.apply(r,arguments),t.apply(this,r)}},w.compose=function(){var n=arguments;return function(){for(var t=arguments,r=n.length-1;r>=0;r--)t=[n[r].apply(this,t)];return t[0]}},w.after=function(n,t){return 0>=n?t():function(){return 1>--n?t.apply(this,arguments):void 0}},w.keys=_||function(n){if(n!==Object(n))throw new TypeError("Invalid object");var t=[];for(var r in n)w.has(n,r)&&(t[t.length]=r);return t},w.values=function(n){var t=[];for(var r in n)w.has(n,r)&&t.push(n[r]);return t},w.pairs=function(n){var t=[];for(var r in n)w.has(n,r)&&t.push([r,n[r]]);return t},w.invert=function(n){var t={};for(var r in n)w.has(n,r)&&(t[n[r]]=r);return t},w.functions=w.methods=function(n){var t=[];for(var r in n)w.isFunction(n[r])&&t.push(r);return t.sort()},w.extend=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)n[r]=t[r]}),n},w.pick=function(n){var t={},r=c.apply(e,o.call(arguments,1));return A(r,function(r){r in n&&(t[r]=n[r])}),t},w.omit=function(n){var t={},r=c.apply(e,o.call(arguments,1));for(var u in n)w.contains(r,u)||(t[u]=n[u]);return t},w.defaults=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)null==n[r]&&(n[r]=t[r])}),n},w.clone=function(n){return w.isObject(n)?w.isArray(n)?n.slice():w.extend({},n):n},w.tap=function(n,t){return t(n),n};var I=function(n,t,r,e){if(n===t)return 0!==n||1/n==1/t;if(null==n||null==t)return n===t;n instanceof w&&(n=n._wrapped),t instanceof w&&(t=t._wrapped);var u=l.call(n);if(u!=l.call(t))return!1;switch(u){case"[object String]":return n==t+"";case"[object Number]":return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case"[object Date]":case"[object Boolean]":return+n==+t;case"[object RegExp]":return n.source==t.source&&n.global==t.global&&n.multiline==t.multiline&&n.ignoreCase==t.ignoreCase}if("object"!=typeof n||"object"!=typeof t)return!1;for(var i=r.length;i--;)if(r[i]==n)return e[i]==t;r.push(n),e.push(t);var a=0,o=!0;if("[object Array]"==u){if(a=n.length,o=a==t.length)for(;a--&&(o=I(n[a],t[a],r,e)););}else{var c=n.constructor,f=t.constructor;if(c!==f&&!(w.isFunction(c)&&c instanceof c&&w.isFunction(f)&&f instanceof f))return!1;for(var s in n)if(w.has(n,s)&&(a++,!(o=w.has(t,s)&&I(n[s],t[s],r,e))))break;if(o){for(s in t)if(w.has(t,s)&&!a--)break;o=!a}}return r.pop(),e.pop(),o};w.isEqual=function(n,t){return I(n,t,[],[])},w.isEmpty=function(n){if(null==n)return!0;if(w.isArray(n)||w.isString(n))return 0===n.length;for(var t in n)if(w.has(n,t))return!1;return!0},w.isElement=function(n){return!(!n||1!==n.nodeType)},w.isArray=x||function(n){return"[object Array]"==l.call(n)},w.isObject=function(n){return n===Object(n)},A(["Arguments","Function","String","Number","Date","RegExp"],function(n){w["is"+n]=function(t){return l.call(t)=="[object "+n+"]"}}),w.isArguments(arguments)||(w.isArguments=function(n){return!(!n||!w.has(n,"callee"))}),"function"!=typeof/./&&(w.isFunction=function(n){return"function"==typeof n}),w.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},w.isNaN=function(n){return w.isNumber(n)&&n!=+n},w.isBoolean=function(n){return n===!0||n===!1||"[object Boolean]"==l.call(n)},w.isNull=function(n){return null===n},w.isUndefined=function(n){return n===void 0},w.has=function(n,t){return f.call(n,t)},w.noConflict=function(){return n._=t,this},w.identity=function(n){return n},w.times=function(n,t,r){for(var e=Array(n),u=0;n>u;u++)e[u]=t.call(r,u);return e},w.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))};var M={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","/":"&#x2F;"}};M.unescape=w.invert(M.escape);var S={escape:RegExp("["+w.keys(M.escape).join("")+"]","g"),unescape:RegExp("("+w.keys(M.unescape).join("|")+")","g")};w.each(["escape","unescape"],function(n){w[n]=function(t){return null==t?"":(""+t).replace(S[n],function(t){return M[n][t]})}}),w.result=function(n,t){if(null==n)return null;var r=n[t];return w.isFunction(r)?r.call(n):r},w.mixin=function(n){A(w.functions(n),function(t){var r=w[t]=n[t];w.prototype[t]=function(){var n=[this._wrapped];return a.apply(n,arguments),D.call(this,r.apply(w,n))}})};var N=0;w.uniqueId=function(n){var t=++N+"";return n?n+t:t},w.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var T=/(.)^/,q={"'":"'","\\":"\\","\r":"r","\n":"n","	":"t","\u2028":"u2028","\u2029":"u2029"},B=/\\|'|\r|\n|\t|\u2028|\u2029/g;w.template=function(n,t,r){var e;r=w.defaults({},r,w.templateSettings);var u=RegExp([(r.escape||T).source,(r.interpolate||T).source,(r.evaluate||T).source].join("|")+"|$","g"),i=0,a="__p+='";n.replace(u,function(t,r,e,u,o){return a+=n.slice(i,o).replace(B,function(n){return"\\"+q[n]}),r&&(a+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'"),e&&(a+="'+\n((__t=("+e+"))==null?'':__t)+\n'"),u&&(a+="';\n"+u+"\n__p+='"),i=o+t.length,t}),a+="';\n",r.variable||(a="with(obj||{}){\n"+a+"}\n"),a="var __t,__p='',__j=Array.prototype.join,"+"print=function(){__p+=__j.call(arguments,'');};\n"+a+"return __p;\n";try{e=Function(r.variable||"obj","_",a)}catch(o){throw o.source=a,o}if(t)return e(t,w);var c=function(n){return e.call(this,n,w)};return c.source="function("+(r.variable||"obj")+"){\n"+a+"}",c},w.chain=function(n){return w(n).chain()};var D=function(n){return this._chain?w(n).chain():n};w.mixin(w),A(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=e[n];w.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!=n&&"splice"!=n||0!==r.length||delete r[0],D.call(this,r)}}),A(["concat","join","slice"],function(n){var t=e[n];w.prototype[n]=function(){return D.call(this,t.apply(this._wrapped,arguments))}}),w.extend(w.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}})}).call(this);
// /Users/michaelmartinez/webviewer/Content/js/json2.min.js
var JSON;JSON||(JSON={}),(function(){"use strict";function i(n){return n<10?"0"+n:n}function f(n){return o.lastIndex=0,o.test(n)?'"'+n.replace(o,function(n){var t=s[n];return typeof t=="string"?t:"\\u"+("0000"+n.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+n+'"'}function r(i,e){var h,l,c,a,v=n,s,o=e[i];o&&typeof o=="object"&&typeof o.toJSON=="function"&&(o=o.toJSON(i)),typeof t=="function"&&(o=t.call(e,i,o));switch(typeof o){case"string":return f(o);case"number":return isFinite(o)?String(o):"null";case"boolean":case"null":return String(o);case"object":if(!o)return"null";n+=u,s=[];if(Object.prototype.toString.apply(o)==="[object Array]"){for(a=o.length,h=0;h<a;h+=1)s[h]=r(h,o)||"null";return c=s.length===0?"[]":n?"[\n"+n+s.join(",\n"+n)+"\n"+v+"]":"["+s.join(",")+"]",n=v,c}if(t&&typeof t=="object")for(a=t.length,h=0;h<a;h+=1)typeof t[h]=="string"&&(l=t[h],c=r(l,o),c&&s.push(f(l)+(n?": ":":")+c));else for(l in o)Object.prototype.hasOwnProperty.call(o,l)&&(c=r(l,o),c&&s.push(f(l)+(n?": ":":")+c));return c=s.length===0?"{}":n?"{\n"+n+s.join(",\n"+n)+"\n"+v+"}":"{"+s.join(",")+"}",n=v,c}}typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+i(this.getUTCMonth()+1)+"-"+i(this.getUTCDate())+"T"+i(this.getUTCHours())+":"+i(this.getUTCMinutes())+":"+i(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(){return this.valueOf()});var e=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,o=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,n,u,s={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},t;typeof JSON.stringify!="function"&&(JSON.stringify=function(i,f,e){var o;n="",u="";if(typeof e=="number")for(o=0;o<e;o+=1)u+=" ";else typeof e=="string"&&(u=e);t=f;if(f&&typeof f!="function"&&(typeof f!="object"||typeof f.length!="number"))throw new Error("JSON.stringify");return r("",{"":i})}),typeof JSON.parse!="function"&&(JSON.parse=function(n,t){function r(n,i){var f,e,u=n[i];if(u&&typeof u=="object")for(f in u)Object.prototype.hasOwnProperty.call(u,f)&&(e=r(u,f),e!==undefined?u[f]=e:delete u[f]);return t.call(n,i,u)}var i;n=String(n),e.lastIndex=0,e.test(n)&&(n=n.replace(e,function(n){return"\\u"+("0000"+n.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(n.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return i=eval("("+n+")"),typeof t=="function"?r({"":i},""):i;throw new SyntaxError("JSON.parse");})})();

// /Users/michaelmartinez/webviewer/Content/js/recorderjs/recorder.js
/* 
 * License (MIT)
 *
 * Copyright © 2013 Matt Diamond
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
 * and associated documentation files (the "Software"), to deal in the Software without 
 * restriction, including without limitation the rights to use, copy, modify, merge, publish, 
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING 
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
(function(window){

  var WORKER_PATH = 'recorderWorker.js';

  var Recorder = function(source, cfg){
    var config = cfg || {};
    var bufferLen = config.bufferLen || 4096;
    this.context = source.context;
    this.node = (this.context.createScriptProcessor ||
                 this.context.createJavaScriptNode).call(this.context,
                                                         bufferLen, 2, 2);
    var worker = new Worker(config.workerPath || WORKER_PATH);
    worker.postMessage({
      command: 'init',
      config: {
        sampleRate: this.context.sampleRate
      }
    });
    var recording = false,
      currCallback;

    this.node.onaudioprocess = function(e){
      if (!recording) return;
      worker.postMessage({
        command: 'record',
        buffer: [
          e.inputBuffer.getChannelData(0),
          e.inputBuffer.getChannelData(1)
        ]
      });
    }

    this.configure = function(cfg){
      for (var prop in cfg){
        if (cfg.hasOwnProperty(prop)){
          config[prop] = cfg[prop];
        }
      }
    }

    this.record = function(){
      recording = true;
    }

    this.stop = function(){
      recording = false;
    }

    this.clear = function(){
      worker.postMessage({ command: 'clear' });
    }

    this.getBuffer = function(cb) {
      currCallback = cb || config.callback;
      worker.postMessage({ command: 'getBuffer' })
    }

    this.exportWAV = function(cb, type){
      currCallback = cb || config.callback;
      type = type || config.type || 'audio/wav';
      if (!currCallback) throw new Error('Callback not set');
      worker.postMessage({
        command: 'exportWAV',
        type: type
      });
    }

    worker.onmessage = function(e){
      var blob = e.data;
      currCallback(blob);
    }

    source.connect(this.node);
    this.node.connect(this.context.destination);    //this should not be necessary
  };

  Recorder.forceDownload = function(blob, filename){
    var url = (window.URL || window.webkitURL).createObjectURL(blob);
    var link = window.document.createElement('a');
    link.href = url;
    link.download = filename || 'output.wav';
    var click = document.createEvent("Event");
    click.initEvent("click", true, true);
    link.dispatchEvent(click);
  }

  window.Recorder = Recorder;

})(window);

// /Users/michaelmartinez/webviewer/Content/js/hammer.js
/*! Hammer.JS - v2.0.4 - 2014-09-28
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2014 Jorik Tangelder;
 * Licensed under the MIT license */
(function(window, document, exportName, undefined) {
    'use strict';

    var VENDOR_PREFIXES = ['', 'webkit', 'moz', 'MS', 'ms', 'o'];
    var TEST_ELEMENT = document.createElement('div');

    var TYPE_FUNCTION = 'function';

    var round = Math.round;
    var abs = Math.abs;
    var now = Date.now;

    /**
     * set a timeout with a given scope
     * @param {Function} fn
     * @param {Number} timeout
     * @param {Object} context
     * @returns {number}
     */
    function setTimeoutContext(fn, timeout, context) {
        return setTimeout(bindFn(fn, context), timeout);
    }

    /**
     * if the argument is an array, we want to execute the fn on each entry
     * if it aint an array we don't want to do a thing.
     * this is used by all the methods that accept a single and array argument.
     * @param {*|Array} arg
     * @param {String} fn
     * @param {Object} [context]
     * @returns {Boolean}
     */
    function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
        }
        return false;
    }

    /**
     * walk objects and arrays
     * @param {Object} obj
     * @param {Function} iterator
     * @param {Object} context
     */
    function each(obj, iterator, context) {
        var i;

        if (!obj) {
            return;
        }

        if (obj.forEach) {
            obj.forEach(iterator, context);
        } else if (obj.length !== undefined) {
            i = 0;
            while (i < obj.length) {
                iterator.call(context, obj[i], i, obj);
                i++;
            }
        } else {
            for (i in obj) {
                obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
            }
        }
    }

    /**
     * extend object.
     * means that properties in dest will be overwritten by the ones in src.
     * @param {Object} dest
     * @param {Object} src
     * @param {Boolean} [merge]
     * @returns {Object} dest
     */
    function extend(dest, src, merge) {
        var keys = Object.keys(src);
        var i = 0;
        while (i < keys.length) {
            if (!merge || (merge && dest[keys[i]] === undefined)) {
                dest[keys[i]] = src[keys[i]];
            }
            i++;
        }
        return dest;
    }

    /**
     * merge the values from src in the dest.
     * means that properties that exist in dest will not be overwritten by src
     * @param {Object} dest
     * @param {Object} src
     * @returns {Object} dest
     */
    function merge(dest, src) {
        return extend(dest, src, true);
    }

    /**
     * simple class inheritance
     * @param {Function} child
     * @param {Function} base
     * @param {Object} [properties]
     */
    function inherit(child, base, properties) {
        var baseP = base.prototype,
            childP;

        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;

        if (properties) {
            extend(childP, properties);
        }
    }

    /**
     * simple function bind
     * @param {Function} fn
     * @param {Object} context
     * @returns {Function}
     */
    function bindFn(fn, context) {
        return function boundFn() {
            return fn.apply(context, arguments);
        };
    }

    /**
     * let a boolean value also be a function that must return a boolean
     * this first item in args will be used as the context
     * @param {Boolean|Function} val
     * @param {Array} [args]
     * @returns {Boolean}
     */
    function boolOrFn(val, args) {
        if (typeof val == TYPE_FUNCTION) {
            return val.apply(args ? args[0] || undefined : undefined, args);
        }
        return val;
    }

    /**
     * use the val2 when val1 is undefined
     * @param {*} val1
     * @param {*} val2
     * @returns {*}
     */
    function ifUndefined(val1, val2) {
        return (val1 === undefined) ? val2 : val1;
    }

    /**
     * addEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */
    function addEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.addEventListener(type, handler, false);
        });
    }

    /**
     * removeEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */
    function removeEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.removeEventListener(type, handler, false);
        });
    }

    /**
     * find if a node is in the given parent
     * @method hasParent
     * @param {HTMLElement} node
     * @param {HTMLElement} parent
     * @return {Boolean} found
     */
    function hasParent(node, parent) {
        while (node) {
            if (node == parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    }

    /**
     * small indexOf wrapper
     * @param {String} str
     * @param {String} find
     * @returns {Boolean} found
     */
    function inStr(str, find) {
        return str.indexOf(find) > -1;
    }

    /**
     * split string on whitespace
     * @param {String} str
     * @returns {Array} words
     */
    function splitStr(str) {
        return str.trim().split(/\s+/g);
    }

    /**
     * find if a array contains the object using indexOf or a simple polyFill
     * @param {Array} src
     * @param {String} find
     * @param {String} [findByKey]
     * @return {Boolean|Number} false when not found, or the index
     */
    function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) {
            return src.indexOf(find);
        } else {
            var i = 0;
            while (i < src.length) {
                if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
                    return i;
                }
                i++;
            }
            return -1;
        }
    }

    /**
     * convert array-like objects to real arrays
     * @param {Object} obj
     * @returns {Array}
     */
    function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
    }

    /**
     * unique array with objects based on a key (like 'id') or just by the array's value
     * @param {Array} src [{id:1},{id:2},{id:1}]
     * @param {String} [key]
     * @param {Boolean} [sort=False]
     * @returns {Array} [{id:1},{id:2}]
     */
    function uniqueArray(src, key, sort) {
        var results = [];
        var values = [];
        var i = 0;

        while (i < src.length) {
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) {
                results.push(src[i]);
            }
            values[i] = val;
            i++;
        }

        if (sort) {
            if (!key) {
                results = results.sort();
            } else {
                results = results.sort(function sortUniqueArray(a, b) {
                    return a[key] > b[key];
                });
            }
        }

        return results;
    }

    /**
     * get the prefixed property
     * @param {Object} obj
     * @param {String} property
     * @returns {String|Undefined} prefixed
     */
    function prefixed(obj, property) {
        var prefix, prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);

        var i = 0;
        while (i < VENDOR_PREFIXES.length) {
            prefix = VENDOR_PREFIXES[i];
            prop = (prefix) ? prefix + camelProp : property;

            if (prop in obj) {
                return prop;
            }
            i++;
        }
        return undefined;
    }

    /**
     * get a unique id
     * @returns {number} uniqueId
     */
    var _uniqueId = 1;
    function uniqueId() {
        return _uniqueId++;
    }

    /**
     * get the window object of an element
     * @param {HTMLElement} element
     * @returns {DocumentView|Window}
     */
    function getWindowForElement(element) {
        var doc = element.ownerDocument;
        return (doc.defaultView || doc.parentWindow);
    }

    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

    var SUPPORT_TOUCH = ('ontouchstart' in window);
    var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

    var INPUT_TYPE_TOUCH = 'touch';
    var INPUT_TYPE_PEN = 'pen';
    var INPUT_TYPE_MOUSE = 'mouse';
    var INPUT_TYPE_KINECT = 'kinect';

    var COMPUTE_INTERVAL = 25;

    var INPUT_START = 1;
    var INPUT_MOVE = 2;
    var INPUT_END = 4;
    var INPUT_CANCEL = 8;

    var DIRECTION_NONE = 1;
    var DIRECTION_LEFT = 2;
    var DIRECTION_RIGHT = 4;
    var DIRECTION_UP = 8;
    var DIRECTION_DOWN = 16;

    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

    var PROPS_XY = ['x', 'y'];
    var PROPS_CLIENT_XY = ['clientX', 'clientY'];

    /**
     * create new input type manager
     * @param {Manager} manager
     * @param {Function} callback
     * @returns {Input}
     * @constructor
     */
    function Input(manager, callback) {
        var self = this;
        this.manager = manager;
        this.callback = callback;
        this.element = manager.element;
        this.target = manager.options.inputTarget;

        // smaller wrapper around the handler, for the scope and the enabled state of the manager,
        // so when disabled the input events are completely bypassed.
        this.domHandler = function(ev) {
            if (boolOrFn(manager.options.enable, [manager])) {
                self.handler(ev);
            }
        };

        this.init();

    }

    Input.prototype = {
        /**
         * should handle the inputEvent data and trigger the callback
         * @virtual
         */
        handler: function() { },

        /**
         * bind the events
         */
        init: function() {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        },

        /**
         * unbind the events
         */
        destroy: function() {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        }
    };

    /**
     * create new input type manager
     * called by the Manager constructor
     * @param {Hammer} manager
     * @returns {Input}
     */
    function createInputInstance(manager) {
        var Type;
        var inputClass = manager.options.inputClass;

        if (inputClass) {
            Type = inputClass;
        } else if (SUPPORT_POINTER_EVENTS) {
            Type = PointerEventInput;
        } else if (SUPPORT_ONLY_TOUCH) {
            Type = TouchInput;
        } else if (!SUPPORT_TOUCH) {
            Type = MouseInput;
        } else {
            Type = TouchMouseInput;
        }
        return new (Type)(manager, inputHandler);
    }

    /**
     * handle input events
     * @param {Manager} manager
     * @param {String} eventType
     * @param {Object} input
     */
    function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
        var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;

        if (isFirst) {
            manager.session = {};
        }

        // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'
        input.eventType = eventType;

        // compute scale, rotation etc
        computeInputData(manager, input);

        // emit secret event
        manager.emit('hammer.input', input);

        manager.recognize(input);
        manager.session.prevInput = input;
    }

    /**
     * extend the data with some usable properties like scale, rotate, velocity etc
     * @param {Object} manager
     * @param {Object} input
     */
    function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length;

        // store the first input to calculate the distance and direction
        if (!session.firstInput) {
            session.firstInput = simpleCloneInputData(input);
        }

        // to compute scale and rotation we need to store the multiple touches
        if (pointersLength > 1 && !session.firstMultiple) {
            session.firstMultiple = simpleCloneInputData(input);
        } else if (pointersLength === 1) {
            session.firstMultiple = false;
        }

        var firstInput = session.firstInput;
        var firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

        var center = input.center = getCenter(pointers);
        input.timeStamp = now();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;

        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);

        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);

        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

        computeIntervalInputData(session, input);

        // find the correct target
        var target = manager.element;
        if (hasParent(input.srcEvent.target, target)) {
            target = input.srcEvent.target;
        }
        input.target = target;
    }

    function computeDeltaXY(session, input) {
        var center = input.center;
        var offset = session.offsetDelta || {};
        var prevDelta = session.prevDelta || {};
        var prevInput = session.prevInput || {};

        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
                x: prevInput.deltaX || 0,
                y: prevInput.deltaY || 0
            };

            offset = session.offsetDelta = {
                x: center.x,
                y: center.y
            };
        }

        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
    }

    /**
     * velocity is calculated every x ms
     * @param {Object} session
     * @param {Object} input
     */
    function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input,
            deltaTime = input.timeStamp - last.timeStamp,
            velocity, velocityX, velocityY, direction;

        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = last.deltaX - input.deltaX;
            var deltaY = last.deltaY - input.deltaY;

            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);

            session.lastInterval = input;
        } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
        }

        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
    }

    /**
     * create a simple clone from the input used for storage of firstInput and firstMultiple
     * @param {Object} input
     * @returns {Object} clonedInputData
     */
    function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;
        while (i < input.pointers.length) {
            pointers[i] = {
                clientX: round(input.pointers[i].clientX),
                clientY: round(input.pointers[i].clientY)
            };
            i++;
        }

        return {
            timeStamp: now(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
        };
    }

    /**
     * get the center of all the pointers
     * @param {Array} pointers
     * @return {Object} center contains `x` and `y` properties
     */
    function getCenter(pointers) {
        var pointersLength = pointers.length;

        // no need to loop when only one touch
        if (pointersLength === 1) {
            return {
                x: round(pointers[0].clientX),
                y: round(pointers[0].clientY)
            };
        }

        var x = 0, y = 0, i = 0;
        while (i < pointersLength) {
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
        }

        return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
        };
    }

    /**
     * calculate the velocity between two points. unit is in px per ms.
     * @param {Number} deltaTime
     * @param {Number} x
     * @param {Number} y
     * @return {Object} velocity `x` and `y`
     */
    function getVelocity(deltaTime, x, y) {
        return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
        };
    }

    /**
     * get the direction between two points
     * @param {Number} x
     * @param {Number} y
     * @return {Number} direction
     */
    function getDirection(x, y) {
        if (x === y) {
            return DIRECTION_NONE;
        }

        if (abs(x) >= abs(y)) {
            return x > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        }
        return y > 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }

    /**
     * calculate the absolute distance between two points
     * @param {Object} p1 {x, y}
     * @param {Object} p2 {x, y}
     * @param {Array} [props] containing x and y keys
     * @return {Number} distance
     */
    function getDistance(p1, p2, props) {
        if (!props) {
            props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];

        return Math.sqrt((x * x) + (y * y));
    }

    /**
     * calculate the angle between two coordinates
     * @param {Object} p1
     * @param {Object} p2
     * @param {Array} [props] containing x and y keys
     * @return {Number} angle
     */
    function getAngle(p1, p2, props) {
        if (!props) {
            props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
    }

    /**
     * calculate the rotation degrees between two pointersets
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} rotation
     */
    function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) - getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }

    /**
     * calculate the scale factor between two pointersets
     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} scale
     */
    function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }

    var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
    };

    var MOUSE_ELEMENT_EVENTS = 'mousedown';
    var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

    /**
     * Mouse events input
     * @constructor
     * @extends Input
     */
    function MouseInput() {
        this.evEl = MOUSE_ELEMENT_EVENTS;
        this.evWin = MOUSE_WINDOW_EVENTS;

        this.allow = true; // used by Input.TouchMouse to disable mouse events
        this.pressed = false; // mousedown state

        Input.apply(this, arguments);
    }

    inherit(MouseInput, Input, {
        /**
         * handle mouse events
         * @param {Object} ev
         */
        handler: function MEhandler(ev) {

            function detectLeftButton(event) {
                if ('buttons' in event) {
                    if ('which' in event) {
                        if(event.buttons === 0 && event.which === 1){
                            return event.which === 1;
                        }
                    }
                    return event.buttons === 1;
                } else if ('which' in event) {
                    return event.which === 1;
                } else {
                    return event.button === 1;
                }
            }
            
            var e = window.event || ev; 
            var button = detectLeftButton(e) == true ? 0 : 1;

            var eventType = MOUSE_INPUT_MAP[ev.type];

            if (eventType & INPUT_START) {
                //firefox sends button 0 for mousemove, so store it here
                if(this.pressed === false) this.button = button;
                this.pressed = true;
            }

            if (eventType & INPUT_MOVE && ev.which === 0) {
                eventType = INPUT_END;
            }

            // mouse must be down
            if (!this.pressed) {
                return;
            }

            if (eventType & INPUT_END) {
                this.pressed = false;
                this.button = false;
            }

            this.callback(this.manager, eventType, {
                button: button,
                pointers: [ev],
                changedPointers: [ev],
                pointerType: INPUT_TYPE_MOUSE,
                srcEvent: ev
            });
        }
    });

    var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
    };

// in IE10 the pointer types is defined as an enum
    var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
    };

    var POINTER_ELEMENT_EVENTS = 'pointerdown';
    var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

// IE10 has prefixed support, and case-sensitive
    if (window.MSPointerEvent) {
        POINTER_ELEMENT_EVENTS = 'MSPointerDown';
        POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
    }

    /**
     * Pointer events input
     * @constructor
     * @extends Input
     */
    function PointerEventInput() {
        this.evEl = POINTER_ELEMENT_EVENTS;
        this.evWin = POINTER_WINDOW_EVENTS;

        Input.apply(this, arguments);

        this.store = (this.manager.session.pointerEvents = []);
    }

    inherit(PointerEventInput, Input, {
        /**
         * handle mouse events
         * @param {Object} ev
         */
        handler: function PEhandler(ev) {
            var store = this.store;
            var removePointer = false;
            
            function detectLeftButton(event) {
                if ('buttons' in event) {
                    if ('which' in event) {
                        if(event.buttons === 0 && event.which === 1){
                            return event.which === 1;
                        }
                    }
                    return event.buttons === 1;
                } else if ('which' in event) {
                    return event.which === 1;
                } else {
                    return event.button === 1;
                }
            }

            var e = window.event || ev;
            var button = detectLeftButton(e) == true ? 0 : 1;

            var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

            var isTouch = (pointerType == INPUT_TYPE_TOUCH);

            // get index of the event in the store
            var storeIndex = inArray(store, ev.pointerId, 'pointerId');

            // start and mouse must be down
            if (eventType & INPUT_START && (ev.button === 0 || ev.button === 1 || ev.button === 2 || isTouch)) {
                if (storeIndex < 0) {
                    store.push(ev);
                    storeIndex = store.length - 1;
                }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
                removePointer = true;
            }

            // it not found, so the pointer hasn't been down (so it's probably a hover)
            if (storeIndex < 0) {
                return;
            }

            // update the event in the store
            store[storeIndex] = ev;

            this.callback(this.manager, eventType, {
                button: button,
                pointers: store,
                changedPointers: [ev],
                pointerType: pointerType,
                srcEvent: ev
            });

            if (removePointer) {
                // remove from the store
                store.splice(storeIndex, 1);
            }
        }
    });

    var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };

    var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
    var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

    /**
     * Touch events input
     * @constructor
     * @extends Input
     */
    function SingleTouchInput() {
        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
        this.started = false;

        Input.apply(this, arguments);
    }

    inherit(SingleTouchInput, Input, {
        handler: function TEhandler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

            // should we handle the touch events?
            if (type === INPUT_START) {
                this.started = true;
            }

            if (!this.started) {
                return;
            }

            var touches = normalizeSingleTouches.call(this, ev, type);

            // when done, reset the started state
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
                this.started = false;
            }

            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });

    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */
    function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);

        if (type & (INPUT_END | INPUT_CANCEL)) {
            all = uniqueArray(all.concat(changed), 'identifier', true);
        }

        return [all, changed];
    }

    var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };

    var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

    /**
     * Multi-user touch events input
     * @constructor
     * @extends Input
     */
    function TouchInput() {
        this.evTarget = TOUCH_TARGET_EVENTS;
        this.targetIds = {};

        Input.apply(this, arguments);
    }

    inherit(TouchInput, Input, {
        handler: function MTEhandler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) {
                return;
            }

            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });

    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */
    function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds;

        // when there is only one touch, the process can be simplified
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [allTouches, allTouches];
        }

        var i,
            targetTouches,
            changedTouches = toArray(ev.changedTouches),
            changedTargetTouches = [],
            target = this.target;

        // get target touches from touches
        targetTouches = allTouches.filter(function(touch) {
            return hasParent(touch.target, target);
        });

        // collect touches
        if (type === INPUT_START) {
            i = 0;
            while (i < targetTouches.length) {
                targetIds[targetTouches[i].identifier] = true;
                i++;
            }
        }

        // filter changed touches to only contain touches that exist in the collected target ids
        i = 0;
        while (i < changedTouches.length) {
            if (targetIds[changedTouches[i].identifier]) {
                changedTargetTouches.push(changedTouches[i]);
            }

            // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) {
                delete targetIds[changedTouches[i].identifier];
            }
            i++;
        }

        if (!changedTargetTouches.length) {
            return;
        }

        return [
            // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
            uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
            changedTargetTouches
        ];
    }

    /**
     * Combined touch and mouse input
     *
     * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
     * This because touch devices also emit mouse events while doing a touch.
     *
     * @constructor
     * @extends Input
     */
    function TouchMouseInput() {
        Input.apply(this, arguments);

        var handler = bindFn(this.handler, this);
        this.touch = new TouchInput(this.manager, handler);
        this.mouse = new MouseInput(this.manager, handler);
    }

    inherit(TouchMouseInput, Input, {
        /**
         * handle mouse and touch events
         * @param {Hammer} manager
         * @param {String} inputEvent
         * @param {Object} inputData
         */
        handler: function TMEhandler(manager, inputEvent, inputData) {
            var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
                isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

            // when we're in a touch event, so  block all upcoming mouse events
            // most mobile browser also emit mouseevents, right after touchstart
            if (isTouch) {
                this.mouse.allow = false;
            } else if (isMouse && !this.mouse.allow) {
                return;
            }

            // reset the allowMouse when we're done
            if (inputEvent & (INPUT_END | INPUT_CANCEL)) {
                this.mouse.allow = true;
            }

            this.callback(manager, inputEvent, inputData);
        },

        /**
         * remove the event listeners
         */
        destroy: function destroy() {
            this.touch.destroy();
            this.mouse.destroy();
        }
    });

    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

// magical touchAction value
    var TOUCH_ACTION_COMPUTE = 'compute';
    var TOUCH_ACTION_AUTO = 'auto';
    var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
    var TOUCH_ACTION_NONE = 'none';
    var TOUCH_ACTION_PAN_X = 'pan-x';
    var TOUCH_ACTION_PAN_Y = 'pan-y';

    /**
     * Touch Action
     * sets the touchAction property or uses the js alternative
     * @param {Manager} manager
     * @param {String} value
     * @constructor
     */
    function TouchAction(manager, value) {
        this.manager = manager;
        this.set(value);
    }

    TouchAction.prototype = {
        /**
         * set the touchAction value on the element or enable the polyfill
         * @param {String} value
         */
        set: function(value) {
            // find out the touch-action by the event handlers
            if (value == TOUCH_ACTION_COMPUTE) {
                value = this.compute();
            }

            if (NATIVE_TOUCH_ACTION) {
                this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            }
            this.actions = value.toLowerCase().trim();
        },

        /**
         * just re-set the touchAction value
         */
        update: function() {
            this.set(this.manager.options.touchAction);
        },

        /**
         * compute the value for the touchAction property based on the recognizer's settings
         * @returns {String} value
         */
        compute: function() {
            var actions = [];
            each(this.manager.recognizers, function(recognizer) {
                if (boolOrFn(recognizer.options.enable, [recognizer])) {
                    actions = actions.concat(recognizer.getTouchAction());
                }
            });
            return cleanTouchActions(actions.join(' '));
        },

        /**
         * this method is called on each input cycle and provides the preventing of the browser behavior
         * @param {Object} input
         */
        preventDefaults: function(input) {
            // not needed with native support for the touchAction property
            if (NATIVE_TOUCH_ACTION) {
                return;
            }

            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection;

            // if the touch action did prevented once this session
            if (this.manager.session.prevented) {
                srcEvent.preventDefault();
                return;
            }

            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE);
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);

            if (hasNone ||
                (hasPanY && direction & DIRECTION_HORIZONTAL) ||
                (hasPanX && direction & DIRECTION_VERTICAL)) {
                return this.preventSrc(srcEvent);
            }
        },

        /**
         * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
         * @param {Object} srcEvent
         */
        preventSrc: function(srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
        }
    };

    /**
     * when the touchActions are collected they are not a valid value, so we need to clean things up. *
     * @param {String} actions
     * @returns {*}
     */
    function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) {
            return TOUCH_ACTION_NONE;
        }

        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

        // pan-x and pan-y can be combined
        if (hasPanX && hasPanY) {
            return TOUCH_ACTION_PAN_X + ' ' + TOUCH_ACTION_PAN_Y;
        }

        // pan-x OR pan-y
        if (hasPanX || hasPanY) {
            return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
        }

        // manipulation
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
            return TOUCH_ACTION_MANIPULATION;
        }

        return TOUCH_ACTION_AUTO;
    }

    /**
     * Recognizer flow explained; *
     * All recognizers have the initial state of POSSIBLE when a input session starts.
     * The definition of a input session is from the first input until the last input, with all it's movement in it. *
     * Example session for mouse-input: mousedown -> mousemove -> mouseup
     *
     * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
     * which determines with state it should be.
     *
     * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
     * POSSIBLE to give it another change on the next cycle.
     *
     *               Possible
     *                  |
     *            +-----+---------------+
     *            |                     |
     *      +-----+-----+               |
     *      |           |               |
     *   Failed      Cancelled          |
     *                          +-------+------+
     *                          |              |
     *                      Recognized       Began
     *                                         |
     *                                      Changed
     *                                         |
     *                                  Ended/Recognized
     */
    var STATE_POSSIBLE = 1;
    var STATE_BEGAN = 2;
    var STATE_CHANGED = 4;
    var STATE_ENDED = 8;
    var STATE_RECOGNIZED = STATE_ENDED;
    var STATE_CANCELLED = 16;
    var STATE_FAILED = 32;

    /**
     * Recognizer
     * Every recognizer needs to extend from this class.
     * @constructor
     * @param {Object} options
     */
    function Recognizer(options) {
        this.id = uniqueId();

        this.manager = null;
        this.options = merge(options || {}, this.defaults);

        // default is enable true
        this.options.enable = ifUndefined(this.options.enable, true);

        this.state = STATE_POSSIBLE;

        this.simultaneous = {};
        this.requireFail = [];
    }

    Recognizer.prototype = {
        /**
         * @virtual
         * @type {Object}
         */
        defaults: {},

        /**
         * set options
         * @param {Object} options
         * @return {Recognizer}
         */
        set: function(options) {
            extend(this.options, options);

            // also update the touchAction, in case something changed about the directions/enabled state
            this.manager && this.manager.touchAction.update();
            return this;
        },

        /**
         * recognize simultaneous with an other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        recognizeWith: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
                return this;
            }

            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
                simultaneous[otherRecognizer.id] = otherRecognizer;
                otherRecognizer.recognizeWith(this);
            }
            return this;
        },

        /**
         * drop the simultaneous link. it doesnt remove the link on the other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        dropRecognizeWith: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
                return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
        },

        /**
         * recognizer can only run when an other is failing
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        requireFailure: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
                return this;
            }

            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
                requireFail.push(otherRecognizer);
                otherRecognizer.requireFailure(this);
            }
            return this;
        },

        /**
         * drop the requireFailure link. it does not remove the link on the other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        dropRequireFailure: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
                return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);
            if (index > -1) {
                this.requireFail.splice(index, 1);
            }
            return this;
        },

        /**
         * has require failures boolean
         * @returns {boolean}
         */
        hasRequireFailures: function() {
            return this.requireFail.length > 0;
        },

        /**
         * if the recognizer can recognize simultaneous with an other recognizer
         * @param {Recognizer} otherRecognizer
         * @returns {Boolean}
         */
        canRecognizeWith: function(otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
        },

        /**
         * You should use `tryEmit` instead of `emit` directly to check
         * that all the needed recognizers has failed before emitting.
         * @param {Object} input
         */
        emit: function(input) {
            var self = this;
            var state = this.state;

            function emit(withState) {
                self.manager.emit(self.options.event + (withState ? stateStr(state) : ''), input);
            }

            // 'panstart' and 'panmove'
            if (state < STATE_ENDED) {
                emit(true);
            }

            emit(); // simple 'eventName' events

            // panend and pancancel
            if (state >= STATE_ENDED) {
                emit(true);
            }
        },

        /**
         * Check that all the require failure recognizers has failed,
         * if true, it emits a gesture event,
         * otherwise, setup the state to FAILED.
         * @param {Object} input
         */
        tryEmit: function(input) {
            if (this.canEmit()) {
                return this.emit(input);
            }
            // it's failing anyway
            this.state = STATE_FAILED;
        },

        /**
         * can we emit?
         * @returns {boolean}
         */
        canEmit: function() {
            var i = 0;
            while (i < this.requireFail.length) {
                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                    return false;
                }
                i++;
            }
            return true;
        },

        /**
         * update the recognizer
         * @param {Object} inputData
         */
        recognize: function(inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = extend({}, inputData);

            // is is enabled and allow recognizing?
            if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
                this.reset();
                this.state = STATE_FAILED;
                return;
            }

            // reset when we've reached the end
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
                this.state = STATE_POSSIBLE;
            }

            this.state = this.process(inputDataClone);

            // the recognizer has recognized a gesture
            // so trigger an event
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
                this.tryEmit(inputDataClone);
            }
        },

        /**
         * return the state of the recognizer
         * the actual recognizing happens in this method
         * @virtual
         * @param {Object} inputData
         * @returns {Const} STATE
         */
        process: function(inputData) { }, // jshint ignore:line

        /**
         * return the preferred touch-action
         * @virtual
         * @returns {Array}
         */
        getTouchAction: function() { },

        /**
         * called when the gesture isn't allowed to recognize
         * like when another is being recognized or it is disabled
         * @virtual
         */
        reset: function() { }
    };

    /**
     * get a usable string, used as event postfix
     * @param {Const} state
     * @returns {String} state
     */
    function stateStr(state) {
        if (state & STATE_CANCELLED) {
            return 'cancel';
        } else if (state & STATE_ENDED) {
            return 'end';
        } else if (state & STATE_CHANGED) {
            return 'move';
        } else if (state & STATE_BEGAN) {
            return 'start';
        }
        return '';
    }

    /**
     * direction cons to string
     * @param {Const} direction
     * @returns {String}
     */
    function directionStr(direction) {
        if (direction == DIRECTION_DOWN) {
            return 'down';
        } else if (direction == DIRECTION_UP) {
            return 'up';
        } else if (direction == DIRECTION_LEFT) {
            return 'left';
        } else if (direction == DIRECTION_RIGHT) {
            return 'right';
        }
        return '';
    }

    /**
     * get a recognizer by name if it is bound to a manager
     * @param {Recognizer|String} otherRecognizer
     * @param {Recognizer} recognizer
     * @returns {Recognizer}
     */
    function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) {
            return manager.get(otherRecognizer);
        }
        return otherRecognizer;
    }

    /**
     * This recognizer is just used as a base for the simple attribute recognizers.
     * @constructor
     * @extends Recognizer
     */
    function AttrRecognizer() {
        Recognizer.apply(this, arguments);
    }

    inherit(AttrRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof AttrRecognizer
         */
        defaults: {
            /**
             * @type {Number}
             * @default 1
             */
            pointers: 1
        },

        /**
         * Used to check if it the recognizer receives valid input, like input.distance > 10.
         * @memberof AttrRecognizer
         * @param {Object} input
         * @returns {Boolean} recognized
         */
        attrTest: function(input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
        },

        /**
         * Process the input and return the state for the recognizer
         * @memberof AttrRecognizer
         * @param {Object} input
         * @returns {*} State
         */
        process: function(input) {
            var state = this.state;
            var eventType = input.eventType;

            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input);

            // on cancel input and we've recognized before, return STATE_CANCELLED
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
                return state | STATE_CANCELLED;
            } else if (isRecognized || isValid) {
                if (eventType & INPUT_END) {
                    return state | STATE_ENDED;
                } else if (!(state & STATE_BEGAN)) {
                    return STATE_BEGAN;
                }
                return state | STATE_CHANGED;
            }
            return STATE_FAILED;
        }
    });

    /**
     * Pan
     * Recognized when the pointer is down and moved in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */
    function PanRecognizer() {
        AttrRecognizer.apply(this, arguments);

        this.pX = null;
        this.pY = null;
    }

    inherit(PanRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof PanRecognizer
         */
        defaults: {
            event: 'pan',
            threshold: 10,
            pointers: 1,
            direction: DIRECTION_ALL
        },

        getTouchAction: function() {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL) {
                actions.push(TOUCH_ACTION_PAN_Y);
            }
            if (direction & DIRECTION_VERTICAL) {
                actions.push(TOUCH_ACTION_PAN_X);
            }
            return actions;
        },

        directionTest: function(input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY;

            // lock to axis?
            if (!(direction & options.direction)) {
                if (options.direction & DIRECTION_HORIZONTAL) {
                    direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
                    hasMoved = x != this.pX;
                    distance = Math.abs(input.deltaX);
                } else {
                    direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
                    hasMoved = y != this.pY;
                    distance = Math.abs(input.deltaY);
                }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
        },

        attrTest: function(input) {
            return AttrRecognizer.prototype.attrTest.call(this, input) &&
                (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
        },

        emit: function(input) {
            this.pX = input.deltaX;
            this.pY = input.deltaY;

            var direction = directionStr(input.direction);
            if (direction) {
                this.manager.emit(this.options.event + direction, input);
            }

            this._super.emit.call(this, input);
        }
    });

    /**
     * Pinch
     * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
     * @constructor
     * @extends AttrRecognizer
     */
    function PinchRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(PinchRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof PinchRecognizer
         */
        defaults: {
            event: 'pinch',
            threshold: 0,
            pointers: 2
        },

        getTouchAction: function() {
            return [TOUCH_ACTION_NONE];
        },

        attrTest: function(input) {
            return this._super.attrTest.call(this, input) &&
                (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        },

        emit: function(input) {
            this._super.emit.call(this, input);
            if (input.scale !== 1) {
                var inOut = input.scale < 1 ? 'in' : 'out';
                this.manager.emit(this.options.event + inOut, input);
            }
        }
    });

    /**
     * Press
     * Recognized when the pointer is down for x ms without any movement.
     * @constructor
     * @extends Recognizer
     */
    function PressRecognizer() {
        Recognizer.apply(this, arguments);

        this._timer = null;
        this._input = null;
    }

    inherit(PressRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof PressRecognizer
         */
        defaults: {
            event: 'press',
            pointers: 1,
            time: 500, // minimal time of the pointer to be pressed
            threshold: 5 // a minimal movement is ok, but keep it low
        },

        getTouchAction: function() {
            return [TOUCH_ACTION_AUTO];
        },

        process: function(input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;

            this._input = input;

            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
                this.reset();
            } else if (input.eventType & INPUT_START) {
                this.reset();
                this._timer = setTimeoutContext(function() {
                    this.state = STATE_RECOGNIZED;
                    this.tryEmit();
                }, options.time, this);
            } else if (input.eventType & INPUT_END) {
                return STATE_RECOGNIZED;
            }
            return STATE_FAILED;
        },

        reset: function() {
            clearTimeout(this._timer);
        },

        emit: function(input) {
            if (this.state !== STATE_RECOGNIZED) {
                return;
            }

            if (input && (input.eventType & INPUT_END)) {
                this.manager.emit(this.options.event + 'up', input);
            } else {
                this._input.timeStamp = now();
                this.manager.emit(this.options.event, this._input);
            }
        }
    });

    /**
     * Rotate
     * Recognized when two or more pointer are moving in a circular motion.
     * @constructor
     * @extends AttrRecognizer
     */
    function RotateRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(RotateRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof RotateRecognizer
         */
        defaults: {
            event: 'rotate',
            threshold: 0,
            pointers: 2
        },

        getTouchAction: function() {
            return [TOUCH_ACTION_NONE];
        },

        attrTest: function(input) {
            return this._super.attrTest.call(this, input) &&
                (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        }
    });

    /**
     * Swipe
     * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */
    function SwipeRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(SwipeRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof SwipeRecognizer
         */
        defaults: {
            event: 'swipe',
            threshold: 10,
            velocity: 0.65,
            direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
            pointers: 1
        },

        getTouchAction: function() {
            return PanRecognizer.prototype.getTouchAction.call(this);
        },

        attrTest: function(input) {
            var direction = this.options.direction;
            var velocity;

            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
                velocity = input.velocity;
            } else if (direction & DIRECTION_HORIZONTAL) {
                velocity = input.velocityX;
            } else if (direction & DIRECTION_VERTICAL) {
                velocity = input.velocityY;
            }

            return this._super.attrTest.call(this, input) &&
                direction & input.direction &&
                input.distance > this.options.threshold &&
                abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        },

        emit: function(input) {
            var direction = directionStr(input.direction);
            if (direction) {
                this.manager.emit(this.options.event + direction, input);
            }

            this.manager.emit(this.options.event, input);
        }
    });

    /**
     * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
     * between the given interval and position. The delay option can be used to recognize multi-taps without firing
     * a single tap.
     *
     * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
     * multi-taps being recognized.
     * @constructor
     * @extends Recognizer
     */
    function TapRecognizer() {
        Recognizer.apply(this, arguments);

        // previous time and center,
        // used for tap counting
        this.pTime = false;
        this.pCenter = false;

        this._timer = null;
        this._input = null;
        this.count = 0;
    }

    inherit(TapRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof PinchRecognizer
         */
        defaults: {
            event: 'tap',
            pointers: 1,
            taps: 1,
            interval: 300, // max time between the multi-tap taps
            time: 250, // max time of the pointer to be down (like finger on the screen)
            threshold: 2, // a minimal movement is ok, but keep it low
            posThreshold: 10 // a multi-tap can be a bit off the initial position
        },

        getTouchAction: function() {
            return [TOUCH_ACTION_MANIPULATION];
        },

        process: function(input) {
            var options = this.options;

            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;

            this.reset();

            if ((input.eventType & INPUT_START) && (this.count === 0)) {
                return this.failTimeout();
            }

            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (validMovement && validTouchTime && validPointers) {
                if (input.eventType != INPUT_END) {
                    return this.failTimeout();
                }

                var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

                this.pTime = input.timeStamp;
                this.pCenter = input.center;

                if (!validMultiTap || !validInterval) {
                    this.count = 1;
                } else {
                    this.count += 1;
                }

                this._input = input;

                // if tap count matches we have recognized it,
                // else it has began recognizing...
                var tapCount = this.count % options.taps;
                if (tapCount === 0) {
                    // no failing requirements, immediately trigger the tap event
                    // or wait as long as the multitap interval to trigger
                    if (!this.hasRequireFailures()) {
                        return STATE_RECOGNIZED;
                    } else {
                        this._timer = setTimeoutContext(function() {
                            this.state = STATE_RECOGNIZED;
                            this.tryEmit();
                        }, options.interval, this);
                        return STATE_BEGAN;
                    }
                }
            }
            return STATE_FAILED;
        },

        failTimeout: function() {
            this._timer = setTimeoutContext(function() {
                this.state = STATE_FAILED;
            }, this.options.interval, this);
            return STATE_FAILED;
        },

        reset: function() {
            clearTimeout(this._timer);
        },

        emit: function() {
            if (this.state == STATE_RECOGNIZED ) {
                this._input.tapCount = this.count;
                this.manager.emit(this.options.event, this._input);
            }
        }
    });

    /**
     * Simple way to create an manager with a default set of recognizers.
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */
    function Hammer(element, options) {
        options = options || {};
        options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
        return new Manager(element, options);
    }

    /**
     * @const {string}
     */
    Hammer.VERSION = '2.0.4';

    /**
     * default settings
     * @namespace
     */
    Hammer.defaults = {
        /**
         * set if DOM events are being triggered.
         * But this is slower and unused by simple implementations, so disabled by default.
         * @type {Boolean}
         * @default false
         */
        domEvents: false,

        /**
         * The value for the touchAction property/fallback.
         * When set to `compute` it will magically set the correct value based on the added recognizers.
         * @type {String}
         * @default compute
         */
        touchAction: TOUCH_ACTION_COMPUTE,

        /**
         * @type {Boolean}
         * @default true
         */
        enable: true,

        /**
         * EXPERIMENTAL FEATURE -- can be removed/changed
         * Change the parent input target element.
         * If Null, then it is being set the to main element.
         * @type {Null|EventTarget}
         * @default null
         */
        inputTarget: null,

        /**
         * force an input class
         * @type {Null|Function}
         * @default null
         */
        inputClass: null,

        /**
         * Default recognizer setup when calling `Hammer()`
         * When creating a new Manager these will be skipped.
         * @type {Array}
         */
        preset: [
            // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
            [RotateRecognizer, { enable: false }],
            [PinchRecognizer, { enable: false }, ['rotate']],
            [SwipeRecognizer,{ direction: DIRECTION_HORIZONTAL }],
            [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']],
            [TapRecognizer],
            [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']],
            [PressRecognizer]
        ],

        /**
         * Some CSS properties can be used to improve the working of Hammer.
         * Add them to this method and they will be set when creating a new Manager.
         * @namespace
         */
        cssProps: {
            /**
             * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userSelect: 'none',

            /**
             * Disable the Windows Phone grippers when pressing an element.
             * @type {String}
             * @default 'none'
             */
            touchSelect: 'none',

            /**
             * Disables the default callout shown when you touch and hold a touch target.
             * On iOS, when you touch and hold a touch target such as a link, Safari displays
             * a callout containing information about the link. This property allows you to disable that callout.
             * @type {String}
             * @default 'none'
             */
            touchCallout: 'none',

            /**
             * Specifies whether zooming is enabled. Used by IE10>
             * @type {String}
             * @default 'none'
             */
            contentZooming: 'none',

            /**
             * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userDrag: 'none',

            /**
             * Overrides the highlight color shown when the user taps a link or a JavaScript
             * clickable element in iOS. This property obeys the alpha value, if specified.
             * @type {String}
             * @default 'rgba(0,0,0,0)'
             */
            tapHighlightColor: 'rgba(0,0,0,0)'
        }
    };

    var STOP = 1;
    var FORCED_STOP = 2;

    /**
     * Manager
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */
    function Manager(element, options) {
        options = options || {};

        this.options = merge(options, Hammer.defaults);
        this.options.inputTarget = this.options.inputTarget || element;

        this.handlers = {};
        this.session = {};
        this.recognizers = [];

        this.element = element;
        this.input = createInputInstance(this);
        this.touchAction = new TouchAction(this, this.options.touchAction);

        toggleCssProps(this, true);

        each(options.recognizers, function(item) {
            var recognizer = this.add(new (item[0])(item[1]));
            item[2] && recognizer.recognizeWith(item[2]);
            item[3] && recognizer.requireFailure(item[3]);
        }, this);
    }

    Manager.prototype = {
        /**
         * set options
         * @param {Object} options
         * @returns {Manager}
         */
        set: function(options) {
            extend(this.options, options);

            // Options that need a little more setup
            if (options.touchAction) {
                this.touchAction.update();
            }
            if (options.inputTarget) {
                // Clean up existing event listeners and reinitialize
                this.input.destroy();
                this.input.target = options.inputTarget;
                this.input.init();
            }
            return this;
        },

        /**
         * stop recognizing for this session.
         * This session will be discarded, when a new [input]start event is fired.
         * When forced, the recognizer cycle is stopped immediately.
         * @param {Boolean} [force]
         */
        stop: function(force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
        },

        /**
         * run the recognizers!
         * called by the inputHandler function on every movement of the pointers (touches)
         * it walks through all the recognizers and tries to detect the gesture that is being made
         * @param {Object} inputData
         */
        recognize: function(inputData) {
            var session = this.session;
            if (session.stopped) {
                return;
            }

            // run the touch-action polyfill
            this.touchAction.preventDefaults(inputData);

            var recognizer;
            var recognizers = this.recognizers;

            // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`
            var curRecognizer = session.curRecognizer;

            // reset when the last recognizer is recognized
            // or when we're in a new session
            if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
                curRecognizer = session.curRecognizer = null;
            }

            var i = 0;
            while (i < recognizers.length) {
                recognizer = recognizers[i];

                // find out if we are allowed try to recognize the input for this one.
                // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                //      that is being recognized.
                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                //      this can be setup with the `recognizeWith()` method on the recognizer.
                if (session.stopped !== FORCED_STOP && ( // 1
                    !curRecognizer || recognizer == curRecognizer || // 2
                    recognizer.canRecognizeWith(curRecognizer))) { // 3
                    recognizer.recognize(inputData);
                } else {
                    recognizer.reset();
                }

                // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                // current active recognizer. but only if we don't already have an active recognizer
                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                    curRecognizer = session.curRecognizer = recognizer;
                }
                i++;
            }
        },

        /**
         * get a recognizer by its event name.
         * @param {Recognizer|String} recognizer
         * @returns {Recognizer|Null}
         */
        get: function(recognizer) {
            if (recognizer instanceof Recognizer) {
                return recognizer;
            }

            var recognizers = this.recognizers;
            for (var i = 0; i < recognizers.length; i++) {
                if (recognizers[i].options.event == recognizer) {
                    return recognizers[i];
                }
            }
            return null;
        },

        /**
         * add a recognizer to the manager
         * existing recognizers with the same event name will be removed
         * @param {Recognizer} recognizer
         * @returns {Recognizer|Manager}
         */
        add: function(recognizer) {
            if (invokeArrayArg(recognizer, 'add', this)) {
                return this;
            }

            // remove existing
            var existing = this.get(recognizer.options.event);
            if (existing) {
                this.remove(existing);
            }

            this.recognizers.push(recognizer);
            recognizer.manager = this;

            this.touchAction.update();
            return recognizer;
        },

        /**
         * remove a recognizer by name or instance
         * @param {Recognizer|String} recognizer
         * @returns {Manager}
         */
        remove: function(recognizer) {
            if (invokeArrayArg(recognizer, 'remove', this)) {
                return this;
            }

            var recognizers = this.recognizers;
            recognizer = this.get(recognizer);
            recognizers.splice(inArray(recognizers, recognizer), 1);

            this.touchAction.update();
            return this;
        },

        /**
         * bind event
         * @param {String} events
         * @param {Function} handler
         * @returns {EventEmitter} this
         */
        on: function(events, handler) {
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                handlers[event] = handlers[event] || [];
                handlers[event].push(handler);
            });
            return this;
        },

        /**
         * unbind event, leave emit blank to remove all handlers
         * @param {String} events
         * @param {Function} [handler]
         * @returns {EventEmitter} this
         */
        off: function(events, handler) {
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                if (!handler) {
                    delete handlers[event];
                } else {
                    handlers[event].splice(inArray(handlers[event], handler), 1);
                }
            });
            return this;
        },

        /**
         * emit event to the listeners
         * @param {String} event
         * @param {Object} data
         */
        emit: function(event, data) {
            // we also want to trigger dom events
            if (this.options.domEvents) {
                triggerDomEvent(event, data);
            }

            // no handlers, so skip it all
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) {
                return;
            }

            data.type = event;
            data.preventDefault = function() {
                data.srcEvent.preventDefault();
            };

            var i = 0;
            while (i < handlers.length) {
                handlers[i](data);
                i++;
            }
        },

        /**
         * destroy the manager and unbinds all events
         * it doesn't unbind dom events, that is the user own responsibility
         */
        destroy: function() {
            this.element && toggleCssProps(this, false);

            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
        }
    };

    /**
     * add/remove the css properties as defined in manager.options.cssProps
     * @param {Manager} manager
     * @param {Boolean} add
     */
    function toggleCssProps(manager, add) {
        var element = manager.element;
        each(manager.options.cssProps, function(value, name) {
            element.style[prefixed(element.style, name)] = add ? value : '';
        });
    }

    /**
     * trigger dom event
     * @param {String} event
     * @param {Object} data
     */
    function triggerDomEvent(event, data) {
        var gestureEvent = document.createEvent('Event');
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
    }

    extend(Hammer, {
        INPUT_START: INPUT_START,
        INPUT_MOVE: INPUT_MOVE,
        INPUT_END: INPUT_END,
        INPUT_CANCEL: INPUT_CANCEL,

        STATE_POSSIBLE: STATE_POSSIBLE,
        STATE_BEGAN: STATE_BEGAN,
        STATE_CHANGED: STATE_CHANGED,
        STATE_ENDED: STATE_ENDED,
        STATE_RECOGNIZED: STATE_RECOGNIZED,
        STATE_CANCELLED: STATE_CANCELLED,
        STATE_FAILED: STATE_FAILED,

        DIRECTION_NONE: DIRECTION_NONE,
        DIRECTION_LEFT: DIRECTION_LEFT,
        DIRECTION_RIGHT: DIRECTION_RIGHT,
        DIRECTION_UP: DIRECTION_UP,
        DIRECTION_DOWN: DIRECTION_DOWN,
        DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
        DIRECTION_VERTICAL: DIRECTION_VERTICAL,
        DIRECTION_ALL: DIRECTION_ALL,

        Manager: Manager,
        Input: Input,
        TouchAction: TouchAction,

        TouchInput: TouchInput,
        MouseInput: MouseInput,
        PointerEventInput: PointerEventInput,
        TouchMouseInput: TouchMouseInput,
        SingleTouchInput: SingleTouchInput,

        Recognizer: Recognizer,
        AttrRecognizer: AttrRecognizer,
        Tap: TapRecognizer,
        Pan: PanRecognizer,
        Swipe: SwipeRecognizer,
        Pinch: PinchRecognizer,
        Rotate: RotateRecognizer,
        Press: PressRecognizer,

        on: addEventListeners,
        off: removeEventListeners,
        each: each,
        merge: merge,
        extend: extend,
        inherit: inherit,
        bindFn: bindFn,
        prefixed: prefixed
    });

    if (typeof define == TYPE_FUNCTION && define.amd) {
        define(function() {
            return Hammer;
        });
    } else if (typeof module != 'undefined' && module.exports) {
        module.exports = Hammer;
    } else {
        window[exportName] = Hammer;
    }

})(window, document, 'Hammer');
// /Users/michaelmartinez/webviewer/Content/js/bootstrap.min.js
/*!
 * Bootstrap v3.3.2 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";var b=a.fn.jquery.split(" ")[0].split(".");if(b[0]<2&&b[1]<9||1==b[0]&&9==b[1]&&b[2]<1)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher")}(jQuery),+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one("bsTransitionEnd",function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(b){return a(b.target).is(this)?b.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var c=a(this),e=c.data("bs.alert");e||c.data("bs.alert",e=new d(this)),"string"==typeof b&&e[b].call(c)})}var c='[data-dismiss="alert"]',d=function(b){a(b).on("click",c,this.close)};d.VERSION="3.3.2",d.TRANSITION_DURATION=150,d.prototype.close=function(b){function c(){g.detach().trigger("closed.bs.alert").remove()}var e=a(this),f=e.attr("data-target");f||(f=e.attr("href"),f=f&&f.replace(/.*(?=#[^\s]*$)/,""));var g=a(f);b&&b.preventDefault(),g.length||(g=e.closest(".alert")),g.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(g.removeClass("in"),a.support.transition&&g.hasClass("fade")?g.one("bsTransitionEnd",c).emulateTransitionEnd(d.TRANSITION_DURATION):c())};var e=a.fn.alert;a.fn.alert=b,a.fn.alert.Constructor=d,a.fn.alert.noConflict=function(){return a.fn.alert=e,this},a(document).on("click.bs.alert.data-api",c,d.prototype.close)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof b&&b;e||d.data("bs.button",e=new c(this,f)),"toggle"==b?e.toggle():b&&e.setState(b)})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.isLoading=!1};c.VERSION="3.3.2",c.DEFAULTS={loadingText:"loading..."},c.prototype.setState=function(b){var c="disabled",d=this.$element,e=d.is("input")?"val":"html",f=d.data();b+="Text",null==f.resetText&&d.data("resetText",d[e]()),setTimeout(a.proxy(function(){d[e](null==f[b]?this.options[b]:f[b]),"loadingText"==b?(this.isLoading=!0,d.addClass(c).attr(c,c)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c))},this),0)},c.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle="buttons"]');if(b.length){var c=this.$element.find("input");"radio"==c.prop("type")&&(c.prop("checked")&&this.$element.hasClass("active")?a=!1:b.find(".active").removeClass("active")),a&&c.prop("checked",!this.$element.hasClass("active")).trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active"));a&&this.$element.toggleClass("active")};var d=a.fn.button;a.fn.button=b,a.fn.button.Constructor=c,a.fn.button.noConflict=function(){return a.fn.button=d,this},a(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(c){var d=a(c.target);d.hasClass("btn")||(d=d.closest(".btn")),b.call(d,"toggle"),c.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(b){a(b.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(b.type))})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},c.DEFAULTS,d.data(),"object"==typeof b&&b),g="string"==typeof b?b:f.slide;e||d.data("bs.carousel",e=new c(this,f)),"number"==typeof b?e.to(b):g?e[g]():f.interval&&e.pause().cycle()})}var c=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=this.sliding=this.interval=this.$active=this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",a.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",a.proxy(this.pause,this)).on("mouseleave.bs.carousel",a.proxy(this.cycle,this))};c.VERSION="3.3.2",c.TRANSITION_DURATION=600,c.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},c.prototype.keydown=function(a){if(!/input|textarea/i.test(a.target.tagName)){switch(a.which){case 37:this.prev();break;case 39:this.next();break;default:return}a.preventDefault()}},c.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},c.prototype.getItemIndex=function(a){return this.$items=a.parent().children(".item"),this.$items.index(a||this.$active)},c.prototype.getItemForDirection=function(a,b){var c=this.getItemIndex(b),d="prev"==a&&0===c||"next"==a&&c==this.$items.length-1;if(d&&!this.options.wrap)return b;var e="prev"==a?-1:1,f=(c+e)%this.$items.length;return this.$items.eq(f)},c.prototype.to=function(a){var b=this,c=this.getItemIndex(this.$active=this.$element.find(".item.active"));return a>this.$items.length-1||0>a?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){b.to(a)}):c==a?this.pause().cycle():this.slide(a>c?"next":"prev",this.$items.eq(a))},c.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},c.prototype.next=function(){return this.sliding?void 0:this.slide("next")},c.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},c.prototype.slide=function(b,d){var e=this.$element.find(".item.active"),f=d||this.getItemForDirection(b,e),g=this.interval,h="next"==b?"left":"right",i=this;if(f.hasClass("active"))return this.sliding=!1;var j=f[0],k=a.Event("slide.bs.carousel",{relatedTarget:j,direction:h});if(this.$element.trigger(k),!k.isDefaultPrevented()){if(this.sliding=!0,g&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var l=a(this.$indicators.children()[this.getItemIndex(f)]);l&&l.addClass("active")}var m=a.Event("slid.bs.carousel",{relatedTarget:j,direction:h});return a.support.transition&&this.$element.hasClass("slide")?(f.addClass(b),f[0].offsetWidth,e.addClass(h),f.addClass(h),e.one("bsTransitionEnd",function(){f.removeClass([b,h].join(" ")).addClass("active"),e.removeClass(["active",h].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger(m)},0)}).emulateTransitionEnd(c.TRANSITION_DURATION)):(e.removeClass("active"),f.addClass("active"),this.sliding=!1,this.$element.trigger(m)),g&&this.cycle(),this}};var d=a.fn.carousel;a.fn.carousel=b,a.fn.carousel.Constructor=c,a.fn.carousel.noConflict=function(){return a.fn.carousel=d,this};var e=function(c){var d,e=a(this),f=a(e.attr("data-target")||(d=e.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,""));if(f.hasClass("carousel")){var g=a.extend({},f.data(),e.data()),h=e.attr("data-slide-to");h&&(g.interval=!1),b.call(f,g),h&&f.data("bs.carousel").to(h),c.preventDefault()}};a(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var c=a(this);b.call(c,c.data())})})}(jQuery),+function(a){"use strict";function b(b){var c,d=b.attr("data-target")||(c=b.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,"");return a(d)}function c(b){return this.each(function(){var c=a(this),e=c.data("bs.collapse"),f=a.extend({},d.DEFAULTS,c.data(),"object"==typeof b&&b);!e&&f.toggle&&"show"==b&&(f.toggle=!1),e||c.data("bs.collapse",e=new d(this,f)),"string"==typeof b&&e[b]()})}var d=function(b,c){this.$element=a(b),this.options=a.extend({},d.DEFAULTS,c),this.$trigger=a(this.options.trigger).filter('[href="#'+b.id+'"], [data-target="#'+b.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};d.VERSION="3.3.2",d.TRANSITION_DURATION=350,d.DEFAULTS={toggle:!0,trigger:'[data-toggle="collapse"]'},d.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},d.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var b,e=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(e&&e.length&&(b=e.data("bs.collapse"),b&&b.transitioning))){var f=a.Event("show.bs.collapse");if(this.$element.trigger(f),!f.isDefaultPrevented()){e&&e.length&&(c.call(e,"hide"),b||e.data("bs.collapse",null));var g=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var h=function(){this.$element.removeClass("collapsing").addClass("collapse in")[g](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return h.call(this);var i=a.camelCase(["scroll",g].join("-"));this.$element.one("bsTransitionEnd",a.proxy(h,this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i])}}}},d.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var e=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return a.support.transition?void this.$element[c](0).one("bsTransitionEnd",a.proxy(e,this)).emulateTransitionEnd(d.TRANSITION_DURATION):e.call(this)}}},d.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},d.prototype.getParent=function(){return a(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(a.proxy(function(c,d){var e=a(d);this.addAriaAndCollapsedClass(b(e),e)},this)).end()},d.prototype.addAriaAndCollapsedClass=function(a,b){var c=a.hasClass("in");a.attr("aria-expanded",c),b.toggleClass("collapsed",!c).attr("aria-expanded",c)};var e=a.fn.collapse;a.fn.collapse=c,a.fn.collapse.Constructor=d,a.fn.collapse.noConflict=function(){return a.fn.collapse=e,this},a(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(d){var e=a(this);e.attr("data-target")||d.preventDefault();var f=b(e),g=f.data("bs.collapse"),h=g?"toggle":a.extend({},e.data(),{trigger:this});c.call(f,h)})}(jQuery),+function(a){"use strict";function b(b){b&&3===b.which||(a(e).remove(),a(f).each(function(){var d=a(this),e=c(d),f={relatedTarget:this};e.hasClass("open")&&(e.trigger(b=a.Event("hide.bs.dropdown",f)),b.isDefaultPrevented()||(d.attr("aria-expanded","false"),e.removeClass("open").trigger("hidden.bs.dropdown",f)))}))}function c(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}function d(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new g(this)),"string"==typeof b&&d[b].call(c)})}var e=".dropdown-backdrop",f='[data-toggle="dropdown"]',g=function(b){a(b).on("click.bs.dropdown",this.toggle)};g.VERSION="3.3.2",g.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=c(e),g=f.hasClass("open");if(b(),!g){"ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a('<div class="dropdown-backdrop"/>').insertAfter(a(this)).on("click",b);var h={relatedTarget:this};if(f.trigger(d=a.Event("show.bs.dropdown",h)),d.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),f.toggleClass("open").trigger("shown.bs.dropdown",h)}return!1}},g.prototype.keydown=function(b){if(/(38|40|27|32)/.test(b.which)&&!/input|textarea/i.test(b.target.tagName)){var d=a(this);if(b.preventDefault(),b.stopPropagation(),!d.is(".disabled, :disabled")){var e=c(d),g=e.hasClass("open");if(!g&&27!=b.which||g&&27==b.which)return 27==b.which&&e.find(f).trigger("focus"),d.trigger("click");var h=" li:not(.divider):visible a",i=e.find('[role="menu"]'+h+', [role="listbox"]'+h);if(i.length){var j=i.index(b.target);38==b.which&&j>0&&j--,40==b.which&&j<i.length-1&&j++,~j||(j=0),i.eq(j).trigger("focus")}}}};var h=a.fn.dropdown;a.fn.dropdown=d,a.fn.dropdown.Constructor=g,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=h,this},a(document).on("click.bs.dropdown.data-api",b).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",f,g.prototype.toggle).on("keydown.bs.dropdown.data-api",f,g.prototype.keydown).on("keydown.bs.dropdown.data-api",'[role="menu"]',g.prototype.keydown).on("keydown.bs.dropdown.data-api",'[role="listbox"]',g.prototype.keydown)}(jQuery),+function(a){"use strict";function b(b,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},c.DEFAULTS,e.data(),"object"==typeof b&&b);f||e.data("bs.modal",f=new c(this,g)),"string"==typeof b?f[b](d):g.show&&f.show(d)})}var c=function(b,c){this.options=c,this.$body=a(document.body),this.$element=a(b),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};c.VERSION="3.3.2",c.TRANSITION_DURATION=300,c.BACKDROP_TRANSITION_DURATION=150,c.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},c.prototype.toggle=function(a){return this.isShown?this.hide():this.show(a)},c.prototype.show=function(b){var d=this,e=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(e),this.isShown||e.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.backdrop(function(){var e=a.support.transition&&d.$element.hasClass("fade");d.$element.parent().length||d.$element.appendTo(d.$body),d.$element.show().scrollTop(0),d.options.backdrop&&d.adjustBackdrop(),d.adjustDialog(),e&&d.$element[0].offsetWidth,d.$element.addClass("in").attr("aria-hidden",!1),d.enforceFocus();var f=a.Event("shown.bs.modal",{relatedTarget:b});e?d.$element.find(".modal-dialog").one("bsTransitionEnd",function(){d.$element.trigger("focus").trigger(f)}).emulateTransitionEnd(c.TRANSITION_DURATION):d.$element.trigger("focus").trigger(f)}))},c.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",a.proxy(this.hideModal,this)).emulateTransitionEnd(c.TRANSITION_DURATION):this.hideModal())},c.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.trigger("focus")},this))},c.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},c.prototype.resize=function(){this.isShown?a(window).on("resize.bs.modal",a.proxy(this.handleUpdate,this)):a(window).off("resize.bs.modal")},c.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.$body.removeClass("modal-open"),a.resetAdjustments(),a.resetScrollbar(),a.$element.trigger("hidden.bs.modal")})},c.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},c.prototype.backdrop=function(b){var d=this,e=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var f=a.support.transition&&e;if(this.$backdrop=a('<div class="modal-backdrop '+e+'" />').prependTo(this.$element).on("click.dismiss.bs.modal",a.proxy(function(a){a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),f&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;f?this.$backdrop.one("bsTransitionEnd",b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):b()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var g=function(){d.removeBackdrop(),b&&b()};a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):g()}else b&&b()},c.prototype.handleUpdate=function(){this.options.backdrop&&this.adjustBackdrop(),this.adjustDialog()},c.prototype.adjustBackdrop=function(){this.$backdrop.css("height",0).css("height",this.$element[0].scrollHeight)},c.prototype.adjustDialog=function(){var a=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&a?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!a?this.scrollbarWidth:""})},c.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},c.prototype.checkScrollbar=function(){this.bodyIsOverflowing=document.body.scrollHeight>document.documentElement.clientHeight,this.scrollbarWidth=this.measureScrollbar()},c.prototype.setScrollbar=function(){var a=parseInt(this.$body.css("padding-right")||0,10);this.bodyIsOverflowing&&this.$body.css("padding-right",a+this.scrollbarWidth)},c.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},c.prototype.measureScrollbar=function(){var a=document.createElement("div");a.className="modal-scrollbar-measure",this.$body.append(a);var b=a.offsetWidth-a.clientWidth;return this.$body[0].removeChild(a),b};var d=a.fn.modal;a.fn.modal=b,a.fn.modal.Constructor=c,a.fn.modal.noConflict=function(){return a.fn.modal=d,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(c){var d=a(this),e=d.attr("href"),f=a(d.attr("data-target")||e&&e.replace(/.*(?=#[^\s]+$)/,"")),g=f.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(e)&&e},f.data(),d.data());d.is("a")&&c.preventDefault(),f.one("show.bs.modal",function(a){a.isDefaultPrevented()||f.one("hidden.bs.modal",function(){d.is(":visible")&&d.trigger("focus")})}),b.call(f,g,this)})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof b&&b;(e||"destroy"!=b)&&(e||d.data("bs.tooltip",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",a,b)};c.VERSION="3.3.2",c.TRANSITION_DURATION=150,c.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},c.prototype.init=function(b,c,d){this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d),this.$viewport=this.options.viewport&&a(this.options.viewport.selector||this.options.viewport);for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focusin",i="hover"==g?"mouseleave":"focusout";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},c.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},c.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c&&c.$tip&&c.$tip.is(":visible")?void(c.hoverState="in"):(c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)):c.show())},c.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide()},c.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(b);var d=a.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(b.isDefaultPrevented()||!d)return;var e=this,f=this.tip(),g=this.getUID(this.type);this.setContent(),f.attr("id",g),this.$element.attr("aria-describedby",g),this.options.animation&&f.addClass("fade");var h="function"==typeof this.options.placement?this.options.placement.call(this,f[0],this.$element[0]):this.options.placement,i=/\s?auto?\s?/i,j=i.test(h);j&&(h=h.replace(i,"")||"top"),f.detach().css({top:0,left:0,display:"block"}).addClass(h).data("bs."+this.type,this),this.options.container?f.appendTo(this.options.container):f.insertAfter(this.$element);var k=this.getPosition(),l=f[0].offsetWidth,m=f[0].offsetHeight;if(j){var n=h,o=this.options.container?a(this.options.container):this.$element.parent(),p=this.getPosition(o);h="bottom"==h&&k.bottom+m>p.bottom?"top":"top"==h&&k.top-m<p.top?"bottom":"right"==h&&k.right+l>p.width?"left":"left"==h&&k.left-l<p.left?"right":h,f.removeClass(n).addClass(h)}var q=this.getCalculatedOffset(h,k,l,m);this.applyPlacement(q,h);var r=function(){var a=e.hoverState;e.$element.trigger("shown.bs."+e.type),e.hoverState=null,"out"==a&&e.leave(e)};a.support.transition&&this.$tip.hasClass("fade")?f.one("bsTransitionEnd",r).emulateTransitionEnd(c.TRANSITION_DURATION):r()}},c.prototype.applyPlacement=function(b,c){var d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css("margin-top"),10),h=parseInt(d.css("margin-left"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),b.top=b.top+g,b.left=b.left+h,a.offset.setOffset(d[0],a.extend({using:function(a){d.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),d.addClass("in");var i=d[0].offsetWidth,j=d[0].offsetHeight;"top"==c&&j!=f&&(b.top=b.top+f-j);var k=this.getViewportAdjustedDelta(c,b,i,j);k.left?b.left+=k.left:b.top+=k.top;var l=/top|bottom/.test(c),m=l?2*k.left-e+i:2*k.top-f+j,n=l?"offsetWidth":"offsetHeight";d.offset(b),this.replaceArrow(m,d[0][n],l)},c.prototype.replaceArrow=function(a,b,c){this.arrow().css(c?"left":"top",50*(1-a/b)+"%").css(c?"top":"left","")},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},c.prototype.hide=function(b){function d(){"in"!=e.hoverState&&f.detach(),e.$element.removeAttr("aria-describedby").trigger("hidden.bs."+e.type),b&&b()}var e=this,f=this.tip(),g=a.Event("hide.bs."+this.type);return this.$element.trigger(g),g.isDefaultPrevented()?void 0:(f.removeClass("in"),a.support.transition&&this.$tip.hasClass("fade")?f.one("bsTransitionEnd",d).emulateTransitionEnd(c.TRANSITION_DURATION):d(),this.hoverState=null,this)},c.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},c.prototype.hasContent=function(){return this.getTitle()},c.prototype.getPosition=function(b){b=b||this.$element;var c=b[0],d="BODY"==c.tagName,e=c.getBoundingClientRect();null==e.width&&(e=a.extend({},e,{width:e.right-e.left,height:e.bottom-e.top}));var f=d?{top:0,left:0}:b.offset(),g={scroll:d?document.documentElement.scrollTop||document.body.scrollTop:b.scrollTop()},h=d?{width:a(window).width(),height:a(window).height()}:null;return a.extend({},e,g,h,f)},c.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},c.prototype.getViewportAdjustedDelta=function(a,b,c,d){var e={top:0,left:0};if(!this.$viewport)return e;var f=this.options.viewport&&this.options.viewport.padding||0,g=this.getPosition(this.$viewport);if(/right|left/.test(a)){var h=b.top-f-g.scroll,i=b.top+f-g.scroll+d;h<g.top?e.top=g.top-h:i>g.top+g.height&&(e.top=g.top+g.height-i)}else{var j=b.left-f,k=b.left+f+c;j<g.left?e.left=g.left-j:k>g.width&&(e.left=g.left+g.width-k)}return e},c.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},c.prototype.getUID=function(a){do a+=~~(1e6*Math.random());while(document.getElementById(a));return a},c.prototype.tip=function(){return this.$tip=this.$tip||a(this.options.template)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},c.prototype.enable=function(){this.enabled=!0},c.prototype.disable=function(){this.enabled=!1},c.prototype.toggleEnabled=function(){this.enabled=!this.enabled},c.prototype.toggle=function(b){var c=this;b&&(c=a(b.currentTarget).data("bs."+this.type),c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c))),c.tip().hasClass("in")?c.leave(c):c.enter(c)},c.prototype.destroy=function(){var a=this;clearTimeout(this.timeout),this.hide(function(){a.$element.off("."+a.type).removeData("bs."+a.type)})};var d=a.fn.tooltip;a.fn.tooltip=b,a.fn.tooltip.Constructor=c,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=d,this}}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof b&&b;(e||"destroy"!=b)&&(e||d.data("bs.popover",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover requires tooltip.js");c.VERSION="3.3.2",c.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),c.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),c.prototype.constructor=c,c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof c?"html":"append":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},c.prototype.hasContent=function(){return this.getTitle()||this.getContent()},c.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},c.prototype.tip=function(){return this.$tip||(this.$tip=a(this.options.template)),this.$tip};var d=a.fn.popover;a.fn.popover=b,a.fn.popover.Constructor=c,a.fn.popover.noConflict=function(){return a.fn.popover=d,this}}(jQuery),+function(a){"use strict";function b(c,d){var e=a.proxy(this.process,this);this.$body=a("body"),this.$scrollElement=a(a(c).is("body")?window:c),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",e),this.refresh(),this.process()}function c(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})}b.VERSION="3.3.2",b.DEFAULTS={offset:10},b.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},b.prototype.refresh=function(){var b="offset",c=0;a.isWindow(this.$scrollElement[0])||(b="position",c=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var d=this;this.$body.find(this.selector).map(function(){var d=a(this),e=d.data("target")||d.attr("href"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(":visible")&&[[f[b]().top+c,e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){d.offsets.push(this[0]),d.targets.push(this[1])})},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.getScrollHeight(),d=this.options.offset+c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(this.scrollHeight!=c&&this.refresh(),b>=d)return g!=(a=f[f.length-1])&&this.activate(a);if(g&&b<e[0])return this.activeTarget=null,this.clear();for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(!e[a+1]||b<=e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){this.activeTarget=b,this.clear();var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")},b.prototype.clear=function(){a(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var d=a.fn.scrollspy;a.fn.scrollspy=c,a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=d,this},a(window).on("load.bs.scrollspy.data-api",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);c.call(b,b.data())})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new c(this)),"string"==typeof b&&e[b]()})}var c=function(b){this.element=a(b)};c.VERSION="3.3.2",c.TRANSITION_DURATION=150,c.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){var e=c.find(".active:last a"),f=a.Event("hide.bs.tab",{relatedTarget:b[0]}),g=a.Event("show.bs.tab",{relatedTarget:e[0]});if(e.trigger(f),b.trigger(g),!g.isDefaultPrevented()&&!f.isDefaultPrevented()){var h=a(d);this.activate(b.closest("li"),c),this.activate(h,h.parent(),function(){e.trigger({type:"hidden.bs.tab",relatedTarget:b[0]}),b.trigger({type:"shown.bs.tab",relatedTarget:e[0]})})}}},c.prototype.activate=function(b,d,e){function f(){g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),h?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu")&&b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),e&&e()
}var g=d.find("> .active"),h=e&&a.support.transition&&(g.length&&g.hasClass("fade")||!!d.find("> .fade").length);g.length&&h?g.one("bsTransitionEnd",f).emulateTransitionEnd(c.TRANSITION_DURATION):f(),g.removeClass("in")};var d=a.fn.tab;a.fn.tab=b,a.fn.tab.Constructor=c,a.fn.tab.noConflict=function(){return a.fn.tab=d,this};var e=function(c){c.preventDefault(),b.call(a(this),"show")};a(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',e).on("click.bs.tab.data-api",'[data-toggle="pill"]',e)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof b&&b;e||d.data("bs.affix",e=new c(this,f)),"string"==typeof b&&e[b]()})}var c=function(b,d){this.options=a.extend({},c.DEFAULTS,d),this.$target=a(this.options.target).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(b),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};c.VERSION="3.3.2",c.RESET="affix affix-top affix-bottom",c.DEFAULTS={offset:0,target:window},c.prototype.getState=function(a,b,c,d){var e=this.$target.scrollTop(),f=this.$element.offset(),g=this.$target.height();if(null!=c&&"top"==this.affixed)return c>e?"top":!1;if("bottom"==this.affixed)return null!=c?e+this.unpin<=f.top?!1:"bottom":a-d>=e+g?!1:"bottom";var h=null==this.affixed,i=h?e:f.top,j=h?g:b;return null!=c&&c>=e?"top":null!=d&&i+j>=a-d?"bottom":!1},c.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var a=this.$target.scrollTop(),b=this.$element.offset();return this.pinnedOffset=b.top-a},c.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},c.prototype.checkPosition=function(){if(this.$element.is(":visible")){var b=this.$element.height(),d=this.options.offset,e=d.top,f=d.bottom,g=a("body").height();"object"!=typeof d&&(f=e=d),"function"==typeof e&&(e=d.top(this.$element)),"function"==typeof f&&(f=d.bottom(this.$element));var h=this.getState(g,b,e,f);if(this.affixed!=h){null!=this.unpin&&this.$element.css("top","");var i="affix"+(h?"-"+h:""),j=a.Event(i+".bs.affix");if(this.$element.trigger(j),j.isDefaultPrevented())return;this.affixed=h,this.unpin="bottom"==h?this.getPinnedOffset():null,this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix","affixed")+".bs.affix")}"bottom"==h&&this.$element.offset({top:g-b-f})}};var d=a.fn.affix;a.fn.affix=b,a.fn.affix.Constructor=c,a.fn.affix.noConflict=function(){return a.fn.affix=d,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var c=a(this),d=c.data();d.offset=d.offset||{},null!=d.offsetBottom&&(d.offset.bottom=d.offsetBottom),null!=d.offsetTop&&(d.offset.top=d.offsetTop),b.call(c,d)})})}(jQuery);
// /Users/michaelmartinez/webviewer/Content/js/moment.min.js
//! moment.js
//! version : 2.12.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):a.moment=b()}(this,function(){"use strict";function a(){return Zc.apply(null,arguments)}function b(a){Zc=a}function c(a){return a instanceof Array||"[object Array]"===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||"[object Date]"===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c<a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&&(a[c]=b[c]);return f(b,"toString")&&(a.toString=b.toString),f(b,"valueOf")&&(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ia(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&&(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow<0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&&(a._isValid=a._isValid&&0===b.charsLeftOver&&0===b.unusedTokens.length&&void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a){return void 0===a}function n(a,b){var c,d,e;if(m(b._isAMomentObject)||(a._isAMomentObject=b._isAMomentObject),m(b._i)||(a._i=b._i),m(b._f)||(a._f=b._f),m(b._l)||(a._l=b._l),m(b._strict)||(a._strict=b._strict),m(b._tzm)||(a._tzm=b._tzm),m(b._isUTC)||(a._isUTC=b._isUTC),m(b._offset)||(a._offset=b._offset),m(b._pf)||(a._pf=j(b)),m(b._locale)||(a._locale=b._locale),$c.length>0)for(c in $c)d=$c[c],e=b[d],m(e)||(a[d]=e);return a}function o(b){n(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),_c===!1&&(_c=!0,a.updateOffset(this),_c=!1)}function p(a){return a instanceof o||null!=a&&null!=a._isAMomentObject}function q(a){return 0>a?Math.ceil(a):Math.floor(a)}function r(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=q(b)),c}function s(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&r(a[d])!==r(b[d]))&&g++;return g+f}function t(b){a.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+b)}function u(a,b){var c=!0;return g(function(){return c&&(t(a+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function v(a,b){ad[a]||(t(b),ad[a]=!0)}function w(a){return a instanceof Function||"[object Function]"===Object.prototype.toString.call(a)}function x(a){return"[object Object]"===Object.prototype.toString.call(a)}function y(a){var b,c;for(c in a)b=a[c],w(b)?this[c]=b:this["_"+c]=b;this._config=a,this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function z(a,b){var c,d=g({},a);for(c in b)f(b,c)&&(x(a[c])&&x(b[c])?(d[c]={},g(d[c],a[c]),g(d[c],b[c])):null!=b[c]?d[c]=b[c]:delete d[c]);return d}function A(a){null!=a&&this.set(a)}function B(a){return a?a.toLowerCase().replace("_","-"):a}function C(a){for(var b,c,d,e,f=0;f<a.length;){for(e=B(a[f]).split("-"),b=e.length,c=B(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=D(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&s(e,c,!0)>=b-1)break;b--}f++}return null}function D(a){var b=null;if(!cd[a]&&"undefined"!=typeof module&&module&&module.exports)try{b=bd._abbr,require("./locale/"+a),E(b)}catch(c){}return cd[a]}function E(a,b){var c;return a&&(c=m(b)?H(a):F(a,b),c&&(bd=c)),bd._abbr}function F(a,b){return null!==b?(b.abbr=a,null!=cd[a]?(v("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale"),b=z(cd[a]._config,b)):null!=b.parentLocale&&(null!=cd[b.parentLocale]?b=z(cd[b.parentLocale]._config,b):v("parentLocaleUndefined","specified parentLocale is not defined yet")),cd[a]=new A(b),E(a),cd[a]):(delete cd[a],null)}function G(a,b){if(null!=b){var c;null!=cd[a]&&(b=z(cd[a]._config,b)),c=new A(b),c.parentLocale=cd[a],cd[a]=c,E(a)}else null!=cd[a]&&(null!=cd[a].parentLocale?cd[a]=cd[a].parentLocale:null!=cd[a]&&delete cd[a]);return cd[a]}function H(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return bd;if(!c(a)){if(b=D(a))return b;a=[a]}return C(a)}function I(){return Object.keys(cd)}function J(a,b){var c=a.toLowerCase();dd[c]=dd[c+"s"]=dd[b]=a}function K(a){return"string"==typeof a?dd[a]||dd[a.toLowerCase()]:void 0}function L(a){var b,c,d={};for(c in a)f(a,c)&&(b=K(c),b&&(d[b]=a[c]));return d}function M(b,c){return function(d){return null!=d?(O(this,b,d),a.updateOffset(this,c),this):N(this,b)}}function N(a,b){return a.isValid()?a._d["get"+(a._isUTC?"UTC":"")+b]():NaN}function O(a,b,c){a.isValid()&&a._d["set"+(a._isUTC?"UTC":"")+b](c)}function P(a,b){var c;if("object"==typeof a)for(c in a)this.set(c,a[c]);else if(a=K(a),w(this[a]))return this[a](b);return this}function Q(a,b,c){var d=""+Math.abs(a),e=b-d.length,f=a>=0;return(f?c?"+":"":"-")+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function R(a,b,c,d){var e=d;"string"==typeof d&&(e=function(){return this[d]()}),a&&(hd[a]=e),b&&(hd[b[0]]=function(){return Q(e.apply(this,arguments),b[1],b[2])}),c&&(hd[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function S(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function T(a){var b,c,d=a.match(ed);for(b=0,c=d.length;c>b;b++)hd[d[b]]?d[b]=hd[d[b]]:d[b]=S(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function U(a,b){return a.isValid()?(b=V(b,a.localeData()),gd[b]=gd[b]||T(b),gd[b](a)):a.localeData().invalidDate()}function V(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(fd.lastIndex=0;d>=0&&fd.test(a);)a=a.replace(fd,c),fd.lastIndex=0,d-=1;return a}function W(a,b,c){zd[a]=w(b)?b:function(a,d){return a&&c?c:b}}function X(a,b){return f(zd,a)?zd[a](b._strict,b._locale):new RegExp(Y(a))}function Y(a){return Z(a.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}))}function Z(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function $(a,b){var c,d=b;for("string"==typeof a&&(a=[a]),"number"==typeof b&&(d=function(a,c){c[b]=r(a)}),c=0;c<a.length;c++)Ad[a[c]]=d}function _(a,b){$(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function aa(a,b,c){null!=b&&f(Ad,a)&&Ad[a](b,c._a,c,a)}function ba(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function ca(a,b){return c(this._months)?this._months[a.month()]:this._months[Kd.test(b)?"format":"standalone"][a.month()]}function da(a,b){return c(this._monthsShort)?this._monthsShort[a.month()]:this._monthsShort[Kd.test(b)?"format":"standalone"][a.month()]}function ea(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12>d;d++){if(e=h([2e3,d]),c&&!this._longMonthsParse[d]&&(this._longMonthsParse[d]=new RegExp("^"+this.months(e,"").replace(".","")+"$","i"),this._shortMonthsParse[d]=new RegExp("^"+this.monthsShort(e,"").replace(".","")+"$","i")),c||this._monthsParse[d]||(f="^"+this.months(e,"")+"|^"+this.monthsShort(e,""),this._monthsParse[d]=new RegExp(f.replace(".",""),"i")),c&&"MMMM"===b&&this._longMonthsParse[d].test(a))return d;if(c&&"MMM"===b&&this._shortMonthsParse[d].test(a))return d;if(!c&&this._monthsParse[d].test(a))return d}}function fa(a,b){var c;if(!a.isValid())return a;if("string"==typeof b)if(/^\d+$/.test(b))b=r(b);else if(b=a.localeData().monthsParse(b),"number"!=typeof b)return a;return c=Math.min(a.date(),ba(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a}function ga(b){return null!=b?(fa(this,b),a.updateOffset(this,!0),this):N(this,"Month")}function ha(){return ba(this.year(),this.month())}function ia(a){return this._monthsParseExact?(f(this,"_monthsRegex")||ka.call(this),a?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&a?this._monthsShortStrictRegex:this._monthsShortRegex}function ja(a){return this._monthsParseExact?(f(this,"_monthsRegex")||ka.call(this),a?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&a?this._monthsStrictRegex:this._monthsRegex}function ka(){function a(a,b){return b.length-a.length}var b,c,d=[],e=[],f=[];for(b=0;12>b;b++)c=h([2e3,b]),d.push(this.monthsShort(c,"")),e.push(this.months(c,"")),f.push(this.months(c,"")),f.push(this.monthsShort(c,""));for(d.sort(a),e.sort(a),f.sort(a),b=0;12>b;b++)d[b]=Z(d[b]),e[b]=Z(e[b]),f[b]=Z(f[b]);this._monthsRegex=new RegExp("^("+f.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+e.join("|")+")$","i"),this._monthsShortStrictRegex=new RegExp("^("+d.join("|")+")$","i")}function la(a){var b,c=a._a;return c&&-2===j(a).overflow&&(b=c[Cd]<0||c[Cd]>11?Cd:c[Dd]<1||c[Dd]>ba(c[Bd],c[Cd])?Dd:c[Ed]<0||c[Ed]>24||24===c[Ed]&&(0!==c[Fd]||0!==c[Gd]||0!==c[Hd])?Ed:c[Fd]<0||c[Fd]>59?Fd:c[Gd]<0||c[Gd]>59?Gd:c[Hd]<0||c[Hd]>999?Hd:-1,j(a)._overflowDayOfYear&&(Bd>b||b>Dd)&&(b=Dd),j(a)._overflowWeeks&&-1===b&&(b=Id),j(a)._overflowWeekday&&-1===b&&(b=Jd),j(a).overflow=b),a}function ma(a){var b,c,d,e,f,g,h=a._i,i=Pd.exec(h)||Qd.exec(h);if(i){for(j(a).iso=!0,b=0,c=Sd.length;c>b;b++)if(Sd[b][1].exec(i[1])){e=Sd[b][0],d=Sd[b][2]!==!1;break}if(null==e)return void(a._isValid=!1);if(i[3]){for(b=0,c=Td.length;c>b;b++)if(Td[b][1].exec(i[3])){f=(i[2]||" ")+Td[b][0];break}if(null==f)return void(a._isValid=!1)}if(!d&&null!=f)return void(a._isValid=!1);if(i[4]){if(!Rd.exec(i[4]))return void(a._isValid=!1);g="Z"}a._f=e+(f||"")+(g||""),Ba(a)}else a._isValid=!1}function na(b){var c=Ud.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ma(b),void(b._isValid===!1&&(delete b._isValid,a.createFromInputFallback(b))))}function oa(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 100>a&&a>=0&&isFinite(h.getFullYear())&&h.setFullYear(a),h}function pa(a){var b=new Date(Date.UTC.apply(null,arguments));return 100>a&&a>=0&&isFinite(b.getUTCFullYear())&&b.setUTCFullYear(a),b}function qa(a){return ra(a)?366:365}function ra(a){return a%4===0&&a%100!==0||a%400===0}function sa(){return ra(this.year())}function ta(a,b,c){var d=7+b-c,e=(7+pa(a,0,d).getUTCDay()-b)%7;return-e+d-1}function ua(a,b,c,d,e){var f,g,h=(7+c-d)%7,i=ta(a,d,e),j=1+7*(b-1)+h+i;return 0>=j?(f=a-1,g=qa(f)+j):j>qa(a)?(f=a+1,g=j-qa(a)):(f=a,g=j),{year:f,dayOfYear:g}}function va(a,b,c){var d,e,f=ta(a.year(),b,c),g=Math.floor((a.dayOfYear()-f-1)/7)+1;return 1>g?(e=a.year()-1,d=g+wa(e,b,c)):g>wa(a.year(),b,c)?(d=g-wa(a.year(),b,c),e=a.year()+1):(e=a.year(),d=g),{week:d,year:e}}function wa(a,b,c){var d=ta(a,b,c),e=ta(a+1,b,c);return(qa(a)-d+e)/7}function xa(a,b,c){return null!=a?a:null!=b?b:c}function ya(b){var c=new Date(a.now());return b._useUTC?[c.getUTCFullYear(),c.getUTCMonth(),c.getUTCDate()]:[c.getFullYear(),c.getMonth(),c.getDate()]}function za(a){var b,c,d,e,f=[];if(!a._d){for(d=ya(a),a._w&&null==a._a[Dd]&&null==a._a[Cd]&&Aa(a),a._dayOfYear&&(e=xa(a._a[Bd],d[Bd]),a._dayOfYear>qa(e)&&(j(a)._overflowDayOfYear=!0),c=pa(e,0,a._dayOfYear),a._a[Cd]=c.getUTCMonth(),a._a[Dd]=c.getUTCDate()),b=0;3>b&&null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7>b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[Ed]&&0===a._a[Fd]&&0===a._a[Gd]&&0===a._a[Hd]&&(a._nextDay=!0,a._a[Ed]=0),a._d=(a._useUTC?pa:oa).apply(null,f),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&&(a._a[Ed]=24)}}function Aa(a){var b,c,d,e,f,g,h,i;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=xa(b.GG,a._a[Bd],va(Ja(),1,4).year),d=xa(b.W,1),e=xa(b.E,1),(1>e||e>7)&&(i=!0)):(f=a._locale._week.dow,g=a._locale._week.doy,c=xa(b.gg,a._a[Bd],va(Ja(),f,g).year),d=xa(b.w,1),null!=b.d?(e=b.d,(0>e||e>6)&&(i=!0)):null!=b.e?(e=b.e+f,(b.e<0||b.e>6)&&(i=!0)):e=f),1>d||d>wa(c,f,g)?j(a)._overflowWeeks=!0:null!=i?j(a)._overflowWeekday=!0:(h=ua(c,d,e,f,g),a._a[Bd]=h.year,a._dayOfYear=h.dayOfYear)}function Ba(b){if(b._f===a.ISO_8601)return void ma(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=""+b._i,i=h.length,k=0;for(e=V(b._f,b._locale).match(ed)||[],c=0;c<e.length;c++)f=e[c],d=(h.match(X(f,b))||[])[0],d&&(g=h.substr(0,h.indexOf(d)),g.length>0&&j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),hd[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),aa(f,d,b)):b._strict&&!d&&j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length>0&&j(b).unusedInput.push(h),j(b).bigHour===!0&&b._a[Ed]<=12&&b._a[Ed]>0&&(j(b).bigHour=void 0),b._a[Ed]=Ca(b._locale,b._a[Ed],b._meridiem),za(b),la(b)}function Ca(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&&12>b&&(b+=12),d||12!==b||(b=0),b):b}function Da(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e<a._f.length;e++)f=0,b=n({},a),null!=a._useUTC&&(b._useUTC=a._useUTC),b._f=a._f[e],Ba(b),k(b)&&(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d>f)&&(d=f,c=b));g(a,c||b)}function Ea(a){if(!a._d){var b=L(a._i);a._a=e([b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],function(a){return a&&parseInt(a,10)}),za(a)}}function Fa(a){var b=new o(la(Ga(a)));return b._nextDay&&(b.add(1,"d"),b._nextDay=void 0),b}function Ga(a){var b=a._i,e=a._f;return a._locale=a._locale||H(a._l),null===b||void 0===e&&""===b?l({nullInput:!0}):("string"==typeof b&&(a._i=b=a._locale.preparse(b)),p(b)?new o(la(b)):(c(e)?Da(a):e?Ba(a):d(b)?a._d=b:Ha(a),k(a)||(a._d=null),a))}function Ha(b){var f=b._i;void 0===f?b._d=new Date(a.now()):d(f)?b._d=new Date(+f):"string"==typeof f?na(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),za(b)):"object"==typeof f?Ea(b):"number"==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ia(a,b,c,d,e){var f={};return"boolean"==typeof c&&(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,Fa(f)}function Ja(a,b,c,d){return Ia(a,b,c,d,!1)}function Ka(a,b){var d,e;if(1===b.length&&c(b[0])&&(b=b[0]),!b.length)return Ja();for(d=b[0],e=1;e<b.length;++e)(!b[e].isValid()||b[e][a](d))&&(d=b[e]);return d}function La(){var a=[].slice.call(arguments,0);return Ka("isBefore",a)}function Ma(){var a=[].slice.call(arguments,0);return Ka("isAfter",a)}function Na(a){var b=L(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=H(),this._bubble()}function Oa(a){return a instanceof Na}function Pa(a,b){R(a,0,0,function(){var a=this.utcOffset(),c="+";return 0>a&&(a=-a,c="-"),c+Q(~~(a/60),2)+b+Q(~~a%60,2)})}function Qa(a,b){var c=(b||"").match(a)||[],d=c[c.length-1]||[],e=(d+"").match(Zd)||["-",0,0],f=+(60*e[1])+r(e[2]);return"+"===e[0]?f:-f}function Ra(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(p(b)||d(b)?+b:+Ja(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Ja(b).local()}function Sa(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Ta(b,c){var d,e=this._offset||0;return this.isValid()?null!=b?("string"==typeof b?b=Qa(wd,b):Math.abs(b)<16&&(b=60*b),!this._isUTC&&c&&(d=Sa(this)),this._offset=b,this._isUTC=!0,null!=d&&this.add(d,"m"),e!==b&&(!c||this._changeInProgress?ib(this,cb(b-e,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Sa(this):null!=b?this:NaN}function Ua(a,b){return null!=a?("string"!=typeof a&&(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Va(a){return this.utcOffset(0,a)}function Wa(a){return this._isUTC&&(this.utcOffset(0,a),this._isUTC=!1,a&&this.subtract(Sa(this),"m")),this}function Xa(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Qa(vd,this._i)),this}function Ya(a){return this.isValid()?(a=a?Ja(a).utcOffset():0,(this.utcOffset()-a)%60===0):!1}function Za(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function $a(){if(!m(this._isDSTShifted))return this._isDSTShifted;var a={};if(n(a,this),a=Ga(a),a._a){var b=a._isUTC?h(a._a):Ja(a._a);this._isDSTShifted=this.isValid()&&s(a._a,b.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function _a(){return this.isValid()?!this._isUTC:!1}function ab(){return this.isValid()?this._isUTC:!1}function bb(){return this.isValid()?this._isUTC&&0===this._offset:!1}function cb(a,b){var c,d,e,g=a,h=null;return Oa(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=$d.exec(a))?(c="-"===h[1]?-1:1,g={y:0,d:r(h[Dd])*c,h:r(h[Ed])*c,m:r(h[Fd])*c,s:r(h[Gd])*c,ms:r(h[Hd])*c}):(h=_d.exec(a))?(c="-"===h[1]?-1:1,g={y:db(h[2],c),M:db(h[3],c),w:db(h[4],c),d:db(h[5],c),h:db(h[6],c),m:db(h[7],c),s:db(h[8],c)}):null==g?g={}:"object"==typeof g&&("from"in g||"to"in g)&&(e=fb(Ja(g.from),Ja(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Na(g),Oa(a)&&f(a,"_locale")&&(d._locale=a._locale),d}function db(a,b){var c=a&&parseFloat(a.replace(",","."));return(isNaN(c)?0:c)*b}function eb(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function fb(a,b){var c;return a.isValid()&&b.isValid()?(b=Ra(b,a),a.isBefore(b)?c=eb(a,b):(c=eb(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c):{milliseconds:0,months:0}}function gb(a){return 0>a?-1*Math.round(-1*a):Math.round(a)}function hb(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(v(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period)."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=cb(c,d),ib(this,e,a),this}}function ib(b,c,d,e){var f=c._milliseconds,g=gb(c._days),h=gb(c._months);b.isValid()&&(e=null==e?!0:e,f&&b._d.setTime(+b._d+f*d),g&&O(b,"Date",N(b,"Date")+g*d),h&&fa(b,N(b,"Month")+h*d),e&&a.updateOffset(b,g||h))}function jb(a,b){var c=a||Ja(),d=Ra(c,this).startOf("day"),e=this.diff(d,"days",!0),f=-6>e?"sameElse":-1>e?"lastWeek":0>e?"lastDay":1>e?"sameDay":2>e?"nextDay":7>e?"nextWeek":"sameElse",g=b&&(w(b[f])?b[f]():b[f]);return this.format(g||this.localeData().calendar(f,this,Ja(c)))}function kb(){return new o(this)}function lb(a,b){var c=p(a)?a:Ja(a);return this.isValid()&&c.isValid()?(b=K(m(b)?"millisecond":b),"millisecond"===b?+this>+c:+c<+this.clone().startOf(b)):!1}function mb(a,b){var c=p(a)?a:Ja(a);return this.isValid()&&c.isValid()?(b=K(m(b)?"millisecond":b),"millisecond"===b?+c>+this:+this.clone().endOf(b)<+c):!1}function nb(a,b,c){return this.isAfter(a,c)&&this.isBefore(b,c)}function ob(a,b){var c,d=p(a)?a:Ja(a);return this.isValid()&&d.isValid()?(b=K(b||"millisecond"),"millisecond"===b?+this===+d:(c=+d,+this.clone().startOf(b)<=c&&c<=+this.clone().endOf(b))):!1}function pb(a,b){return this.isSame(a,b)||this.isAfter(a,b)}function qb(a,b){return this.isSame(a,b)||this.isBefore(a,b)}function rb(a,b,c){var d,e,f,g;return this.isValid()?(d=Ra(a,this),d.isValid()?(e=6e4*(d.utcOffset()-this.utcOffset()),b=K(b),"year"===b||"month"===b||"quarter"===b?(g=sb(this,d),"quarter"===b?g/=3:"year"===b&&(g/=12)):(f=this-d,g="second"===b?f/1e3:"minute"===b?f/6e4:"hour"===b?f/36e5:"day"===b?(f-e)/864e5:"week"===b?(f-e)/6048e5:f),c?g:q(g)):NaN):NaN}function sb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,"months");return 0>b-f?(c=a.clone().add(e-1,"months"),d=(b-f)/(f-c)):(c=a.clone().add(e+1,"months"),d=(b-f)/(c-f)),-(e+d)}function tb(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function ub(){var a=this.clone().utc();return 0<a.year()&&a.year()<=9999?w(Date.prototype.toISOString)?this.toDate().toISOString():U(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):U(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function vb(b){var c=U(this,b||a.defaultFormat);return this.localeData().postformat(c)}function wb(a,b){return this.isValid()&&(p(a)&&a.isValid()||Ja(a).isValid())?cb({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function xb(a){return this.from(Ja(),a)}function yb(a,b){return this.isValid()&&(p(a)&&a.isValid()||Ja(a).isValid())?cb({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function zb(a){return this.to(Ja(),a)}function Ab(a){var b;return void 0===a?this._locale._abbr:(b=H(a),null!=b&&(this._locale=b),this)}function Bb(){return this._locale}function Cb(a){switch(a=K(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a&&this.weekday(0),"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this}function Db(a){return a=K(a),void 0===a||"millisecond"===a?this:this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms")}function Eb(){return+this._d-6e4*(this._offset||0)}function Fb(){return Math.floor(+this/1e3)}function Gb(){return this._offset?new Date(+this):this._d}function Hb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function Ib(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Jb(){return this.isValid()?this.toISOString():null}function Kb(){return k(this)}function Lb(){return g({},j(this))}function Mb(){return j(this).overflow}function Nb(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Ob(a,b){R(0,[a,a.length],0,b)}function Pb(a){return Tb.call(this,a,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Qb(a){return Tb.call(this,a,this.isoWeek(),this.isoWeekday(),1,4)}function Rb(){return wa(this.year(),1,4)}function Sb(){var a=this.localeData()._week;return wa(this.year(),a.dow,a.doy)}function Tb(a,b,c,d,e){var f;return null==a?va(this,d,e).year:(f=wa(a,d,e),b>f&&(b=f),Ub.call(this,a,b,c,d,e))}function Ub(a,b,c,d,e){var f=ua(a,b,c,d,e),g=pa(f.year,0,f.dayOfYear);return this.year(g.getUTCFullYear()),this.month(g.getUTCMonth()),this.date(g.getUTCDate()),this}function Vb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Wb(a){return va(a,this._week.dow,this._week.doy).week}function Xb(){return this._week.dow}function Yb(){return this._week.doy}function Zb(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")}function $b(a){var b=va(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")}function _b(a,b){return"string"!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),"number"==typeof a?a:null):parseInt(a,10)}function ac(a,b){return c(this._weekdays)?this._weekdays[a.day()]:this._weekdays[this._weekdays.isFormat.test(b)?"format":"standalone"][a.day()]}function bc(a){return this._weekdaysShort[a.day()]}function cc(a){return this._weekdaysMin[a.day()]}function dc(a,b,c){var d,e,f;for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),d=0;7>d;d++){if(e=Ja([2e3,1]).day(d),c&&!this._fullWeekdaysParse[d]&&(this._fullWeekdaysParse[d]=new RegExp("^"+this.weekdays(e,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[d]=new RegExp("^"+this.weekdaysShort(e,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[d]=new RegExp("^"+this.weekdaysMin(e,"").replace(".",".?")+"$","i")),this._weekdaysParse[d]||(f="^"+this.weekdays(e,"")+"|^"+this.weekdaysShort(e,"")+"|^"+this.weekdaysMin(e,""),this._weekdaysParse[d]=new RegExp(f.replace(".",""),"i")),c&&"dddd"===b&&this._fullWeekdaysParse[d].test(a))return d;if(c&&"ddd"===b&&this._shortWeekdaysParse[d].test(a))return d;if(c&&"dd"===b&&this._minWeekdaysParse[d].test(a))return d;if(!c&&this._weekdaysParse[d].test(a))return d}}function ec(a){if(!this.isValid())return null!=a?this:NaN;var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=_b(a,this.localeData()),this.add(a-b,"d")):b}function fc(a){if(!this.isValid())return null!=a?this:NaN;var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")}function gc(a){return this.isValid()?null==a?this.day()||7:this.day(this.day()%7?a:a-7):null!=a?this:NaN}function hc(a){var b=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")}function ic(){return this.hours()%12||12}function jc(a,b){R(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function kc(a,b){return b._meridiemParse}function lc(a){return"p"===(a+"").toLowerCase().charAt(0)}function mc(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"}function nc(a,b){b[Hd]=r(1e3*("0."+a))}function oc(){return this._isUTC?"UTC":""}function pc(){return this._isUTC?"Coordinated Universal Time":""}function qc(a){return Ja(1e3*a)}function rc(){return Ja.apply(null,arguments).parseZone()}function sc(a,b,c){var d=this._calendar[a];return w(d)?d.call(b,c):d}function tc(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function uc(){return this._invalidDate}function vc(a){return this._ordinal.replace("%d",a)}function wc(a){return a}function xc(a,b,c,d){var e=this._relativeTime[c];return w(e)?e(a,b,c,d):e.replace(/%d/i,a)}function yc(a,b){var c=this._relativeTime[a>0?"future":"past"];return w(c)?c(b):c.replace(/%s/i,b)}function zc(a,b,c,d){var e=H(),f=h().set(d,b);return e[c](f,a)}function Ac(a,b,c,d,e){if("number"==typeof a&&(b=a,a=void 0),a=a||"",null!=b)return zc(a,b,c,e);var f,g=[];for(f=0;d>f;f++)g[f]=zc(a,f,c,e);return g}function Bc(a,b){return Ac(a,b,"months",12,"month")}function Cc(a,b){return Ac(a,b,"monthsShort",12,"month")}function Dc(a,b){return Ac(a,b,"weekdays",7,"day")}function Ec(a,b){return Ac(a,b,"weekdaysShort",7,"day")}function Fc(a,b){return Ac(a,b,"weekdaysMin",7,"day")}function Gc(){var a=this._data;return this._milliseconds=xe(this._milliseconds),this._days=xe(this._days),this._months=xe(this._months),a.milliseconds=xe(a.milliseconds),a.seconds=xe(a.seconds),a.minutes=xe(a.minutes),a.hours=xe(a.hours),a.months=xe(a.months),a.years=xe(a.years),this}function Hc(a,b,c,d){var e=cb(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function Ic(a,b){return Hc(this,a,b,1)}function Jc(a,b){return Hc(this,a,b,-1)}function Kc(a){return 0>a?Math.floor(a):Math.ceil(a)}function Lc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f>=0&&g>=0&&h>=0||0>=f&&0>=g&&0>=h||(f+=864e5*Kc(Nc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=q(f/1e3),i.seconds=a%60,b=q(a/60),i.minutes=b%60,c=q(b/60),i.hours=c%24,g+=q(c/24),e=q(Mc(g)),h+=e,g-=Kc(Nc(e)),d=q(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function Mc(a){return 4800*a/146097}function Nc(a){return 146097*a/4800}function Oc(a){var b,c,d=this._milliseconds;if(a=K(a),"month"===a||"year"===a)return b=this._days+d/864e5,c=this._months+Mc(b),"month"===a?c:c/12;switch(b=this._days+Math.round(Nc(this._months)),a){case"week":return b/7+d/6048e5;case"day":return b+d/864e5;case"hour":return 24*b+d/36e5;case"minute":return 1440*b+d/6e4;case"second":return 86400*b+d/1e3;case"millisecond":return Math.floor(864e5*b)+d;default:throw new Error("Unknown unit "+a)}}function Pc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*r(this._months/12)}function Qc(a){return function(){return this.as(a)}}function Rc(a){return a=K(a),this[a+"s"]()}function Sc(a){return function(){return this._data[a]}}function Tc(){return q(this.days()/7)}function Uc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Vc(a,b,c){var d=cb(a).abs(),e=Ne(d.as("s")),f=Ne(d.as("m")),g=Ne(d.as("h")),h=Ne(d.as("d")),i=Ne(d.as("M")),j=Ne(d.as("y")),k=e<Oe.s&&["s",e]||1>=f&&["m"]||f<Oe.m&&["mm",f]||1>=g&&["h"]||g<Oe.h&&["hh",g]||1>=h&&["d"]||h<Oe.d&&["dd",h]||1>=i&&["M"]||i<Oe.M&&["MM",i]||1>=j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,Uc.apply(null,k)}function Wc(a,b){return void 0===Oe[a]?!1:void 0===b?Oe[a]:(Oe[a]=b,!0)}function Xc(a){var b=this.localeData(),c=Vc(this,!a,b);return a&&(c=b.pastFuture(+this,c)),b.postformat(c)}function Yc(){var a,b,c,d=Pe(this._milliseconds)/1e3,e=Pe(this._days),f=Pe(this._months);a=q(d/60),b=q(a/60),d%=60,a%=60,c=q(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0>m?"-":"")+"P"+(g?g+"Y":"")+(h?h+"M":"")+(i?i+"D":"")+(j||k||l?"T":"")+(j?j+"H":"")+(k?k+"M":"")+(l?l+"S":""):"P0D"}var Zc,$c=a.momentProperties=[],_c=!1,ad={};a.suppressDeprecationWarnings=!1;var bd,cd={},dd={},ed=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,fd=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,gd={},hd={},id=/\d/,jd=/\d\d/,kd=/\d{3}/,ld=/\d{4}/,md=/[+-]?\d{6}/,nd=/\d\d?/,od=/\d\d\d\d?/,pd=/\d\d\d\d\d\d?/,qd=/\d{1,3}/,rd=/\d{1,4}/,sd=/[+-]?\d{1,6}/,td=/\d+/,ud=/[+-]?\d+/,vd=/Z|[+-]\d\d:?\d\d/gi,wd=/Z|[+-]\d\d(?::?\d\d)?/gi,xd=/[+-]?\d+(\.\d{1,3})?/,yd=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,zd={},Ad={},Bd=0,Cd=1,Dd=2,Ed=3,Fd=4,Gd=5,Hd=6,Id=7,Jd=8;R("M",["MM",2],"Mo",function(){return this.month()+1}),R("MMM",0,0,function(a){return this.localeData().monthsShort(this,a)}),R("MMMM",0,0,function(a){return this.localeData().months(this,a)}),J("month","M"),W("M",nd),W("MM",nd,jd),W("MMM",function(a,b){return b.monthsShortRegex(a)}),W("MMMM",function(a,b){return b.monthsRegex(a)}),$(["M","MM"],function(a,b){b[Cd]=r(a)-1}),$(["MMM","MMMM"],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[Cd]=e:j(c).invalidMonth=a});var Kd=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,Ld="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Md="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Nd=yd,Od=yd,Pd=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Qd=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Rd=/Z|[+-]\d\d(?::?\d\d)?/,Sd=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Td=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Ud=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=u("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i+(a._useUTC?" UTC":""))}),R("Y",0,0,function(){var a=this.year();return 9999>=a?""+a:"+"+a}),R(0,["YY",2],0,function(){return this.year()%100}),R(0,["YYYY",4],0,"year"),R(0,["YYYYY",5],0,"year"),R(0,["YYYYYY",6,!0],0,"year"),J("year","y"),W("Y",ud),W("YY",nd,jd),W("YYYY",rd,ld),W("YYYYY",sd,md),W("YYYYYY",sd,md),$(["YYYYY","YYYYYY"],Bd),$("YYYY",function(b,c){c[Bd]=2===b.length?a.parseTwoDigitYear(b):r(b);
}),$("YY",function(b,c){c[Bd]=a.parseTwoDigitYear(b)}),$("Y",function(a,b){b[Bd]=parseInt(a,10)}),a.parseTwoDigitYear=function(a){return r(a)+(r(a)>68?1900:2e3)};var Vd=M("FullYear",!1);a.ISO_8601=function(){};var Wd=u("moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var a=Ja.apply(null,arguments);return this.isValid()&&a.isValid()?this>a?this:a:l()}),Xd=u("moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var a=Ja.apply(null,arguments);return this.isValid()&&a.isValid()?a>this?this:a:l()}),Yd=function(){return Date.now?Date.now():+new Date};Pa("Z",":"),Pa("ZZ",""),W("Z",wd),W("ZZ",wd),$(["Z","ZZ"],function(a,b,c){c._useUTC=!0,c._tzm=Qa(wd,a)});var Zd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var $d=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/,_d=/^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/;cb.fn=Na.prototype;var ae=hb(1,"add"),be=hb(-1,"subtract");a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var ce=u("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(a){return void 0===a?this.localeData():this.locale(a)});R(0,["gg",2],0,function(){return this.weekYear()%100}),R(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Ob("gggg","weekYear"),Ob("ggggg","weekYear"),Ob("GGGG","isoWeekYear"),Ob("GGGGG","isoWeekYear"),J("weekYear","gg"),J("isoWeekYear","GG"),W("G",ud),W("g",ud),W("GG",nd,jd),W("gg",nd,jd),W("GGGG",rd,ld),W("gggg",rd,ld),W("GGGGG",sd,md),W("ggggg",sd,md),_(["gggg","ggggg","GGGG","GGGGG"],function(a,b,c,d){b[d.substr(0,2)]=r(a)}),_(["gg","GG"],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),R("Q",0,"Qo","quarter"),J("quarter","Q"),W("Q",id),$("Q",function(a,b){b[Cd]=3*(r(a)-1)}),R("w",["ww",2],"wo","week"),R("W",["WW",2],"Wo","isoWeek"),J("week","w"),J("isoWeek","W"),W("w",nd),W("ww",nd,jd),W("W",nd),W("WW",nd,jd),_(["w","ww","W","WW"],function(a,b,c,d){b[d.substr(0,1)]=r(a)});var de={dow:0,doy:6};R("D",["DD",2],"Do","date"),J("date","D"),W("D",nd),W("DD",nd,jd),W("Do",function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),$(["D","DD"],Dd),$("Do",function(a,b){b[Dd]=r(a.match(nd)[0],10)});var ee=M("Date",!0);R("d",0,"do","day"),R("dd",0,0,function(a){return this.localeData().weekdaysMin(this,a)}),R("ddd",0,0,function(a){return this.localeData().weekdaysShort(this,a)}),R("dddd",0,0,function(a){return this.localeData().weekdays(this,a)}),R("e",0,0,"weekday"),R("E",0,0,"isoWeekday"),J("day","d"),J("weekday","e"),J("isoWeekday","E"),W("d",nd),W("e",nd),W("E",nd),W("dd",yd),W("ddd",yd),W("dddd",yd),_(["dd","ddd","dddd"],function(a,b,c,d){var e=c._locale.weekdaysParse(a,d,c._strict);null!=e?b.d=e:j(c).invalidWeekday=a}),_(["d","e","E"],function(a,b,c,d){b[d]=r(a)});var fe="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ge="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),he="Su_Mo_Tu_We_Th_Fr_Sa".split("_");R("DDD",["DDDD",3],"DDDo","dayOfYear"),J("dayOfYear","DDD"),W("DDD",qd),W("DDDD",kd),$(["DDD","DDDD"],function(a,b,c){c._dayOfYear=r(a)}),R("H",["HH",2],0,"hour"),R("h",["hh",2],0,ic),R("hmm",0,0,function(){return""+ic.apply(this)+Q(this.minutes(),2)}),R("hmmss",0,0,function(){return""+ic.apply(this)+Q(this.minutes(),2)+Q(this.seconds(),2)}),R("Hmm",0,0,function(){return""+this.hours()+Q(this.minutes(),2)}),R("Hmmss",0,0,function(){return""+this.hours()+Q(this.minutes(),2)+Q(this.seconds(),2)}),jc("a",!0),jc("A",!1),J("hour","h"),W("a",kc),W("A",kc),W("H",nd),W("h",nd),W("HH",nd,jd),W("hh",nd,jd),W("hmm",od),W("hmmss",pd),W("Hmm",od),W("Hmmss",pd),$(["H","HH"],Ed),$(["a","A"],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),$(["h","hh"],function(a,b,c){b[Ed]=r(a),j(c).bigHour=!0}),$("hmm",function(a,b,c){var d=a.length-2;b[Ed]=r(a.substr(0,d)),b[Fd]=r(a.substr(d)),j(c).bigHour=!0}),$("hmmss",function(a,b,c){var d=a.length-4,e=a.length-2;b[Ed]=r(a.substr(0,d)),b[Fd]=r(a.substr(d,2)),b[Gd]=r(a.substr(e)),j(c).bigHour=!0}),$("Hmm",function(a,b,c){var d=a.length-2;b[Ed]=r(a.substr(0,d)),b[Fd]=r(a.substr(d))}),$("Hmmss",function(a,b,c){var d=a.length-4,e=a.length-2;b[Ed]=r(a.substr(0,d)),b[Fd]=r(a.substr(d,2)),b[Gd]=r(a.substr(e))});var ie=/[ap]\.?m?\.?/i,je=M("Hours",!0);R("m",["mm",2],0,"minute"),J("minute","m"),W("m",nd),W("mm",nd,jd),$(["m","mm"],Fd);var ke=M("Minutes",!1);R("s",["ss",2],0,"second"),J("second","s"),W("s",nd),W("ss",nd,jd),$(["s","ss"],Gd);var le=M("Seconds",!1);R("S",0,0,function(){return~~(this.millisecond()/100)}),R(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),R(0,["SSS",3],0,"millisecond"),R(0,["SSSS",4],0,function(){return 10*this.millisecond()}),R(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),R(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),R(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),R(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),R(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),J("millisecond","ms"),W("S",qd,id),W("SS",qd,jd),W("SSS",qd,kd);var me;for(me="SSSS";me.length<=9;me+="S")W(me,td);for(me="S";me.length<=9;me+="S")$(me,nc);var ne=M("Milliseconds",!1);R("z",0,0,"zoneAbbr"),R("zz",0,0,"zoneName");var oe=o.prototype;oe.add=ae,oe.calendar=jb,oe.clone=kb,oe.diff=rb,oe.endOf=Db,oe.format=vb,oe.from=wb,oe.fromNow=xb,oe.to=yb,oe.toNow=zb,oe.get=P,oe.invalidAt=Mb,oe.isAfter=lb,oe.isBefore=mb,oe.isBetween=nb,oe.isSame=ob,oe.isSameOrAfter=pb,oe.isSameOrBefore=qb,oe.isValid=Kb,oe.lang=ce,oe.locale=Ab,oe.localeData=Bb,oe.max=Xd,oe.min=Wd,oe.parsingFlags=Lb,oe.set=P,oe.startOf=Cb,oe.subtract=be,oe.toArray=Hb,oe.toObject=Ib,oe.toDate=Gb,oe.toISOString=ub,oe.toJSON=Jb,oe.toString=tb,oe.unix=Fb,oe.valueOf=Eb,oe.creationData=Nb,oe.year=Vd,oe.isLeapYear=sa,oe.weekYear=Pb,oe.isoWeekYear=Qb,oe.quarter=oe.quarters=Vb,oe.month=ga,oe.daysInMonth=ha,oe.week=oe.weeks=Zb,oe.isoWeek=oe.isoWeeks=$b,oe.weeksInYear=Sb,oe.isoWeeksInYear=Rb,oe.date=ee,oe.day=oe.days=ec,oe.weekday=fc,oe.isoWeekday=gc,oe.dayOfYear=hc,oe.hour=oe.hours=je,oe.minute=oe.minutes=ke,oe.second=oe.seconds=le,oe.millisecond=oe.milliseconds=ne,oe.utcOffset=Ta,oe.utc=Va,oe.local=Wa,oe.parseZone=Xa,oe.hasAlignedHourOffset=Ya,oe.isDST=Za,oe.isDSTShifted=$a,oe.isLocal=_a,oe.isUtcOffset=ab,oe.isUtc=bb,oe.isUTC=bb,oe.zoneAbbr=oc,oe.zoneName=pc,oe.dates=u("dates accessor is deprecated. Use date instead.",ee),oe.months=u("months accessor is deprecated. Use month instead",ga),oe.years=u("years accessor is deprecated. Use year instead",Vd),oe.zone=u("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",Ua);var pe=oe,qe={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},re={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},se="Invalid date",te="%d",ue=/\d{1,2}/,ve={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},we=A.prototype;we._calendar=qe,we.calendar=sc,we._longDateFormat=re,we.longDateFormat=tc,we._invalidDate=se,we.invalidDate=uc,we._ordinal=te,we.ordinal=vc,we._ordinalParse=ue,we.preparse=wc,we.postformat=wc,we._relativeTime=ve,we.relativeTime=xc,we.pastFuture=yc,we.set=y,we.months=ca,we._months=Ld,we.monthsShort=da,we._monthsShort=Md,we.monthsParse=ea,we._monthsRegex=Od,we.monthsRegex=ja,we._monthsShortRegex=Nd,we.monthsShortRegex=ia,we.week=Wb,we._week=de,we.firstDayOfYear=Yb,we.firstDayOfWeek=Xb,we.weekdays=ac,we._weekdays=fe,we.weekdaysMin=cc,we._weekdaysMin=he,we.weekdaysShort=bc,we._weekdaysShort=ge,we.weekdaysParse=dc,we.isPM=lc,we._meridiemParse=ie,we.meridiem=mc,E("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===r(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),a.lang=u("moment.lang is deprecated. Use moment.locale instead.",E),a.langData=u("moment.langData is deprecated. Use moment.localeData instead.",H);var xe=Math.abs,ye=Qc("ms"),ze=Qc("s"),Ae=Qc("m"),Be=Qc("h"),Ce=Qc("d"),De=Qc("w"),Ee=Qc("M"),Fe=Qc("y"),Ge=Sc("milliseconds"),He=Sc("seconds"),Ie=Sc("minutes"),Je=Sc("hours"),Ke=Sc("days"),Le=Sc("months"),Me=Sc("years"),Ne=Math.round,Oe={s:45,m:45,h:22,d:26,M:11},Pe=Math.abs,Qe=Na.prototype;Qe.abs=Gc,Qe.add=Ic,Qe.subtract=Jc,Qe.as=Oc,Qe.asMilliseconds=ye,Qe.asSeconds=ze,Qe.asMinutes=Ae,Qe.asHours=Be,Qe.asDays=Ce,Qe.asWeeks=De,Qe.asMonths=Ee,Qe.asYears=Fe,Qe.valueOf=Pc,Qe._bubble=Lc,Qe.get=Rc,Qe.milliseconds=Ge,Qe.seconds=He,Qe.minutes=Ie,Qe.hours=Je,Qe.days=Ke,Qe.weeks=Tc,Qe.months=Le,Qe.years=Me,Qe.humanize=Xc,Qe.toISOString=Yc,Qe.toString=Yc,Qe.toJSON=Yc,Qe.locale=Ab,Qe.localeData=Bb,Qe.toIsoString=u("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Yc),Qe.lang=ce,R("X",0,0,"unix"),R("x",0,0,"valueOf"),W("x",ud),W("X",xd),$("X",function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),$("x",function(a,b,c){c._d=new Date(r(a))}),a.version="2.12.0",b(Ja),a.fn=pe,a.min=La,a.max=Ma,a.now=Yd,a.utc=h,a.unix=qc,a.months=Bc,a.isDate=d,a.locale=E,a.invalid=l,a.duration=cb,a.isMoment=p,a.weekdays=Dc,a.parseZone=rc,a.localeData=H,a.isDuration=Oa,a.monthsShort=Cc,a.weekdaysMin=Fc,a.defineLocale=F,a.updateLocale=G,a.locales=I,a.weekdaysShort=Ec,a.normalizeUnits=K,a.relativeTimeThreshold=Wc,a.prototype=pe;var Re=a;return Re});
// /Users/michaelmartinez/webviewer/Content/js/moment-timezone.min.js
//! moment-timezone.js
//! version : 0.5.13
//! Copyright (c) JS Foundation and other contributors
//! license : MIT
//! github.com/moment/moment-timezone
!function(a,b){"use strict";"function"==typeof define&&define.amd?define(["moment"],b):"object"==typeof module&&module.exports?module.exports=b(require("moment")):b(a.moment)}(this,function(a){"use strict";function b(a){return a>96?a-87:a>64?a-29:a-48}function c(a){var c,d=0,e=a.split("."),f=e[0],g=e[1]||"",h=1,i=0,j=1;for(45===a.charCodeAt(0)&&(d=1,j=-1),d;d<f.length;d++)c=b(f.charCodeAt(d)),i=60*i+c;for(d=0;d<g.length;d++)h/=60,c=b(g.charCodeAt(d)),i+=c*h;return i*j}function d(a){for(var b=0;b<a.length;b++)a[b]=c(a[b])}function e(a,b){for(var c=0;c<b;c++)a[c]=Math.round((a[c-1]||0)+6e4*a[c]);a[b-1]=1/0}function f(a,b){var c,d=[];for(c=0;c<b.length;c++)d[c]=a[b[c]];return d}function g(a){var b=a.split("|"),c=b[2].split(" "),g=b[3].split(""),h=b[4].split(" ");return d(c),d(g),d(h),e(h,g.length),{name:b[0],abbrs:f(b[1].split(" "),g),offsets:f(c,g),untils:h,population:0|b[5]}}function h(a){a&&this._set(g(a))}function i(a){var b=a.toTimeString(),c=b.match(/\([a-z ]+\)/i);c&&c[0]?(c=c[0].match(/[A-Z]/g),c=c?c.join(""):void 0):(c=b.match(/[A-Z]{3,5}/g),c=c?c[0]:void 0),"GMT"===c&&(c=void 0),this.at=+a,this.abbr=c,this.offset=a.getTimezoneOffset()}function j(a){this.zone=a,this.offsetScore=0,this.abbrScore=0}function k(a,b){for(var c,d;d=6e4*((b.at-a.at)/12e4|0);)c=new i(new Date(a.at+d)),c.offset===a.offset?a=c:b=c;return a}function l(){var a,b,c,d=(new Date).getFullYear()-2,e=new i(new Date(d,0,1)),f=[e];for(c=1;c<48;c++)b=new i(new Date(d,c,1)),b.offset!==e.offset&&(a=k(e,b),f.push(a),f.push(new i(new Date(a.at+6e4)))),e=b;for(c=0;c<4;c++)f.push(new i(new Date(d+c,0,1))),f.push(new i(new Date(d+c,6,1)));return f}function m(a,b){return a.offsetScore!==b.offsetScore?a.offsetScore-b.offsetScore:a.abbrScore!==b.abbrScore?a.abbrScore-b.abbrScore:b.zone.population-a.zone.population}function n(a,b){var c,e;for(d(b),c=0;c<b.length;c++)e=b[c],I[e]=I[e]||{},I[e][a]=!0}function o(a){var b,c,d,e=a.length,f={},g=[];for(b=0;b<e;b++){d=I[a[b].offset]||{};for(c in d)d.hasOwnProperty(c)&&(f[c]=!0)}for(b in f)f.hasOwnProperty(b)&&g.push(H[b]);return g}function p(){try{var a=Intl.DateTimeFormat().resolvedOptions().timeZone;if(a){var b=H[r(a)];if(b)return b;z("Moment Timezone found "+a+" from the Intl api, but did not have that data loaded.")}}catch(c){}var d,e,f,g=l(),h=g.length,i=o(g),k=[];for(e=0;e<i.length;e++){for(d=new j(t(i[e]),h),f=0;f<h;f++)d.scoreOffsetAt(g[f]);k.push(d)}return k.sort(m),k.length>0?k[0].zone.name:void 0}function q(a){return D&&!a||(D=p()),D}function r(a){return(a||"").toLowerCase().replace(/\//g,"_")}function s(a){var b,c,d,e;for("string"==typeof a&&(a=[a]),b=0;b<a.length;b++)d=a[b].split("|"),c=d[0],e=r(c),F[e]=a[b],H[e]=c,d[5]&&n(e,d[2].split(" "))}function t(a,b){a=r(a);var c,d=F[a];return d instanceof h?d:"string"==typeof d?(d=new h(d),F[a]=d,d):G[a]&&b!==t&&(c=t(G[a],t))?(d=F[a]=new h,d._set(c),d.name=H[a],d):null}function u(){var a,b=[];for(a in H)H.hasOwnProperty(a)&&(F[a]||F[G[a]])&&H[a]&&b.push(H[a]);return b.sort()}function v(a){var b,c,d,e;for("string"==typeof a&&(a=[a]),b=0;b<a.length;b++)c=a[b].split("|"),d=r(c[0]),e=r(c[1]),G[d]=e,H[d]=c[0],G[e]=d,H[e]=c[1]}function w(a){s(a.zones),v(a.links),A.dataVersion=a.version}function x(a){return x.didShowError||(x.didShowError=!0,z("moment.tz.zoneExists('"+a+"') has been deprecated in favor of !moment.tz.zone('"+a+"')")),!!t(a)}function y(a){return!(!a._a||void 0!==a._tzm)}function z(a){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(a)}function A(b){var c=Array.prototype.slice.call(arguments,0,-1),d=arguments[arguments.length-1],e=t(d),f=a.utc.apply(null,c);return e&&!a.isMoment(b)&&y(f)&&f.add(e.parse(f),"minutes"),f.tz(d),f}function B(a){return function(){return this._z?this._z.abbr(this):a.call(this)}}function C(a){return function(){return this._z=null,a.apply(this,arguments)}}var D,E="0.5.13",F={},G={},H={},I={},J=a.version.split("."),K=+J[0],L=+J[1];(K<2||2===K&&L<6)&&z("Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js "+a.version+". See momentjs.com"),h.prototype={_set:function(a){this.name=a.name,this.abbrs=a.abbrs,this.untils=a.untils,this.offsets=a.offsets,this.population=a.population},_index:function(a){var b,c=+a,d=this.untils;for(b=0;b<d.length;b++)if(c<d[b])return b},parse:function(a){var b,c,d,e,f=+a,g=this.offsets,h=this.untils,i=h.length-1;for(e=0;e<i;e++)if(b=g[e],c=g[e+1],d=g[e?e-1:e],b<c&&A.moveAmbiguousForward?b=c:b>d&&A.moveInvalidForward&&(b=d),f<h[e]-6e4*b)return g[e];return g[i]},abbr:function(a){return this.abbrs[this._index(a)]},offset:function(a){return this.offsets[this._index(a)]}},j.prototype.scoreOffsetAt=function(a){this.offsetScore+=Math.abs(this.zone.offset(a.at)-a.offset),this.zone.abbr(a.at).replace(/[^A-Z]/g,"")!==a.abbr&&this.abbrScore++},A.version=E,A.dataVersion="",A._zones=F,A._links=G,A._names=H,A.add=s,A.link=v,A.load=w,A.zone=t,A.zoneExists=x,A.guess=q,A.names=u,A.Zone=h,A.unpack=g,A.unpackBase60=c,A.needsOffset=y,A.moveInvalidForward=!0,A.moveAmbiguousForward=!1;var M=a.fn;a.tz=A,a.defaultZone=null,a.updateOffset=function(b,c){var d,e=a.defaultZone;void 0===b._z&&(e&&y(b)&&!b._isUTC&&(b._d=a.utc(b._a)._d,b.utc().add(e.parse(b),"minutes")),b._z=e),b._z&&(d=b._z.offset(b),Math.abs(d)<16&&(d/=60),void 0!==b.utcOffset?b.utcOffset(-d,c):b.zone(d,c))},M.tz=function(b){return b?(this._z=t(b),this._z?a.updateOffset(this):z("Moment Timezone has no data for "+b+". See http://momentjs.com/timezone/docs/#/data-loading/."),this):this._z?this._z.name:void 0},M.zoneName=B(M.zoneName),M.zoneAbbr=B(M.zoneAbbr),M.utc=C(M.utc),a.tz.setDefault=function(b){return(K<2||2===K&&L<9)&&z("Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js "+a.version+"."),a.defaultZone=b?t(b):null,a};var N=a.momentProperties;return"[object Array]"===Object.prototype.toString.call(N)?(N.push("_z"),N.push("_a")):N&&(N._z=null),w({version:"2017b",zones:["Africa/Abidjan|GMT|0|0||48e5","Africa/Khartoum|EAT|-30|0||51e5","Africa/Algiers|CET|-10|0||26e5","Africa/Lagos|WAT|-10|0||17e6","Africa/Maputo|CAT|-20|0||26e5","Africa/Cairo|EET EEST|-20 -30|01010|1M2m0 gL0 e10 mn0|15e6","Africa/Casablanca|WET WEST|0 -10|0101010101010101010101010101010101010101010|1H3C0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00|32e5","Europe/Paris|CET CEST|-10 -20|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|11e6","Africa/Johannesburg|SAST|-20|0||84e5","Africa/Tripoli|EET CET CEST|-20 -10 -20|0120|1IlA0 TA0 1o00|11e5","Africa/Windhoek|WAST WAT|-20 -10|01010101010101010101010|1GQo0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0|32e4","America/Adak|HST HDT|a0 90|01010101010101010101010|1GIc0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|326","America/Anchorage|AKST AKDT|90 80|01010101010101010101010|1GIb0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|30e4","America/Santo_Domingo|AST|40|0||29e5","America/Araguaina|-03 -02|30 20|010|1IdD0 Lz0|14e4","America/Fortaleza|-03|30|0||34e5","America/Asuncion|-03 -04|30 40|01010101010101010101010|1GTf0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0|28e5","America/Panama|EST|50|0||15e5","America/Bahia|-02 -03|20 30|01|1GCq0|27e5","America/Mexico_City|CST CDT|60 50|01010101010101010101010|1GQw0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0|20e6","America/Managua|CST|60|0||22e5","America/La_Paz|-04|40|0||19e5","America/Lima|-05|50|0||11e6","America/Denver|MST MDT|70 60|01010101010101010101010|1GI90 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|26e5","America/Campo_Grande|-03 -04|30 40|01010101010101010101010|1GCr0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0|77e4","America/Cancun|CST CDT EST|60 50 50|01010102|1GQw0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4","America/Caracas|-0430 -04|4u 40|01|1QMT0|29e5","America/Chicago|CST CDT|60 50|01010101010101010101010|1GI80 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|92e5","America/Chihuahua|MST MDT|70 60|01010101010101010101010|1GQx0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0|81e4","America/Phoenix|MST|70|0||42e5","America/Los_Angeles|PST PDT|80 70|01010101010101010101010|1GIa0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|15e6","America/New_York|EST EDT|50 40|01010101010101010101010|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|21e6","America/Rio_Branco|-04 -05|40 50|01|1KLE0|31e4","America/Fort_Nelson|PST PDT MST|80 70 70|01010102|1GIa0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2","America/Halifax|AST ADT|40 30|01010101010101010101010|1GI60 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|39e4","America/Godthab|-03 -02|30 20|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|17e3","America/Grand_Turk|EST EDT AST|50 40 40|010101012|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2","America/Havana|CST CDT|50 40|01010101010101010101010|1GQt0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0|21e5","America/Metlakatla|PST AKST AKDT|80 90 80|0121212121212121|1PAa0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|14e2","America/Miquelon|-03 -02|30 20|01010101010101010101010|1GI50 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|61e2","America/Montevideo|-02 -03|20 30|01010101|1GI40 1o10 11z0 1o10 11z0 1o10 11z0|17e5","America/Noronha|-02|20|0||30e2","America/Port-au-Prince|EST EDT|50 40|010101010101010101010|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|23e5","Antarctica/Palmer|-03 -04|30 40|010101010|1H3D0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|40","America/Santiago|-03 -04|30 40|010101010101010101010|1H3D0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0|62e5","America/Sao_Paulo|-02 -03|20 30|01010101010101010101010|1GCq0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0|20e6","Atlantic/Azores|-01 +00|10 0|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e4","America/St_Johns|NST NDT|3u 2u|01010101010101010101010|1GI5u 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|11e4","Antarctica/Casey|+11 +08|-b0 -80|010|1GAF0 blz0|10","Antarctica/Davis|+05 +07|-50 -70|01|1GAI0|70","Pacific/Port_Moresby|+10|-a0|0||25e4","Pacific/Guadalcanal|+11|-b0|0||11e4","Asia/Tashkent|+05|-50|0||23e5","Pacific/Auckland|NZDT NZST|-d0 -c0|01010101010101010101010|1GQe0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00|14e5","Asia/Baghdad|+03|-30|0||66e5","Antarctica/Troll|+00 +02|0 -20|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|40","Asia/Dhaka|+06|-60|0||16e6","Asia/Amman|EET EEST|-20 -30|010101010101010101010|1GPy0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00|25e5","Asia/Kamchatka|+12|-c0|0||18e4","Asia/Baku|+04 +05|-40 -50|010101010|1GNA0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5","Asia/Bangkok|+07|-70|0||15e6","Asia/Barnaul|+07 +06|-70 -60|010|1N7v0 3rd0","Asia/Beirut|EET EEST|-20 -30|01010101010101010101010|1GNy0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|22e5","Asia/Manila|+08|-80|0||24e6","Asia/Kolkata|IST|-5u|0||15e6","Asia/Chita|+10 +08 +09|-a0 -80 -90|012|1N7s0 3re0|33e4","Asia/Ulaanbaatar|+08 +09|-80 -90|01010|1O8G0 1cJ0 1cP0 1cJ0|12e5","Asia/Shanghai|CST|-80|0||23e6","Asia/Colombo|+0530|-5u|0||22e5","Asia/Damascus|EET EEST|-20 -30|01010101010101010101010|1GPy0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0|26e5","Asia/Dili|+09|-90|0||19e4","Asia/Dubai|+04|-40|0||39e5","Asia/Famagusta|EET EEST +03|-20 -30 -30|01010101012|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0","Asia/Gaza|EET EEST|-20 -30|01010101010101010101010|1GPy0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0|18e5","Asia/Hong_Kong|HKT|-80|0||73e5","Asia/Hovd|+07 +08|-70 -80|01010|1O8H0 1cJ0 1cP0 1cJ0|81e3","Asia/Irkutsk|+09 +08|-90 -80|01|1N7t0|60e4","Europe/Istanbul|EET EEST +03|-20 -30 -30|01010101012|1GNB0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6","Asia/Jakarta|WIB|-70|0||31e6","Asia/Jayapura|WIT|-90|0||26e4","Asia/Jerusalem|IST IDT|-20 -30|01010101010101010101010|1GPA0 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0|81e4","Asia/Kabul|+0430|-4u|0||46e5","Asia/Karachi|PKT|-50|0||24e6","Asia/Kathmandu|+0545|-5J|0||12e5","Asia/Yakutsk|+10 +09|-a0 -90|01|1N7s0|28e4","Asia/Krasnoyarsk|+08 +07|-80 -70|01|1N7u0|10e5","Asia/Magadan|+12 +10 +11|-c0 -a0 -b0|012|1N7q0 3Cq0|95e3","Asia/Makassar|WITA|-80|0||15e5","Europe/Athens|EET EEST|-20 -30|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|35e5","Asia/Novosibirsk|+07 +06|-70 -60|010|1N7v0 4eN0|15e5","Asia/Omsk|+07 +06|-70 -60|01|1N7v0|12e5","Asia/Pyongyang|KST KST|-90 -8u|01|1P4D0|29e5","Asia/Rangoon|+0630|-6u|0||48e5","Asia/Sakhalin|+11 +10|-b0 -a0|010|1N7r0 3rd0|58e4","Asia/Seoul|KST|-90|0||23e6","Asia/Srednekolymsk|+12 +11|-c0 -b0|01|1N7q0|35e2","Asia/Tehran|+0330 +0430|-3u -4u|01010101010101010101010|1GLUu 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0|14e6","Asia/Tokyo|JST|-90|0||38e6","Asia/Tomsk|+07 +06|-70 -60|010|1N7v0 3Qp0|10e5","Asia/Vladivostok|+11 +10|-b0 -a0|01|1N7r0|60e4","Asia/Yekaterinburg|+06 +05|-60 -50|01|1N7w0|14e5","Europe/Lisbon|WET WEST|0 -10|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|27e5","Atlantic/Cape_Verde|-01|10|0||50e4","Australia/Sydney|AEDT AEST|-b0 -a0|01010101010101010101010|1GQg0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0|40e5","Australia/Adelaide|ACDT ACST|-au -9u|01010101010101010101010|1GQgu 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0|11e5","Australia/Brisbane|AEST|-a0|0||20e5","Australia/Darwin|ACST|-9u|0||12e4","Australia/Eucla|+0845|-8J|0||368","Australia/Lord_Howe|+11 +1030|-b0 -au|01010101010101010101010|1GQf0 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu|347","Australia/Perth|AWST|-80|0||18e5","Pacific/Easter|-05 -06|50 60|010101010101010101010|1H3D0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0|30e2","Europe/Dublin|GMT IST|0 -10|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|12e5","Pacific/Tahiti|-10|a0|0||18e4","Pacific/Niue|-11|b0|0||12e2","Etc/GMT+12|-12|c0|0|","Pacific/Galapagos|-06|60|0||25e3","Etc/GMT+7|-07|70|0|","Pacific/Pitcairn|-08|80|0||56","Pacific/Gambier|-09|90|0||125","Etc/GMT-1|+01|-10|0|","Pacific/Fakaofo|+13|-d0|0||483","Pacific/Kiritimati|+14|-e0|0||51e2","Etc/GMT-2|+02|-20|0|","Etc/UCT|UCT|0|0|","Etc/UTC|UTC|0|0|","Europe/Astrakhan|+04 +03|-40 -30|010|1N7y0 3rd0","Europe/London|GMT BST|0 -10|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|10e6","Europe/Chisinau|EET EEST|-20 -30|01010101010101010101010|1GNA0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|67e4","Europe/Kaliningrad|+03 EET|-30 -20|01|1N7z0|44e4","Europe/Volgograd|+04 +03|-40 -30|01|1N7y0|10e5","Europe/Moscow|MSK MSK|-40 -30|01|1N7y0|16e6","Europe/Saratov|+04 +03|-40 -30|010|1N7y0 5810","Europe/Simferopol|EET EEST MSK MSK|-20 -30 -40 -30|0101023|1GNB0 1qM0 11A0 1o00 11z0 1nW0|33e4","Pacific/Honolulu|HST|a0|0||37e4","MET|MET MEST|-10 -20|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0","Pacific/Chatham|+1345 +1245|-dJ -cJ|01010101010101010101010|1GQe0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00|600","Pacific/Apia|+14 +13|-e0 -d0|01010101010101010101010|1GQe0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00|37e3","Pacific/Bougainville|+10 +11|-a0 -b0|01|1NwE0|18e4","Pacific/Fiji|+13 +12|-d0 -c0|01010101010101010101010|1Goe0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0|88e4","Pacific/Guam|ChST|-a0|0||17e4","Pacific/Marquesas|-0930|9u|0||86e2","Pacific/Pago_Pago|SST|b0|0||37e2","Pacific/Norfolk|+1130 +11|-bu -b0|01|1PoCu|25e4","Pacific/Tongatapu|+13 +14|-d0 -e0|01010101010101|1S4d0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0|75e3"],links:["Africa/Abidjan|Africa/Accra","Africa/Abidjan|Africa/Bamako","Africa/Abidjan|Africa/Banjul","Africa/Abidjan|Africa/Bissau","Africa/Abidjan|Africa/Conakry","Africa/Abidjan|Africa/Dakar","Africa/Abidjan|Africa/Freetown","Africa/Abidjan|Africa/Lome","Africa/Abidjan|Africa/Monrovia","Africa/Abidjan|Africa/Nouakchott","Africa/Abidjan|Africa/Ouagadougou","Africa/Abidjan|Africa/Sao_Tome","Africa/Abidjan|Africa/Timbuktu","Africa/Abidjan|America/Danmarkshavn","Africa/Abidjan|Atlantic/Reykjavik","Africa/Abidjan|Atlantic/St_Helena","Africa/Abidjan|Etc/GMT","Africa/Abidjan|Etc/GMT+0","Africa/Abidjan|Etc/GMT-0","Africa/Abidjan|Etc/GMT0","Africa/Abidjan|Etc/Greenwich","Africa/Abidjan|GMT","Africa/Abidjan|GMT+0","Africa/Abidjan|GMT-0","Africa/Abidjan|GMT0","Africa/Abidjan|Greenwich","Africa/Abidjan|Iceland","Africa/Algiers|Africa/Tunis","Africa/Cairo|Egypt","Africa/Casablanca|Africa/El_Aaiun","Africa/Johannesburg|Africa/Maseru","Africa/Johannesburg|Africa/Mbabane","Africa/Khartoum|Africa/Addis_Ababa","Africa/Khartoum|Africa/Asmara","Africa/Khartoum|Africa/Asmera","Africa/Khartoum|Africa/Dar_es_Salaam","Africa/Khartoum|Africa/Djibouti","Africa/Khartoum|Africa/Juba","Africa/Khartoum|Africa/Kampala","Africa/Khartoum|Africa/Mogadishu","Africa/Khartoum|Africa/Nairobi","Africa/Khartoum|Indian/Antananarivo","Africa/Khartoum|Indian/Comoro","Africa/Khartoum|Indian/Mayotte","Africa/Lagos|Africa/Bangui","Africa/Lagos|Africa/Brazzaville","Africa/Lagos|Africa/Douala","Africa/Lagos|Africa/Kinshasa","Africa/Lagos|Africa/Libreville","Africa/Lagos|Africa/Luanda","Africa/Lagos|Africa/Malabo","Africa/Lagos|Africa/Ndjamena","Africa/Lagos|Africa/Niamey","Africa/Lagos|Africa/Porto-Novo","Africa/Maputo|Africa/Blantyre","Africa/Maputo|Africa/Bujumbura","Africa/Maputo|Africa/Gaborone","Africa/Maputo|Africa/Harare","Africa/Maputo|Africa/Kigali","Africa/Maputo|Africa/Lubumbashi","Africa/Maputo|Africa/Lusaka","Africa/Tripoli|Libya","America/Adak|America/Atka","America/Adak|US/Aleutian","America/Anchorage|America/Juneau","America/Anchorage|America/Nome","America/Anchorage|America/Sitka","America/Anchorage|America/Yakutat","America/Anchorage|US/Alaska","America/Campo_Grande|America/Cuiaba","America/Chicago|America/Indiana/Knox","America/Chicago|America/Indiana/Tell_City","America/Chicago|America/Knox_IN","America/Chicago|America/Matamoros","America/Chicago|America/Menominee","America/Chicago|America/North_Dakota/Beulah","America/Chicago|America/North_Dakota/Center","America/Chicago|America/North_Dakota/New_Salem","America/Chicago|America/Rainy_River","America/Chicago|America/Rankin_Inlet","America/Chicago|America/Resolute","America/Chicago|America/Winnipeg","America/Chicago|CST6CDT","America/Chicago|Canada/Central","America/Chicago|US/Central","America/Chicago|US/Indiana-Starke","America/Chihuahua|America/Mazatlan","America/Chihuahua|Mexico/BajaSur","America/Denver|America/Boise","America/Denver|America/Cambridge_Bay","America/Denver|America/Edmonton","America/Denver|America/Inuvik","America/Denver|America/Ojinaga","America/Denver|America/Shiprock","America/Denver|America/Yellowknife","America/Denver|Canada/Mountain","America/Denver|MST7MDT","America/Denver|Navajo","America/Denver|US/Mountain","America/Fortaleza|America/Argentina/Buenos_Aires","America/Fortaleza|America/Argentina/Catamarca","America/Fortaleza|America/Argentina/ComodRivadavia","America/Fortaleza|America/Argentina/Cordoba","America/Fortaleza|America/Argentina/Jujuy","America/Fortaleza|America/Argentina/La_Rioja","America/Fortaleza|America/Argentina/Mendoza","America/Fortaleza|America/Argentina/Rio_Gallegos","America/Fortaleza|America/Argentina/Salta","America/Fortaleza|America/Argentina/San_Juan","America/Fortaleza|America/Argentina/San_Luis","America/Fortaleza|America/Argentina/Tucuman","America/Fortaleza|America/Argentina/Ushuaia","America/Fortaleza|America/Belem","America/Fortaleza|America/Buenos_Aires","America/Fortaleza|America/Catamarca","America/Fortaleza|America/Cayenne","America/Fortaleza|America/Cordoba","America/Fortaleza|America/Jujuy","America/Fortaleza|America/Maceio","America/Fortaleza|America/Mendoza","America/Fortaleza|America/Paramaribo","America/Fortaleza|America/Recife","America/Fortaleza|America/Rosario","America/Fortaleza|America/Santarem","America/Fortaleza|Antarctica/Rothera","America/Fortaleza|Atlantic/Stanley","America/Fortaleza|Etc/GMT+3","America/Halifax|America/Glace_Bay","America/Halifax|America/Goose_Bay","America/Halifax|America/Moncton","America/Halifax|America/Thule","America/Halifax|Atlantic/Bermuda","America/Halifax|Canada/Atlantic","America/Havana|Cuba","America/La_Paz|America/Boa_Vista","America/La_Paz|America/Guyana","America/La_Paz|America/Manaus","America/La_Paz|America/Porto_Velho","America/La_Paz|Brazil/West","America/La_Paz|Etc/GMT+4","America/Lima|America/Bogota","America/Lima|America/Guayaquil","America/Lima|Etc/GMT+5","America/Los_Angeles|America/Dawson","America/Los_Angeles|America/Ensenada","America/Los_Angeles|America/Santa_Isabel","America/Los_Angeles|America/Tijuana","America/Los_Angeles|America/Vancouver","America/Los_Angeles|America/Whitehorse","America/Los_Angeles|Canada/Pacific","America/Los_Angeles|Canada/Yukon","America/Los_Angeles|Mexico/BajaNorte","America/Los_Angeles|PST8PDT","America/Los_Angeles|US/Pacific","America/Los_Angeles|US/Pacific-New","America/Managua|America/Belize","America/Managua|America/Costa_Rica","America/Managua|America/El_Salvador","America/Managua|America/Guatemala","America/Managua|America/Regina","America/Managua|America/Swift_Current","America/Managua|America/Tegucigalpa","America/Managua|Canada/East-Saskatchewan","America/Managua|Canada/Saskatchewan","America/Mexico_City|America/Bahia_Banderas","America/Mexico_City|America/Merida","America/Mexico_City|America/Monterrey","America/Mexico_City|Mexico/General","America/New_York|America/Detroit","America/New_York|America/Fort_Wayne","America/New_York|America/Indiana/Indianapolis","America/New_York|America/Indiana/Marengo","America/New_York|America/Indiana/Petersburg","America/New_York|America/Indiana/Vevay","America/New_York|America/Indiana/Vincennes","America/New_York|America/Indiana/Winamac","America/New_York|America/Indianapolis","America/New_York|America/Iqaluit","America/New_York|America/Kentucky/Louisville","America/New_York|America/Kentucky/Monticello","America/New_York|America/Louisville","America/New_York|America/Montreal","America/New_York|America/Nassau","America/New_York|America/Nipigon","America/New_York|America/Pangnirtung","America/New_York|America/Thunder_Bay","America/New_York|America/Toronto","America/New_York|Canada/Eastern","America/New_York|EST5EDT","America/New_York|US/East-Indiana","America/New_York|US/Eastern","America/New_York|US/Michigan","America/Noronha|Atlantic/South_Georgia","America/Noronha|Brazil/DeNoronha","America/Noronha|Etc/GMT+2","America/Panama|America/Atikokan","America/Panama|America/Cayman","America/Panama|America/Coral_Harbour","America/Panama|America/Jamaica","America/Panama|EST","America/Panama|Jamaica","America/Phoenix|America/Creston","America/Phoenix|America/Dawson_Creek","America/Phoenix|America/Hermosillo","America/Phoenix|MST","America/Phoenix|US/Arizona","America/Rio_Branco|America/Eirunepe","America/Rio_Branco|America/Porto_Acre","America/Rio_Branco|Brazil/Acre","America/Santiago|Chile/Continental","America/Santo_Domingo|America/Anguilla","America/Santo_Domingo|America/Antigua","America/Santo_Domingo|America/Aruba","America/Santo_Domingo|America/Barbados","America/Santo_Domingo|America/Blanc-Sablon","America/Santo_Domingo|America/Curacao","America/Santo_Domingo|America/Dominica","America/Santo_Domingo|America/Grenada","America/Santo_Domingo|America/Guadeloupe","America/Santo_Domingo|America/Kralendijk","America/Santo_Domingo|America/Lower_Princes","America/Santo_Domingo|America/Marigot","America/Santo_Domingo|America/Martinique","America/Santo_Domingo|America/Montserrat","America/Santo_Domingo|America/Port_of_Spain","America/Santo_Domingo|America/Puerto_Rico","America/Santo_Domingo|America/St_Barthelemy","America/Santo_Domingo|America/St_Kitts","America/Santo_Domingo|America/St_Lucia","America/Santo_Domingo|America/St_Thomas","America/Santo_Domingo|America/St_Vincent","America/Santo_Domingo|America/Tortola","America/Santo_Domingo|America/Virgin","America/Sao_Paulo|Brazil/East","America/St_Johns|Canada/Newfoundland","Antarctica/Palmer|America/Punta_Arenas","Asia/Baghdad|Antarctica/Syowa","Asia/Baghdad|Asia/Aden","Asia/Baghdad|Asia/Bahrain","Asia/Baghdad|Asia/Kuwait","Asia/Baghdad|Asia/Qatar","Asia/Baghdad|Asia/Riyadh","Asia/Baghdad|Etc/GMT-3","Asia/Baghdad|Europe/Minsk","Asia/Bangkok|Asia/Ho_Chi_Minh","Asia/Bangkok|Asia/Novokuznetsk","Asia/Bangkok|Asia/Phnom_Penh","Asia/Bangkok|Asia/Saigon","Asia/Bangkok|Asia/Vientiane","Asia/Bangkok|Etc/GMT-7","Asia/Bangkok|Indian/Christmas","Asia/Dhaka|Antarctica/Vostok","Asia/Dhaka|Asia/Almaty","Asia/Dhaka|Asia/Bishkek","Asia/Dhaka|Asia/Dacca","Asia/Dhaka|Asia/Kashgar","Asia/Dhaka|Asia/Qyzylorda","Asia/Dhaka|Asia/Thimbu","Asia/Dhaka|Asia/Thimphu","Asia/Dhaka|Asia/Urumqi","Asia/Dhaka|Etc/GMT-6","Asia/Dhaka|Indian/Chagos","Asia/Dili|Etc/GMT-9","Asia/Dili|Pacific/Palau","Asia/Dubai|Asia/Muscat","Asia/Dubai|Asia/Tbilisi","Asia/Dubai|Asia/Yerevan","Asia/Dubai|Etc/GMT-4","Asia/Dubai|Europe/Samara","Asia/Dubai|Indian/Mahe","Asia/Dubai|Indian/Mauritius","Asia/Dubai|Indian/Reunion","Asia/Gaza|Asia/Hebron","Asia/Hong_Kong|Hongkong","Asia/Jakarta|Asia/Pontianak","Asia/Jerusalem|Asia/Tel_Aviv","Asia/Jerusalem|Israel","Asia/Kamchatka|Asia/Anadyr","Asia/Kamchatka|Etc/GMT-12","Asia/Kamchatka|Kwajalein","Asia/Kamchatka|Pacific/Funafuti","Asia/Kamchatka|Pacific/Kwajalein","Asia/Kamchatka|Pacific/Majuro","Asia/Kamchatka|Pacific/Nauru","Asia/Kamchatka|Pacific/Tarawa","Asia/Kamchatka|Pacific/Wake","Asia/Kamchatka|Pacific/Wallis","Asia/Kathmandu|Asia/Katmandu","Asia/Kolkata|Asia/Calcutta","Asia/Makassar|Asia/Ujung_Pandang","Asia/Manila|Asia/Brunei","Asia/Manila|Asia/Kuala_Lumpur","Asia/Manila|Asia/Kuching","Asia/Manila|Asia/Singapore","Asia/Manila|Etc/GMT-8","Asia/Manila|Singapore","Asia/Rangoon|Asia/Yangon","Asia/Rangoon|Indian/Cocos","Asia/Seoul|ROK","Asia/Shanghai|Asia/Chongqing","Asia/Shanghai|Asia/Chungking","Asia/Shanghai|Asia/Harbin","Asia/Shanghai|Asia/Macao","Asia/Shanghai|Asia/Macau","Asia/Shanghai|Asia/Taipei","Asia/Shanghai|PRC","Asia/Shanghai|ROC","Asia/Tashkent|Antarctica/Mawson","Asia/Tashkent|Asia/Aqtau","Asia/Tashkent|Asia/Aqtobe","Asia/Tashkent|Asia/Ashgabat","Asia/Tashkent|Asia/Ashkhabad","Asia/Tashkent|Asia/Atyrau","Asia/Tashkent|Asia/Dushanbe","Asia/Tashkent|Asia/Oral","Asia/Tashkent|Asia/Samarkand","Asia/Tashkent|Etc/GMT-5","Asia/Tashkent|Indian/Kerguelen","Asia/Tashkent|Indian/Maldives","Asia/Tehran|Iran","Asia/Tokyo|Japan","Asia/Ulaanbaatar|Asia/Choibalsan","Asia/Ulaanbaatar|Asia/Ulan_Bator","Asia/Vladivostok|Asia/Ust-Nera","Asia/Yakutsk|Asia/Khandyga","Atlantic/Azores|America/Scoresbysund","Atlantic/Cape_Verde|Etc/GMT+1","Australia/Adelaide|Australia/Broken_Hill","Australia/Adelaide|Australia/South","Australia/Adelaide|Australia/Yancowinna","Australia/Brisbane|Australia/Lindeman","Australia/Brisbane|Australia/Queensland","Australia/Darwin|Australia/North","Australia/Lord_Howe|Australia/LHI","Australia/Perth|Australia/West","Australia/Sydney|Australia/ACT","Australia/Sydney|Australia/Canberra","Australia/Sydney|Australia/Currie","Australia/Sydney|Australia/Hobart","Australia/Sydney|Australia/Melbourne","Australia/Sydney|Australia/NSW","Australia/Sydney|Australia/Tasmania","Australia/Sydney|Australia/Victoria","Etc/UCT|UCT","Etc/UTC|Etc/Universal","Etc/UTC|Etc/Zulu","Etc/UTC|UTC","Etc/UTC|Universal","Etc/UTC|Zulu","Europe/Astrakhan|Europe/Ulyanovsk","Europe/Athens|Asia/Nicosia","Europe/Athens|EET","Europe/Athens|Europe/Bucharest","Europe/Athens|Europe/Helsinki","Europe/Athens|Europe/Kiev","Europe/Athens|Europe/Mariehamn","Europe/Athens|Europe/Nicosia","Europe/Athens|Europe/Riga","Europe/Athens|Europe/Sofia","Europe/Athens|Europe/Tallinn","Europe/Athens|Europe/Uzhgorod","Europe/Athens|Europe/Vilnius","Europe/Athens|Europe/Zaporozhye","Europe/Chisinau|Europe/Tiraspol","Europe/Dublin|Eire","Europe/Istanbul|Asia/Istanbul","Europe/Istanbul|Turkey","Europe/Lisbon|Atlantic/Canary","Europe/Lisbon|Atlantic/Faeroe","Europe/Lisbon|Atlantic/Faroe","Europe/Lisbon|Atlantic/Madeira","Europe/Lisbon|Portugal","Europe/Lisbon|WET","Europe/London|Europe/Belfast","Europe/London|Europe/Guernsey","Europe/London|Europe/Isle_of_Man","Europe/London|Europe/Jersey","Europe/London|GB","Europe/London|GB-Eire","Europe/Moscow|W-SU","Europe/Paris|Africa/Ceuta","Europe/Paris|Arctic/Longyearbyen","Europe/Paris|Atlantic/Jan_Mayen","Europe/Paris|CET","Europe/Paris|Europe/Amsterdam","Europe/Paris|Europe/Andorra","Europe/Paris|Europe/Belgrade","Europe/Paris|Europe/Berlin","Europe/Paris|Europe/Bratislava","Europe/Paris|Europe/Brussels","Europe/Paris|Europe/Budapest","Europe/Paris|Europe/Busingen","Europe/Paris|Europe/Copenhagen","Europe/Paris|Europe/Gibraltar","Europe/Paris|Europe/Ljubljana","Europe/Paris|Europe/Luxembourg","Europe/Paris|Europe/Madrid","Europe/Paris|Europe/Malta","Europe/Paris|Europe/Monaco","Europe/Paris|Europe/Oslo","Europe/Paris|Europe/Podgorica","Europe/Paris|Europe/Prague","Europe/Paris|Europe/Rome","Europe/Paris|Europe/San_Marino","Europe/Paris|Europe/Sarajevo","Europe/Paris|Europe/Skopje","Europe/Paris|Europe/Stockholm","Europe/Paris|Europe/Tirane","Europe/Paris|Europe/Vaduz","Europe/Paris|Europe/Vatican","Europe/Paris|Europe/Vienna","Europe/Paris|Europe/Warsaw","Europe/Paris|Europe/Zagreb","Europe/Paris|Europe/Zurich","Europe/Paris|Poland","Europe/Volgograd|Europe/Kirov","Pacific/Auckland|Antarctica/McMurdo","Pacific/Auckland|Antarctica/South_Pole","Pacific/Auckland|NZ","Pacific/Chatham|NZ-CHAT","Pacific/Easter|Chile/EasterIsland","Pacific/Fakaofo|Etc/GMT-13","Pacific/Fakaofo|Pacific/Enderbury","Pacific/Galapagos|Etc/GMT+6","Pacific/Gambier|Etc/GMT+9","Pacific/Guadalcanal|Antarctica/Macquarie","Pacific/Guadalcanal|Etc/GMT-11","Pacific/Guadalcanal|Pacific/Efate","Pacific/Guadalcanal|Pacific/Kosrae","Pacific/Guadalcanal|Pacific/Noumea","Pacific/Guadalcanal|Pacific/Pohnpei","Pacific/Guadalcanal|Pacific/Ponape","Pacific/Guam|Pacific/Saipan","Pacific/Honolulu|HST","Pacific/Honolulu|Pacific/Johnston","Pacific/Honolulu|US/Hawaii","Pacific/Kiritimati|Etc/GMT-14","Pacific/Niue|Etc/GMT+11","Pacific/Pago_Pago|Pacific/Midway","Pacific/Pago_Pago|Pacific/Samoa","Pacific/Pago_Pago|US/Samoa","Pacific/Pitcairn|Etc/GMT+8","Pacific/Port_Moresby|Antarctica/DumontDUrville","Pacific/Port_Moresby|Etc/GMT-10","Pacific/Port_Moresby|Pacific/Chuuk","Pacific/Port_Moresby|Pacific/Truk","Pacific/Port_Moresby|Pacific/Yap","Pacific/Tahiti|Etc/GMT+10","Pacific/Tahiti|Pacific/Rarotonga"]
}),a});
// /Users/michaelmartinez/webviewer/Content/js/virtual-dom.js
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.virtualDom=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var createElement = require("./vdom/create-element.js")

module.exports = createElement

},{"./vdom/create-element.js":15}],2:[function(require,module,exports){
var diff = require("./vtree/diff.js")

module.exports = diff

},{"./vtree/diff.js":35}],3:[function(require,module,exports){
var h = require("./virtual-hyperscript/index.js")

module.exports = h

},{"./virtual-hyperscript/index.js":22}],4:[function(require,module,exports){
var diff = require("./diff.js")
var patch = require("./patch.js")
var h = require("./h.js")
var create = require("./create-element.js")

module.exports = {
    diff: diff,
    patch: patch,
    h: h,
    create: create
}

},{"./create-element.js":1,"./diff.js":2,"./h.js":3,"./patch.js":13}],5:[function(require,module,exports){
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
module.exports = (function split(undef) {

  var nativeSplit = String.prototype.split,
    compliantExecNpcg = /()??/.exec("")[1] === undef,
    // NPCG: nonparticipating capturing group
    self;

  self = function(str, separator, limit) {
    // If `separator` is not a regex, use `nativeSplit`
    if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
      return nativeSplit.call(str, separator, limit);
    }
    var output = [],
      flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.extended ? "x" : "") + // Proposed for ES6
      (separator.sticky ? "y" : ""),
      // Firefox 3+
      lastLastIndex = 0,
      // Make `global` and avoid `lastIndex` issues by working with a copy
      separator = new RegExp(separator.source, flags + "g"),
      separator2, match, lastIndex, lastLength;
    str += ""; // Type-convert
    if (!compliantExecNpcg) {
      // Doesn't need flags gy, but they don't hurt
      separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
    }
    /* Values for `limit`, per the spec:
     * If undefined: 4294967295 // Math.pow(2, 32) - 1
     * If 0, Infinity, or NaN: 0
     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
     * If negative number: 4294967296 - Math.floor(Math.abs(limit))
     * If other: Type-convert, then use the above rules
     */
    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1
    limit >>> 0; // ToUint32(limit)
    while (match = separator.exec(str)) {
      // `separator.lastIndex` is not reliable cross-browser
      lastIndex = match.index + match[0].length;
      if (lastIndex > lastLastIndex) {
        output.push(str.slice(lastLastIndex, match.index));
        // Fix browsers whose `exec` methods don't consistently return `undefined` for
        // nonparticipating capturing groups
        if (!compliantExecNpcg && match.length > 1) {
          match[0].replace(separator2, function() {
            for (var i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undef) {
                match[i] = undef;
              }
            }
          });
        }
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, match.slice(1));
        }
        lastLength = match[0].length;
        lastLastIndex = lastIndex;
        if (output.length >= limit) {
          break;
        }
      }
      if (separator.lastIndex === match.index) {
        separator.lastIndex++; // Avoid an infinite loop
      }
    }
    if (lastLastIndex === str.length) {
      if (lastLength || !separator.test("")) {
        output.push("");
      }
    } else {
      output.push(str.slice(lastLastIndex));
    }
    return output.length > limit ? output.slice(0, limit) : output;
  };

  return self;
})();

},{}],6:[function(require,module,exports){

},{}],7:[function(require,module,exports){
'use strict';

var OneVersionConstraint = require('individual/one-version');

var MY_VERSION = '7';
OneVersionConstraint('ev-store', MY_VERSION);

var hashKey = '__EV_STORE_KEY@' + MY_VERSION;

module.exports = EvStore;

function EvStore(elem) {
    var hash = elem[hashKey];

    if (!hash) {
        hash = elem[hashKey] = {};
    }

    return hash;
}

},{"individual/one-version":9}],8:[function(require,module,exports){
(function (global){
'use strict';

/*global window, global*/

var root = typeof window !== 'undefined' ?
    window : typeof global !== 'undefined' ?
    global : {};

module.exports = Individual;

function Individual(key, value) {
    if (key in root) {
        return root[key];
    }

    root[key] = value;

    return value;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],9:[function(require,module,exports){
'use strict';

var Individual = require('./index.js');

module.exports = OneVersion;

function OneVersion(moduleName, version, defaultValue) {
    var key = '__INDIVIDUAL_ONE_VERSION_' + moduleName;
    var enforceKey = key + '_ENFORCE_SINGLETON';

    var versionValue = Individual(enforceKey, version);

    if (versionValue !== version) {
        throw new Error('Can only have one copy of ' +
            moduleName + '.\n' +
            'You already have version ' + versionValue +
            ' installed.\n' +
            'This means you cannot install version ' + version);
    }

    return Individual(key, defaultValue);
}

},{"./index.js":8}],10:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":6}],11:[function(require,module,exports){
"use strict";

module.exports = function isObject(x) {
	return typeof x === "object" && x !== null;
};

},{}],12:[function(require,module,exports){
var nativeIsArray = Array.isArray
var toString = Object.prototype.toString

module.exports = nativeIsArray || isArray

function isArray(obj) {
    return toString.call(obj) === "[object Array]"
}

},{}],13:[function(require,module,exports){
var patch = require("./vdom/patch.js")

module.exports = patch

},{"./vdom/patch.js":18}],14:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook.js")

module.exports = applyProperties

function applyProperties(node, props, previous) {
    for (var propName in props) {
        var propValue = props[propName]

        if (propValue === undefined) {
            removeProperty(node, propName, propValue, previous);
        } else if (isHook(propValue)) {
            removeProperty(node, propName, propValue, previous)
            if (propValue.hook) {
                propValue.hook(node,
                    propName,
                    previous ? previous[propName] : undefined)
            }
        } else {
            if (isObject(propValue)) {
                patchObject(node, props, previous, propName, propValue);
            } else {
                node[propName] = propValue
            }
        }
    }
}

function removeProperty(node, propName, propValue, previous) {
    if (previous) {
        var previousValue = previous[propName]

        if (!isHook(previousValue)) {
            if (propName === "attributes") {
                for (var attrName in previousValue) {
                    node.removeAttribute(attrName)
                }
            } else if (propName === "style") {
                for (var i in previousValue) {
                    node.style[i] = ""
                }
            } else if (typeof previousValue === "string") {
                node[propName] = ""
            } else {
                node[propName] = null
            }
        } else if (previousValue.unhook) {
            previousValue.unhook(node, propName, propValue)
        }
    }
}

function patchObject(node, props, previous, propName, propValue) {
    var previousValue = previous ? previous[propName] : undefined

    // Set attributes
    if (propName === "attributes") {
        for (var attrName in propValue) {
            var attrValue = propValue[attrName]

            if (attrValue === undefined) {
                node.removeAttribute(attrName)
            } else {
                node.setAttribute(attrName, attrValue)
            }
        }

        return
    }

    if(previousValue && isObject(previousValue) &&
        getPrototype(previousValue) !== getPrototype(propValue)) {
        node[propName] = propValue
        return
    }

    if (!isObject(node[propName])) {
        node[propName] = {}
    }

    var replacer = propName === "style" ? "" : undefined

    for (var k in propValue) {
        var value = propValue[k]
        node[propName][k] = (value === undefined) ? replacer : value
    }
}

function getPrototype(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

},{"../vnode/is-vhook.js":26,"is-object":11}],15:[function(require,module,exports){
var document = require("global/document")

var applyProperties = require("./apply-properties")

var isVNode = require("../vnode/is-vnode.js")
var isVText = require("../vnode/is-vtext.js")
var isWidget = require("../vnode/is-widget.js")
var handleThunk = require("../vnode/handle-thunk.js")

module.exports = createElement

function createElement(vnode, opts) {
    var doc = opts ? opts.document || document : document
    var warn = opts ? opts.warn : null

    vnode = handleThunk(vnode).a

    if (isWidget(vnode)) {
        return vnode.init()
    } else if (isVText(vnode)) {
        return doc.createTextNode(vnode.text)
    } else if (!isVNode(vnode)) {
        if (warn) {
            warn("Item is not a valid virtual dom node", vnode)
        }
        return null
    }

    var node = (vnode.namespace === null) ?
        doc.createElement(vnode.tagName) :
        doc.createElementNS(vnode.namespace, vnode.tagName)

    var props = vnode.properties
    applyProperties(node, props)

    var children = vnode.children

    for (var i = 0; i < children.length; i++) {
        var childNode = createElement(children[i], opts)
        if (childNode) {
            node.appendChild(childNode)
        }
    }

    return node
}

},{"../vnode/handle-thunk.js":24,"../vnode/is-vnode.js":27,"../vnode/is-vtext.js":28,"../vnode/is-widget.js":29,"./apply-properties":14,"global/document":10}],16:[function(require,module,exports){
// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
// We don't want to read all of the DOM nodes in the tree so we use
// the in-order tree indexing to eliminate recursion down certain branches.
// We only recurse into a DOM node if we know that it contains a child of
// interest.

var noChild = {}

module.exports = domIndex

function domIndex(rootNode, tree, indices, nodes) {
    if (!indices || indices.length === 0) {
        return {}
    } else {
        indices.sort(ascending)
        return recurse(rootNode, tree, indices, nodes, 0)
    }
}

function recurse(rootNode, tree, indices, nodes, rootIndex) {
    nodes = nodes || {}


    if (rootNode) {
        if (indexInRange(indices, rootIndex, rootIndex)) {
            nodes[rootIndex] = rootNode
        }

        var vChildren = tree.children

        if (vChildren) {

            var childNodes = rootNode.childNodes

            for (var i = 0; i < tree.children.length; i++) {
                rootIndex += 1

                var vChild = vChildren[i] || noChild
                var nextIndex = rootIndex + (vChild.count || 0)

                // skip recursion down the tree if there are no nodes down here
                if (indexInRange(indices, rootIndex, nextIndex)) {
                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)
                }

                rootIndex = nextIndex
            }
        }
    }

    return nodes
}

// Binary search for an index in the interval [left, right]
function indexInRange(indices, left, right) {
    if (indices.length === 0) {
        return false
    }

    var minIndex = 0
    var maxIndex = indices.length - 1
    var currentIndex
    var currentItem

    while (minIndex <= maxIndex) {
        currentIndex = ((maxIndex + minIndex) / 2) >> 0
        currentItem = indices[currentIndex]

        if (minIndex === maxIndex) {
            return currentItem >= left && currentItem <= right
        } else if (currentItem < left) {
            minIndex = currentIndex + 1
        } else  if (currentItem > right) {
            maxIndex = currentIndex - 1
        } else {
            return true
        }
    }

    return false;
}

function ascending(a, b) {
    return a > b ? 1 : -1
}

},{}],17:[function(require,module,exports){
var applyProperties = require("./apply-properties")

var isWidget = require("../vnode/is-widget.js")
var VPatch = require("../vnode/vpatch.js")

var render = require("./create-element")
var updateWidget = require("./update-widget")

module.exports = applyPatch

function applyPatch(vpatch, domNode, renderOptions) {
    var type = vpatch.type
    var vNode = vpatch.vNode
    var patch = vpatch.patch

    switch (type) {
        case VPatch.REMOVE:
            return removeNode(domNode, vNode)
        case VPatch.INSERT:
            return insertNode(domNode, patch, renderOptions)
        case VPatch.VTEXT:
            return stringPatch(domNode, vNode, patch, renderOptions)
        case VPatch.WIDGET:
            return widgetPatch(domNode, vNode, patch, renderOptions)
        case VPatch.VNODE:
            return vNodePatch(domNode, vNode, patch, renderOptions)
        case VPatch.ORDER:
            reorderChildren(domNode, patch)
            return domNode
        case VPatch.PROPS:
            applyProperties(domNode, patch, vNode.properties)
            return domNode
        case VPatch.THUNK:
            return replaceRoot(domNode,
                renderOptions.patch(domNode, patch, renderOptions))
        default:
            return domNode
    }
}

function removeNode(domNode, vNode) {
    var parentNode = domNode.parentNode

    if (parentNode) {
        parentNode.removeChild(domNode)
    }

    destroyWidget(domNode, vNode);

    return null
}

function insertNode(parentNode, vNode, renderOptions) {
    var newNode = render(vNode, renderOptions)

    if (parentNode) {
        parentNode.appendChild(newNode)
    }

    return parentNode
}

function stringPatch(domNode, leftVNode, vText, renderOptions) {
    var newNode

    if (domNode.nodeType === 3) {
        domNode.replaceData(0, domNode.length, vText.text)
        newNode = domNode
    } else {
        var parentNode = domNode.parentNode
        newNode = render(vText, renderOptions)

        if (parentNode) {
            parentNode.replaceChild(newNode, domNode)
        }
    }

    return newNode
}

function widgetPatch(domNode, leftVNode, widget, renderOptions) {
    var updating = updateWidget(leftVNode, widget)
    var newNode

    if (updating) {
        newNode = widget.update(leftVNode, domNode) || domNode
    } else {
        newNode = render(widget, renderOptions)
    }

    var parentNode = domNode.parentNode

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    if (!updating) {
        destroyWidget(domNode, leftVNode)
    }

    return newNode
}

function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
    var parentNode = domNode.parentNode
    var newNode = render(vNode, renderOptions)

    if (parentNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    return newNode
}

function destroyWidget(domNode, w) {
    if (typeof w.destroy === "function" && isWidget(w)) {
        w.destroy(domNode)
    }
}

function reorderChildren(domNode, bIndex) {
    var children = []
    var childNodes = domNode.childNodes
    var len = childNodes.length
    var i
    var reverseIndex = bIndex.reverse

    for (i = 0; i < len; i++) {
        children.push(domNode.childNodes[i])
    }

    var insertOffset = 0
    var move
    var node
    var insertNode
    var chainLength
    var insertedLength
    var nextSibling
    for (i = 0; i < len;) {
        move = bIndex[i]
        chainLength = 1
        if (move !== undefined && move !== i) {
            // try to bring forward as long of a chain as possible
            while (bIndex[i + chainLength] === move + chainLength) {
                chainLength++;
            }

            // the element currently at this index will be moved later so increase the insert offset
            if (reverseIndex[i] > i + chainLength) {
                insertOffset++
            }

            node = children[move]
            insertNode = childNodes[i + insertOffset] || null
            insertedLength = 0
            while (node !== insertNode && insertedLength++ < chainLength) {
                domNode.insertBefore(node, insertNode);
                node = children[move + insertedLength];
            }

            // the moved element came from the front of the array so reduce the insert offset
            if (move + chainLength < i) {
                insertOffset--
            }
        }

        // element at this index is scheduled to be removed so increase insert offset
        if (i in bIndex.removes) {
            insertOffset++
        }

        i += chainLength
    }
}

function replaceRoot(oldRoot, newRoot) {
    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
        console.log(oldRoot)
        oldRoot.parentNode.replaceChild(newRoot, oldRoot)
    }

    return newRoot;
}

},{"../vnode/is-widget.js":29,"../vnode/vpatch.js":32,"./apply-properties":14,"./create-element":15,"./update-widget":19}],18:[function(require,module,exports){
var document = require("global/document")
var isArray = require("x-is-array")

var domIndex = require("./dom-index")
var patchOp = require("./patch-op")
module.exports = patch

function patch(rootNode, patches) {
    return patchRecursive(rootNode, patches)
}

function patchRecursive(rootNode, patches, renderOptions) {
    var indices = patchIndices(patches)

    if (indices.length === 0) {
        return rootNode
    }

    var index = domIndex(rootNode, patches.a, indices)
    var ownerDocument = rootNode.ownerDocument

    if (!renderOptions) {
        renderOptions = { patch: patchRecursive }
        if (ownerDocument !== document) {
            renderOptions.document = ownerDocument
        }
    }

    for (var i = 0; i < indices.length; i++) {
        var nodeIndex = indices[i]
        rootNode = applyPatch(rootNode,
            index[nodeIndex],
            patches[nodeIndex],
            renderOptions)
    }

    return rootNode
}

function applyPatch(rootNode, domNode, patchList, renderOptions) {
    if (!domNode) {
        return rootNode
    }

    var newNode

    if (isArray(patchList)) {
        for (var i = 0; i < patchList.length; i++) {
            newNode = patchOp(patchList[i], domNode, renderOptions)

            if (domNode === rootNode) {
                rootNode = newNode
            }
        }
    } else {
        newNode = patchOp(patchList, domNode, renderOptions)

        if (domNode === rootNode) {
            rootNode = newNode
        }
    }

    return rootNode
}

function patchIndices(patches) {
    var indices = []

    for (var key in patches) {
        if (key !== "a") {
            indices.push(Number(key))
        }
    }

    return indices
}

},{"./dom-index":16,"./patch-op":17,"global/document":10,"x-is-array":12}],19:[function(require,module,exports){
var isWidget = require("../vnode/is-widget.js")

module.exports = updateWidget

function updateWidget(a, b) {
    if (isWidget(a) && isWidget(b)) {
        if ("name" in a && "name" in b) {
            return a.id === b.id
        } else {
            return a.init === b.init
        }
    }

    return false
}

},{"../vnode/is-widget.js":29}],20:[function(require,module,exports){
'use strict';

var EvStore = require('ev-store');

module.exports = EvHook;

function EvHook(value) {
    if (!(this instanceof EvHook)) {
        return new EvHook(value);
    }

    this.value = value;
}

EvHook.prototype.hook = function (node, propertyName) {
    var es = EvStore(node);
    var propName = propertyName.substr(3);

    es[propName] = this.value;
};

EvHook.prototype.unhook = function(node, propertyName) {
    var es = EvStore(node);
    var propName = propertyName.substr(3);

    es[propName] = undefined;
};

},{"ev-store":7}],21:[function(require,module,exports){
'use strict';

module.exports = SoftSetHook;

function SoftSetHook(value) {
    if (!(this instanceof SoftSetHook)) {
        return new SoftSetHook(value);
    }

    this.value = value;
}

SoftSetHook.prototype.hook = function (node, propertyName) {
    if (node[propertyName] !== this.value) {
        node[propertyName] = this.value;
    }
};

},{}],22:[function(require,module,exports){
'use strict';

var isArray = require('x-is-array');

var VNode = require('../vnode/vnode.js');
var VText = require('../vnode/vtext.js');
var isVNode = require('../vnode/is-vnode');
var isVText = require('../vnode/is-vtext');
var isWidget = require('../vnode/is-widget');
var isHook = require('../vnode/is-vhook');
var isVThunk = require('../vnode/is-thunk');

var parseTag = require('./parse-tag.js');
var softSetHook = require('./hooks/soft-set-hook.js');
var evHook = require('./hooks/ev-hook.js');

module.exports = h;

function h(tagName, properties, children) {
    var childNodes = [];
    var tag, props, key, namespace;

    if (!children && isChildren(properties)) {
        children = properties;
        props = {};
    }

    props = props || properties || {};
    tag = parseTag(tagName, props);

    // support keys
    if (props.hasOwnProperty('key')) {
        key = props.key;
        props.key = undefined;
    }

    // support namespace
    if (props.hasOwnProperty('namespace')) {
        namespace = props.namespace;
        props.namespace = undefined;
    }

    // fix cursor bug
    if (tag === 'INPUT' &&
        !namespace &&
        props.hasOwnProperty('value') &&
        props.value !== undefined &&
        !isHook(props.value)
    ) {
        props.value = softSetHook(props.value);
    }

    transformProperties(props);

    if (children !== undefined && children !== null) {
        addChild(children, childNodes, tag, props);
    }


    return new VNode(tag, props, childNodes, key, namespace);
}

function addChild(c, childNodes, tag, props) {
    if (typeof c === 'string') {
        childNodes.push(new VText(c));
    } else if (isChild(c)) {
        childNodes.push(c);
    } else if (isArray(c)) {
        for (var i = 0; i < c.length; i++) {
            addChild(c[i], childNodes, tag, props);
        }
    } else if (c === null || c === undefined) {
        return;
    } else {
        throw UnexpectedVirtualElement({
            foreignObject: c,
            parentVnode: {
                tagName: tag,
                properties: props
            }
        });
    }
}

function transformProperties(props) {
    for (var propName in props) {
        if (props.hasOwnProperty(propName)) {
            var value = props[propName];

            if (isHook(value)) {
                continue;
            }

            if (propName.substr(0, 3) === 'ev-') {
                // add ev-foo support
                props[propName] = evHook(value);
            }
        }
    }
}

function isChild(x) {
    return isVNode(x) || isVText(x) || isWidget(x) || isVThunk(x);
}

function isChildren(x) {
    return typeof x === 'string' || isArray(x) || isChild(x);
}

function UnexpectedVirtualElement(data) {
    var err = new Error();

    err.type = 'virtual-hyperscript.unexpected.virtual-element';
    err.message = 'Unexpected virtual child passed to h().\n' +
        'Expected a VNode / Vthunk / VWidget / string but:\n' +
        'got:\n' +
        errorString(data.foreignObject) +
        '.\n' +
        'The parent vnode is:\n' +
        errorString(data.parentVnode)
        '\n' +
        'Suggested fix: change your `h(..., [ ... ])` callsite.';
    err.foreignObject = data.foreignObject;
    err.parentVnode = data.parentVnode;

    return err;
}

function errorString(obj) {
    try {
        return JSON.stringify(obj, null, '    ');
    } catch (e) {
        return String(obj);
    }
}

},{"../vnode/is-thunk":25,"../vnode/is-vhook":26,"../vnode/is-vnode":27,"../vnode/is-vtext":28,"../vnode/is-widget":29,"../vnode/vnode.js":31,"../vnode/vtext.js":33,"./hooks/ev-hook.js":20,"./hooks/soft-set-hook.js":21,"./parse-tag.js":23,"x-is-array":12}],23:[function(require,module,exports){
'use strict';

var split = require('browser-split');

var classIdSplit = /([\.#]?[a-zA-Z0-9_:-]+)/;
var notClassId = /^\.|#/;

module.exports = parseTag;

function parseTag(tag, props) {
    if (!tag) {
        return 'DIV';
    }

    var noId = !(props.hasOwnProperty('id'));

    var tagParts = split(tag, classIdSplit);
    var tagName = null;

    if (notClassId.test(tagParts[1])) {
        tagName = 'DIV';
    }

    var classes, part, type, i;

    for (i = 0; i < tagParts.length; i++) {
        part = tagParts[i];

        if (!part) {
            continue;
        }

        type = part.charAt(0);

        if (!tagName) {
            tagName = part;
        } else if (type === '.') {
            classes = classes || [];
            classes.push(part.substring(1, part.length));
        } else if (type === '#' && noId) {
            props.id = part.substring(1, part.length);
        }
    }

    if (classes) {
        if (props.className) {
            classes.push(props.className);
        }

        props.className = classes.join(' ');
    }

    return props.namespace ? tagName : tagName.toUpperCase();
}

},{"browser-split":5}],24:[function(require,module,exports){
var isVNode = require("./is-vnode")
var isVText = require("./is-vtext")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")

module.exports = handleThunk

function handleThunk(a, b) {
    var renderedA = a
    var renderedB = b

    if (isThunk(b)) {
        renderedB = renderThunk(b, a)
    }

    if (isThunk(a)) {
        renderedA = renderThunk(a, null)
    }

    return {
        a: renderedA,
        b: renderedB
    }
}

function renderThunk(thunk, previous) {
    var renderedThunk = thunk.vnode

    if (!renderedThunk) {
        renderedThunk = thunk.vnode = thunk.render(previous)
    }

    if (!(isVNode(renderedThunk) ||
            isVText(renderedThunk) ||
            isWidget(renderedThunk))) {
        throw new Error("thunk did not return a valid node");
    }

    return renderedThunk
}

},{"./is-thunk":25,"./is-vnode":27,"./is-vtext":28,"./is-widget":29}],25:[function(require,module,exports){
module.exports = isThunk

function isThunk(t) {
    return t && t.type === "Thunk"
}

},{}],26:[function(require,module,exports){
module.exports = isHook

function isHook(hook) {
    return hook &&
      (typeof hook.hook === "function" && !hook.hasOwnProperty("hook") ||
       typeof hook.unhook === "function" && !hook.hasOwnProperty("unhook"))
}

},{}],27:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualNode

function isVirtualNode(x) {
    return x && x.type === "VirtualNode" && x.version === version
}

},{"./version":30}],28:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualText

function isVirtualText(x) {
    return x && x.type === "VirtualText" && x.version === version
}

},{"./version":30}],29:[function(require,module,exports){
module.exports = isWidget

function isWidget(w) {
    return w && w.type === "Widget"
}

},{}],30:[function(require,module,exports){
module.exports = "1"

},{}],31:[function(require,module,exports){
var version = require("./version")
var isVNode = require("./is-vnode")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")
var isVHook = require("./is-vhook")

module.exports = VirtualNode

var noProperties = {}
var noChildren = []

function VirtualNode(tagName, properties, children, key, namespace) {
    this.tagName = tagName
    this.properties = properties || noProperties
    this.children = children || noChildren
    this.key = key != null ? String(key) : undefined
    this.namespace = (typeof namespace === "string") ? namespace : null

    var count = (children && children.length) || 0
    var descendants = 0
    var hasWidgets = false
    var hasThunks = false
    var descendantHooks = false
    var hooks

    for (var propName in properties) {
        if (properties.hasOwnProperty(propName)) {
            var property = properties[propName]
            if (isVHook(property) && property.unhook) {
                if (!hooks) {
                    hooks = {}
                }

                hooks[propName] = property
            }
        }
    }

    for (var i = 0; i < count; i++) {
        var child = children[i]
        if (isVNode(child)) {
            descendants += child.count || 0

            if (!hasWidgets && child.hasWidgets) {
                hasWidgets = true
            }

            if (!hasThunks && child.hasThunks) {
                hasThunks = true
            }

            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
                descendantHooks = true
            }
        } else if (!hasWidgets && isWidget(child)) {
            if (typeof child.destroy === "function") {
                hasWidgets = true
            }
        } else if (!hasThunks && isThunk(child)) {
            hasThunks = true;
        }
    }

    this.count = count + descendants
    this.hasWidgets = hasWidgets
    this.hasThunks = hasThunks
    this.hooks = hooks
    this.descendantHooks = descendantHooks
}

VirtualNode.prototype.version = version
VirtualNode.prototype.type = "VirtualNode"

},{"./is-thunk":25,"./is-vhook":26,"./is-vnode":27,"./is-widget":29,"./version":30}],32:[function(require,module,exports){
var version = require("./version")

VirtualPatch.NONE = 0
VirtualPatch.VTEXT = 1
VirtualPatch.VNODE = 2
VirtualPatch.WIDGET = 3
VirtualPatch.PROPS = 4
VirtualPatch.ORDER = 5
VirtualPatch.INSERT = 6
VirtualPatch.REMOVE = 7
VirtualPatch.THUNK = 8

module.exports = VirtualPatch

function VirtualPatch(type, vNode, patch) {
    this.type = Number(type)
    this.vNode = vNode
    this.patch = patch
}

VirtualPatch.prototype.version = version
VirtualPatch.prototype.type = "VirtualPatch"

},{"./version":30}],33:[function(require,module,exports){
var version = require("./version")

module.exports = VirtualText

function VirtualText(text) {
    this.text = String(text)
}

VirtualText.prototype.version = version
VirtualText.prototype.type = "VirtualText"

},{"./version":30}],34:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook")

module.exports = diffProps

function diffProps(a, b) {
    var diff

    for (var aKey in a) {
        if (!(aKey in b)) {
            diff = diff || {}
            diff[aKey] = undefined
        }

        var aValue = a[aKey]
        var bValue = b[aKey]

        if (aValue === bValue) {
            continue
        } else if (isObject(aValue) && isObject(bValue)) {
            if (getPrototype(bValue) !== getPrototype(aValue)) {
                diff = diff || {}
                diff[aKey] = bValue
            } else if (isHook(bValue)) {
                 diff = diff || {}
                 diff[aKey] = bValue
            } else {
                var objectDiff = diffProps(aValue, bValue)
                if (objectDiff) {
                    diff = diff || {}
                    diff[aKey] = objectDiff
                }
            }
        } else {
            diff = diff || {}
            diff[aKey] = bValue
        }
    }

    for (var bKey in b) {
        if (!(bKey in a)) {
            diff = diff || {}
            diff[bKey] = b[bKey]
        }
    }

    return diff
}

function getPrototype(value) {
  if (Object.getPrototypeOf) {
    return Object.getPrototypeOf(value)
  } else if (value.__proto__) {
    return value.__proto__
  } else if (value.constructor) {
    return value.constructor.prototype
  }
}

},{"../vnode/is-vhook":26,"is-object":11}],35:[function(require,module,exports){
var isArray = require("x-is-array")

var VPatch = require("../vnode/vpatch")
var isVNode = require("../vnode/is-vnode")
var isVText = require("../vnode/is-vtext")
var isWidget = require("../vnode/is-widget")
var isThunk = require("../vnode/is-thunk")
var handleThunk = require("../vnode/handle-thunk")

var diffProps = require("./diff-props")

module.exports = diff

function diff(a, b) {
    var patch = { a: a }
    walk(a, b, patch, 0)
    return patch
}

function walk(a, b, patch, index) {
    if (a === b) {
        return
    }

    var apply = patch[index]
    var applyClear = false

    if (isThunk(a) || isThunk(b)) {
        thunks(a, b, patch, index)
    } else if (b == null) {

        // If a is a widget we will add a remove patch for it
        // Otherwise any child widgets/hooks must be destroyed.
        // This prevents adding two remove patches for a widget.
        if (!isWidget(a)) {
            clearState(a, patch, index)
            apply = patch[index]
        }

        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))
    } else if (isVNode(b)) {
        if (isVNode(a)) {
            if (a.tagName === b.tagName &&
                a.namespace === b.namespace &&
                a.key === b.key) {
                var propsPatch = diffProps(a.properties, b.properties)
                if (propsPatch) {
                    apply = appendPatch(apply,
                        new VPatch(VPatch.PROPS, a, propsPatch))
                }
                apply = diffChildren(a, b, patch, apply, index)
            } else {
                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
                applyClear = true
            }
        } else {
            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
            applyClear = true
        }
    } else if (isVText(b)) {
        if (!isVText(a)) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
            applyClear = true
        } else if (a.text !== b.text) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
        }
    } else if (isWidget(b)) {
        if (!isWidget(a)) {
            applyClear = true;
        }

        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))
    }

    if (apply) {
        patch[index] = apply
    }

    if (applyClear) {
        clearState(a, patch, index)
    }
}

function diffChildren(a, b, patch, apply, index) {
    var aChildren = a.children
    var bChildren = reorder(aChildren, b.children)

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen

    for (var i = 0; i < len; i++) {
        var leftNode = aChildren[i]
        var rightNode = bChildren[i]
        index += 1

        if (!leftNode) {
            if (rightNode) {
                // Excess nodes in b need to be added
                apply = appendPatch(apply,
                    new VPatch(VPatch.INSERT, null, rightNode))
            }
        } else {
            walk(leftNode, rightNode, patch, index)
        }

        if (isVNode(leftNode) && leftNode.count) {
            index += leftNode.count
        }
    }

    if (bChildren.moves) {
        // Reorder nodes last
        apply = appendPatch(apply, new VPatch(VPatch.ORDER, a, bChildren.moves))
    }

    return apply
}

function clearState(vNode, patch, index) {
    // TODO: Make this a single walk, not two
    unhook(vNode, patch, index)
    destroyWidgets(vNode, patch, index)
}

// Patch records for all destroyed widgets must be added because we need
// a DOM node reference for the destroy function
function destroyWidgets(vNode, patch, index) {
    if (isWidget(vNode)) {
        if (typeof vNode.destroy === "function") {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(VPatch.REMOVE, vNode, null)
            )
        }
    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {
        var children = vNode.children
        var len = children.length
        for (var i = 0; i < len; i++) {
            var child = children[i]
            index += 1

            destroyWidgets(child, patch, index)

            if (isVNode(child) && child.count) {
                index += child.count
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

// Create a sub-patch for thunks
function thunks(a, b, patch, index) {
    var nodes = handleThunk(a, b);
    var thunkPatch = diff(nodes.a, nodes.b)
    if (hasPatches(thunkPatch)) {
        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)
    }
}

function hasPatches(patch) {
    for (var index in patch) {
        if (index !== "a") {
            return true;
        }
    }

    return false;
}

// Execute hooks when two nodes are identical
function unhook(vNode, patch, index) {
    if (isVNode(vNode)) {
        if (vNode.hooks) {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(
                    VPatch.PROPS,
                    vNode,
                    undefinedKeys(vNode.hooks)
                )
            )
        }

        if (vNode.descendantHooks || vNode.hasThunks) {
            var children = vNode.children
            var len = children.length
            for (var i = 0; i < len; i++) {
                var child = children[i]
                index += 1

                unhook(child, patch, index)

                if (isVNode(child) && child.count) {
                    index += child.count
                }
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

function undefinedKeys(obj) {
    var result = {}

    for (var key in obj) {
        result[key] = undefined
    }

    return result
}

// List diff, naive left to right reordering
function reorder(aChildren, bChildren) {

    var bKeys = keyIndex(bChildren)

    if (!bKeys) {
        return bChildren
    }

    var aKeys = keyIndex(aChildren)

    if (!aKeys) {
        return bChildren
    }

    var bMatch = {}, aMatch = {}

    for (var aKey in bKeys) {
        bMatch[bKeys[aKey]] = aKeys[aKey]
    }

    for (var bKey in aKeys) {
        aMatch[aKeys[bKey]] = bKeys[bKey]
    }

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen
    var shuffle = []
    var freeIndex = 0
    var i = 0
    var moveIndex = 0
    var moves = {}
    var removes = moves.removes = {}
    var reverse = moves.reverse = {}
    var hasMoves = false

    while (freeIndex < len) {
        var move = aMatch[i]
        if (move !== undefined) {
            shuffle[i] = bChildren[move]
            if (move !== moveIndex) {
                moves[move] = moveIndex
                reverse[moveIndex] = move
                hasMoves = true
            }
            moveIndex++
        } else if (i in aMatch) {
            shuffle[i] = undefined
            removes[i] = moveIndex++
            hasMoves = true
        } else {
            while (bMatch[freeIndex] !== undefined) {
                freeIndex++
            }

            if (freeIndex < len) {
                var freeChild = bChildren[freeIndex]
                if (freeChild) {
                    shuffle[i] = freeChild
                    if (freeIndex !== moveIndex) {
                        hasMoves = true
                        moves[freeIndex] = moveIndex
                        reverse[moveIndex] = freeIndex
                    }
                    moveIndex++
                }
                freeIndex++
            }
        }
        i++
    }

    if (hasMoves) {
        shuffle.moves = moves
    }

    return shuffle
}

function keyIndex(children) {
    var i, keys

    for (i = 0; i < children.length; i++) {
        var child = children[i]

        if (child.key !== undefined) {
            keys = keys || {}
            keys[child.key] = i
        }
    }

    return keys
}

function appendPatch(apply, patch) {
    if (apply) {
        if (isArray(apply)) {
            apply.push(patch)
        } else {
            apply = [apply, patch]
        }

        return apply
    } else {
        return patch
    }
}

},{"../vnode/handle-thunk":24,"../vnode/is-thunk":25,"../vnode/is-vnode":27,"../vnode/is-vtext":28,"../vnode/is-widget":29,"../vnode/vpatch":32,"./diff-props":34,"x-is-array":12}]},{},[4])(4)
});
// /Users/michaelmartinez/webviewer/Content/js/videojs-ie8.min.js
!function(a,b){"undefined"==typeof a.HTMLVideoElement&&(b.createElement("video"),b.createElement("audio"),b.createElement("track")),function(a,b){"use strict";"function"==typeof define&&define.amd?define(b):"object"==typeof exports?module.exports=b():a.returnExports=b()}(this,function(){var b,c=Array,d=c.prototype,e=Object,f=e.prototype,g=Function.prototype,h=String,i=h.prototype,j=Number,k=j.prototype,l=d.slice,m=d.splice,n=d.push,o=d.unshift,p=d.concat,q=g.call,r=g.apply,s=Math.max,t=Math.min,u=f.toString,v="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,w=Function.prototype.toString,x=function(a){try{return w.call(a),!0}catch(b){return!1}},y="[object Function]",z="[object GeneratorFunction]";b=function(a){if("function"!=typeof a)return!1;if(v)return x(a);var b=u.call(a);return b===y||b===z};var A,B=RegExp.prototype.exec,C=function(a){try{return B.call(a),!0}catch(b){return!1}},D="[object RegExp]";A=function(a){return"object"!=typeof a?!1:v?C(a):u.call(a)===D};var E,F=String.prototype.valueOf,G=function(a){try{return F.call(a),!0}catch(b){return!1}},H="[object String]";E=function(a){return"string"==typeof a?!0:"object"!=typeof a?!1:v?G(a):u.call(a)===H};var I=e.defineProperty&&function(){try{var a={};e.defineProperty(a,"x",{enumerable:!1,value:a});for(var b in a)return!1;return a.x===a}catch(c){return!1}}(),J=function(a){var b;return b=I?function(a,b,c,d){!d&&b in a||e.defineProperty(a,b,{configurable:!0,enumerable:!1,writable:!0,value:c})}:function(a,b,c,d){!d&&b in a||(a[b]=c)},function(c,d,e){for(var f in d)a.call(d,f)&&b(c,f,d[f],e)}}(f.hasOwnProperty),K=function(a){var b=typeof a;return null===a||"object"!==b&&"function"!==b},L=j.isNaN||function(a){return a!==a},M={ToInteger:function(a){var b=+a;return L(b)?b=0:0!==b&&b!==1/0&&b!==-(1/0)&&(b=(b>0||-1)*Math.floor(Math.abs(b))),b},ToPrimitive:function(a){var c,d,e;if(K(a))return a;if(d=a.valueOf,b(d)&&(c=d.call(a),K(c)))return c;if(e=a.toString,b(e)&&(c=e.call(a),K(c)))return c;throw new TypeError},ToObject:function(a){if(null==a)throw new TypeError("can't convert "+a+" to object");return e(a)},ToUint32:function(a){return a>>>0}},N=function(){};J(g,{bind:function(a){var c=this;if(!b(c))throw new TypeError("Function.prototype.bind called on incompatible "+c);for(var d,f=l.call(arguments,1),g=function(){if(this instanceof d){var b=c.apply(this,p.call(f,l.call(arguments)));return e(b)===b?b:this}return c.apply(a,p.call(f,l.call(arguments)))},h=s(0,c.length-f.length),i=[],j=0;h>j;j++)n.call(i,"$"+j);return d=Function("binder","return function ("+i.join(",")+"){ return binder.apply(this, arguments); }")(g),c.prototype&&(N.prototype=c.prototype,d.prototype=new N,N.prototype=null),d}});var O=q.bind(f.hasOwnProperty),P=q.bind(f.toString),Q=q.bind(l),R=r.bind(l),S=q.bind(i.slice),T=q.bind(i.split),U=q.bind(i.indexOf),V=q.bind(n),W=q.bind(f.propertyIsEnumerable),X=q.bind(d.sort),Y=c.isArray||function(a){return"[object Array]"===P(a)},Z=1!==[].unshift(0);J(d,{unshift:function(){return o.apply(this,arguments),this.length}},Z),J(c,{isArray:Y});var $=e("a"),_="a"!==$[0]||!(0 in $),aa=function(a){var b=!0,c=!0,d=!1;if(a)try{a.call("foo",function(a,c,d){"object"!=typeof d&&(b=!1)}),a.call([1],function(){"use strict";c="string"==typeof this},"x")}catch(e){d=!0}return!!a&&!d&&b&&c};J(d,{forEach:function(a){var c,d=M.ToObject(this),e=_&&E(this)?T(this,""):d,f=-1,g=M.ToUint32(e.length);if(arguments.length>1&&(c=arguments[1]),!b(a))throw new TypeError("Array.prototype.forEach callback must be a function");for(;++f<g;)f in e&&("undefined"==typeof c?a(e[f],f,d):a.call(c,e[f],f,d))}},!aa(d.forEach)),J(d,{map:function(a){var d,e=M.ToObject(this),f=_&&E(this)?T(this,""):e,g=M.ToUint32(f.length),h=c(g);if(arguments.length>1&&(d=arguments[1]),!b(a))throw new TypeError("Array.prototype.map callback must be a function");for(var i=0;g>i;i++)i in f&&("undefined"==typeof d?h[i]=a(f[i],i,e):h[i]=a.call(d,f[i],i,e));return h}},!aa(d.map)),J(d,{filter:function(a){var c,d,e=M.ToObject(this),f=_&&E(this)?T(this,""):e,g=M.ToUint32(f.length),h=[];if(arguments.length>1&&(d=arguments[1]),!b(a))throw new TypeError("Array.prototype.filter callback must be a function");for(var i=0;g>i;i++)i in f&&(c=f[i],("undefined"==typeof d?a(c,i,e):a.call(d,c,i,e))&&V(h,c));return h}},!aa(d.filter)),J(d,{every:function(a){var c,d=M.ToObject(this),e=_&&E(this)?T(this,""):d,f=M.ToUint32(e.length);if(arguments.length>1&&(c=arguments[1]),!b(a))throw new TypeError("Array.prototype.every callback must be a function");for(var g=0;f>g;g++)if(g in e&&!("undefined"==typeof c?a(e[g],g,d):a.call(c,e[g],g,d)))return!1;return!0}},!aa(d.every)),J(d,{some:function(a){var c,d=M.ToObject(this),e=_&&E(this)?T(this,""):d,f=M.ToUint32(e.length);if(arguments.length>1&&(c=arguments[1]),!b(a))throw new TypeError("Array.prototype.some callback must be a function");for(var g=0;f>g;g++)if(g in e&&("undefined"==typeof c?a(e[g],g,d):a.call(c,e[g],g,d)))return!0;return!1}},!aa(d.some));var ba=!1;d.reduce&&(ba="object"==typeof d.reduce.call("es5",function(a,b,c,d){return d})),J(d,{reduce:function(a){var c=M.ToObject(this),d=_&&E(this)?T(this,""):c,e=M.ToUint32(d.length);if(!b(a))throw new TypeError("Array.prototype.reduce callback must be a function");if(0===e&&1===arguments.length)throw new TypeError("reduce of empty array with no initial value");var f,g=0;if(arguments.length>=2)f=arguments[1];else for(;;){if(g in d){f=d[g++];break}if(++g>=e)throw new TypeError("reduce of empty array with no initial value")}for(;e>g;g++)g in d&&(f=a(f,d[g],g,c));return f}},!ba);var ca=!1;d.reduceRight&&(ca="object"==typeof d.reduceRight.call("es5",function(a,b,c,d){return d})),J(d,{reduceRight:function(a){var c=M.ToObject(this),d=_&&E(this)?T(this,""):c,e=M.ToUint32(d.length);if(!b(a))throw new TypeError("Array.prototype.reduceRight callback must be a function");if(0===e&&1===arguments.length)throw new TypeError("reduceRight of empty array with no initial value");var f,g=e-1;if(arguments.length>=2)f=arguments[1];else for(;;){if(g in d){f=d[g--];break}if(--g<0)throw new TypeError("reduceRight of empty array with no initial value")}if(0>g)return f;do g in d&&(f=a(f,d[g],g,c));while(g--);return f}},!ca);var da=d.indexOf&&-1!==[0,1].indexOf(1,2);J(d,{indexOf:function(a){var b=_&&E(this)?T(this,""):M.ToObject(this),c=M.ToUint32(b.length);if(0===c)return-1;var d=0;for(arguments.length>1&&(d=M.ToInteger(arguments[1])),d=d>=0?d:s(0,c+d);c>d;d++)if(d in b&&b[d]===a)return d;return-1}},da);var ea=d.lastIndexOf&&-1!==[0,1].lastIndexOf(0,-3);J(d,{lastIndexOf:function(a){var b=_&&E(this)?T(this,""):M.ToObject(this),c=M.ToUint32(b.length);if(0===c)return-1;var d=c-1;for(arguments.length>1&&(d=t(d,M.ToInteger(arguments[1]))),d=d>=0?d:c-Math.abs(d);d>=0;d--)if(d in b&&a===b[d])return d;return-1}},ea);var fa=function(){var a=[1,2],b=a.splice();return 2===a.length&&Y(b)&&0===b.length}();J(d,{splice:function(a,b){return 0===arguments.length?[]:m.apply(this,arguments)}},!fa);var ga=function(){var a={};return d.splice.call(a,0,0,1),1===a.length}();J(d,{splice:function(a,b){if(0===arguments.length)return[];var c=arguments;return this.length=s(M.ToInteger(this.length),0),arguments.length>0&&"number"!=typeof b&&(c=Q(arguments),c.length<2?V(c,this.length-a):c[1]=M.ToInteger(b)),m.apply(this,c)}},!ga);var ha=function(){var a=new c(1e5);return a[8]="x",a.splice(1,1),7===a.indexOf("x")}(),ia=function(){var a=256,b=[];return b[a]="a",b.splice(a+1,0,"b"),"a"===b[a]}();J(d,{splice:function(a,b){for(var c,d=M.ToObject(this),e=[],f=M.ToUint32(d.length),g=M.ToInteger(a),i=0>g?s(f+g,0):t(g,f),j=t(s(M.ToInteger(b),0),f-i),k=0;j>k;)c=h(i+k),O(d,c)&&(e[k]=d[c]),k+=1;var l,m=Q(arguments,2),n=m.length;if(j>n){for(k=i;f-j>k;)c=h(k+j),l=h(k+n),O(d,c)?d[l]=d[c]:delete d[l],k+=1;for(k=f;k>f-j+n;)delete d[k-1],k-=1}else if(n>j)for(k=f-j;k>i;)c=h(k+j-1),l=h(k+n-1),O(d,c)?d[l]=d[c]:delete d[l],k-=1;k=i;for(var o=0;o<m.length;++o)d[k]=m[o],k+=1;return d.length=f-j+n,e}},!ha||!ia);var ja,ka=d.join;try{ja="1,2,3"!==Array.prototype.join.call("123",",")}catch(la){ja=!0}ja&&J(d,{join:function(a){var b="undefined"==typeof a?",":a;return ka.call(E(this)?T(this,""):this,b)}},ja);var ma="1,2"!==[1,2].join(void 0);ma&&J(d,{join:function(a){var b="undefined"==typeof a?",":a;return ka.call(this,b)}},ma);var na=function(a){for(var b=M.ToObject(this),c=M.ToUint32(b.length),d=0;d<arguments.length;)b[c+d]=arguments[d],d+=1;return b.length=c+d,c+d},oa=function(){var a={},b=Array.prototype.push.call(a,void 0);return 1!==b||1!==a.length||"undefined"!=typeof a[0]||!O(a,0)}();J(d,{push:function(a){return Y(this)?n.apply(this,arguments):na.apply(this,arguments)}},oa);var pa=function(){var a=[],b=a.push(void 0);return 1!==b||1!==a.length||"undefined"!=typeof a[0]||!O(a,0)}();J(d,{push:na},pa),J(d,{slice:function(a,b){var c=E(this)?T(this,""):this;return R(c,arguments)}},_);var qa=function(){try{return[1,2].sort(null),[1,2].sort({}),!0}catch(a){}return!1}(),ra=function(){try{return[1,2].sort(/a/),!1}catch(a){}return!0}(),sa=function(){try{return[1,2].sort(void 0),!0}catch(a){}return!1}();J(d,{sort:function(a){if("undefined"==typeof a)return X(this);if(!b(a))throw new TypeError("Array.prototype.sort callback must be a function");return X(this,a)}},qa||!sa||!ra);var ta=!{toString:null}.propertyIsEnumerable("toString"),ua=function(){}.propertyIsEnumerable("prototype"),va=!O("x","0"),wa=function(a){var b=a.constructor;return b&&b.prototype===a},xa={$window:!0,$console:!0,$parent:!0,$self:!0,$frame:!0,$frames:!0,$frameElement:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$external:!0},ya=function(){if("undefined"==typeof a)return!1;for(var b in a)try{!xa["$"+b]&&O(a,b)&&null!==a[b]&&"object"==typeof a[b]&&wa(a[b])}catch(c){return!0}return!1}(),za=function(b){if("undefined"==typeof a||!ya)return wa(b);try{return wa(b)}catch(c){return!1}},Aa=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],Ba=Aa.length,Ca=function(a){return"[object Arguments]"===P(a)},Da=function(a){return null!==a&&"object"==typeof a&&"number"==typeof a.length&&a.length>=0&&!Y(a)&&b(a.callee)},Ea=Ca(arguments)?Ca:Da;J(e,{keys:function(a){var c=b(a),d=Ea(a),e=null!==a&&"object"==typeof a,f=e&&E(a);if(!e&&!c&&!d)throw new TypeError("Object.keys called on a non-object");var g=[],i=ua&&c;if(f&&va||d)for(var j=0;j<a.length;++j)V(g,h(j));if(!d)for(var k in a)i&&"prototype"===k||!O(a,k)||V(g,h(k));if(ta)for(var l=za(a),m=0;Ba>m;m++){var n=Aa[m];l&&"constructor"===n||!O(a,n)||V(g,n)}return g}});var Fa=e.keys&&function(){return 2===e.keys(arguments).length}(1,2),Ga=e.keys&&function(){var a=e.keys(arguments);return 1!==arguments.length||1!==a.length||1!==a[0]}(1),Ha=e.keys;J(e,{keys:function(a){return Ha(Ea(a)?Q(a):a)}},!Fa||Ga);var Ia,Ja,Ka=0!==new Date(-0xc782b5b342b24).getUTCMonth(),La=new Date(-0x55d318d56a724),Ma=new Date(14496624e5),Na="Mon, 01 Jan -45875 11:59:59 GMT"!==La.toUTCString(),Oa=La.getTimezoneOffset();-720>Oa?(Ia="Tue Jan 02 -45875"!==La.toDateString(),Ja=!/^Thu Dec 10 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/.test(Ma.toString())):(Ia="Mon Jan 01 -45875"!==La.toDateString(),Ja=!/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/.test(Ma.toString()));var Pa=q.bind(Date.prototype.getFullYear),Qa=q.bind(Date.prototype.getMonth),Ra=q.bind(Date.prototype.getDate),Sa=q.bind(Date.prototype.getUTCFullYear),Ta=q.bind(Date.prototype.getUTCMonth),Ua=q.bind(Date.prototype.getUTCDate),Va=q.bind(Date.prototype.getUTCDay),Wa=q.bind(Date.prototype.getUTCHours),Xa=q.bind(Date.prototype.getUTCMinutes),Ya=q.bind(Date.prototype.getUTCSeconds),Za=q.bind(Date.prototype.getUTCMilliseconds),$a=["Sun","Mon","Tue","Wed","Thu","Fri"],_a=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],ab=function(a,b){return Ra(new Date(b,a,0))};J(Date.prototype,{getFullYear:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var a=Pa(this);return 0>a&&Qa(this)>11?a+1:a},getMonth:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var a=Pa(this),b=Qa(this);return 0>a&&b>11?0:b},getDate:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var a=Pa(this),b=Qa(this),c=Ra(this);if(0>a&&b>11){if(12===b)return c;var d=ab(0,a+1);return d-c+1}return c},getUTCFullYear:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var a=Sa(this);return 0>a&&Ta(this)>11?a+1:a},getUTCMonth:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var a=Sa(this),b=Ta(this);return 0>a&&b>11?0:b},getUTCDate:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var a=Sa(this),b=Ta(this),c=Ua(this);if(0>a&&b>11){if(12===b)return c;var d=ab(0,a+1);return d-c+1}return c}},Ka),J(Date.prototype,{toUTCString:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var a=Va(this),b=Ua(this),c=Ta(this),d=Sa(this),e=Wa(this),f=Xa(this),g=Ya(this);return $a[a]+", "+(10>b?"0"+b:b)+" "+_a[c]+" "+d+" "+(10>e?"0"+e:e)+":"+(10>f?"0"+f:f)+":"+(10>g?"0"+g:g)+" GMT"}},Ka||Na),J(Date.prototype,{toDateString:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var a=this.getDay(),b=this.getDate(),c=this.getMonth(),d=this.getFullYear();return $a[a]+" "+_a[c]+" "+(10>b?"0"+b:b)+" "+d}},Ka||Ia),(Ka||Ja)&&(Date.prototype.toString=function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var a=this.getDay(),b=this.getDate(),c=this.getMonth(),d=this.getFullYear(),e=this.getHours(),f=this.getMinutes(),g=this.getSeconds(),h=this.getTimezoneOffset(),i=Math.floor(Math.abs(h)/60),j=Math.floor(Math.abs(h)%60);return $a[a]+" "+_a[c]+" "+(10>b?"0"+b:b)+" "+d+" "+(10>e?"0"+e:e)+":"+(10>f?"0"+f:f)+":"+(10>g?"0"+g:g)+" GMT"+(h>0?"-":"+")+(10>i?"0"+i:i)+(10>j?"0"+j:j)},I&&e.defineProperty(Date.prototype,"toString",{configurable:!0,enumerable:!1,writable:!0}));var bb=-621987552e5,cb="-000001",db=Date.prototype.toISOString&&-1===new Date(bb).toISOString().indexOf(cb),eb=Date.prototype.toISOString&&"1969-12-31T23:59:59.999Z"!==new Date(-1).toISOString();J(Date.prototype,{toISOString:function(){if(!isFinite(this))throw new RangeError("Date.prototype.toISOString called on non-finite value.");var a=Sa(this),b=Ta(this);a+=Math.floor(b/12),b=(b%12+12)%12;var c=[b+1,Ua(this),Wa(this),Xa(this),Ya(this)];a=(0>a?"-":a>9999?"+":"")+S("00000"+Math.abs(a),a>=0&&9999>=a?-4:-6);for(var d=0;d<c.length;++d)c[d]=S("00"+c[d],-2);return a+"-"+Q(c,0,2).join("-")+"T"+Q(c,2).join(":")+"."+S("000"+Za(this),-3)+"Z"}},db||eb);var fb=function(){try{return Date.prototype.toJSON&&null===new Date(NaN).toJSON()&&-1!==new Date(bb).toJSON().indexOf(cb)&&Date.prototype.toJSON.call({toISOString:function(){return!0}})}catch(a){return!1}}();fb||(Date.prototype.toJSON=function(a){var c=e(this),d=M.ToPrimitive(c);if("number"==typeof d&&!isFinite(d))return null;var f=c.toISOString;if(!b(f))throw new TypeError("toISOString property is not callable");return f.call(c)});var gb=1e15===Date.parse("+033658-09-27T01:46:40.000Z"),hb=!isNaN(Date.parse("2012-04-04T24:00:00.500Z"))||!isNaN(Date.parse("2012-11-31T23:59:59.000Z"))||!isNaN(Date.parse("2012-12-31T23:59:60.000Z")),ib=isNaN(Date.parse("2000-01-01T00:00:00.000Z"));if(ib||hb||!gb){var jb=Math.pow(2,31)-1,kb=L(new Date(1970,0,1,0,0,0,jb+1).getTime());Date=function(a){var b=function(c,d,e,f,g,i,j){var k,l=arguments.length;if(this instanceof a){var m=i,n=j;if(kb&&l>=7&&j>jb){var o=Math.floor(j/jb)*jb,p=Math.floor(o/1e3);m+=p,n-=1e3*p}k=1===l&&h(c)===c?new a(b.parse(c)):l>=7?new a(c,d,e,f,g,m,n):l>=6?new a(c,d,e,f,g,m):l>=5?new a(c,d,e,f,g):l>=4?new a(c,d,e,f):l>=3?new a(c,d,e):l>=2?new a(c,d):l>=1?new a(c):new a}else k=a.apply(this,arguments);return K(k)||J(k,{constructor:b},!0),k},c=new RegExp("^(\\d{4}|[+-]\\d{6})(?:-(\\d{2})(?:-(\\d{2})(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:(\\.\\d{1,}))?)?(Z|(?:([-+])(\\d{2}):(\\d{2})))?)?)?)?$"),d=[0,31,59,90,120,151,181,212,243,273,304,334,365],e=function(a,b){var c=b>1?1:0;return d[b]+Math.floor((a-1969+c)/4)-Math.floor((a-1901+c)/100)+Math.floor((a-1601+c)/400)+365*(a-1970)},f=function(b){var c=0,d=b;if(kb&&d>jb){var e=Math.floor(d/jb)*jb,f=Math.floor(e/1e3);c+=f,d-=1e3*f}return j(new a(1970,0,1,0,0,c,d))};for(var g in a)O(a,g)&&(b[g]=a[g]);J(b,{now:a.now,UTC:a.UTC},!0),b.prototype=a.prototype,J(b.prototype,{constructor:b},!0);var i=function(b){var d=c.exec(b);if(d){var g,h=j(d[1]),i=j(d[2]||1)-1,k=j(d[3]||1)-1,l=j(d[4]||0),m=j(d[5]||0),n=j(d[6]||0),o=Math.floor(1e3*j(d[7]||0)),p=Boolean(d[4]&&!d[8]),q="-"===d[9]?1:-1,r=j(d[10]||0),s=j(d[11]||0),t=m>0||n>0||o>0;return(t?24:25)>l&&60>m&&60>n&&1e3>o&&i>-1&&12>i&&24>r&&60>s&&k>-1&&k<e(h,i+1)-e(h,i)&&(g=60*(24*(e(h,i)+k)+l+r*q),g=1e3*(60*(g+m+s*q)+n)+o,p&&(g=f(g)),g>=-864e13&&864e13>=g)?g:NaN}return a.parse.apply(this,arguments)};return J(b,{parse:i}),b}(Date)}Date.now||(Date.now=function(){return(new Date).getTime()});var lb=k.toFixed&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==0xde0b6b3a7640080.toFixed(0)),mb={base:1e7,size:6,data:[0,0,0,0,0,0],multiply:function(a,b){for(var c=-1,d=b;++c<mb.size;)d+=a*mb.data[c],mb.data[c]=d%mb.base,d=Math.floor(d/mb.base)},divide:function(a){for(var b=mb.size,c=0;--b>=0;)c+=mb.data[b],mb.data[b]=Math.floor(c/a),c=c%a*mb.base},numToString:function(){for(var a=mb.size,b="";--a>=0;)if(""!==b||0===a||0!==mb.data[a]){var c=h(mb.data[a]);""===b?b=c:b+=S("0000000",0,7-c.length)+c}return b},pow:function Gb(a,b,c){return 0===b?c:b%2===1?Gb(a,b-1,c*a):Gb(a*a,b/2,c)},log:function(a){for(var b=0,c=a;c>=4096;)b+=12,c/=4096;for(;c>=2;)b+=1,c/=2;return b}},nb=function(a){var b,c,d,e,f,g,i,k;if(b=j(a),b=L(b)?0:Math.floor(b),0>b||b>20)throw new RangeError("Number.toFixed called with invalid number of decimals");if(c=j(this),L(c))return"NaN";if(-1e21>=c||c>=1e21)return h(c);if(d="",0>c&&(d="-",c=-c),e="0",c>1e-21)if(f=mb.log(c*mb.pow(2,69,1))-69,g=0>f?c*mb.pow(2,-f,1):c/mb.pow(2,f,1),g*=4503599627370496,f=52-f,f>0){for(mb.multiply(0,g),i=b;i>=7;)mb.multiply(1e7,0),i-=7;for(mb.multiply(mb.pow(10,i,1),0),i=f-1;i>=23;)mb.divide(1<<23),i-=23;mb.divide(1<<i),mb.multiply(1,1),mb.divide(2),e=mb.numToString()}else mb.multiply(0,g),mb.multiply(1<<-f,0),e=mb.numToString()+S("0.00000000000000000000",2,2+b);return b>0?(k=e.length,e=b>=k?d+S("0.0000000000000000000",0,b-k+2)+e:d+S(e,0,k-b)+"."+S(e,k-b)):e=d+e,e};J(k,{toFixed:nb},lb);var ob=function(){try{return"1"===1..toPrecision(void 0)}catch(a){return!0}}(),pb=k.toPrecision;J(k,{toPrecision:function(a){return"undefined"==typeof a?pb.call(this):pb.call(this,a)}},ob),2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?!function(){var a="undefined"==typeof/()??/.exec("")[1],b=Math.pow(2,32)-1;i.split=function(c,d){var e=String(this);if("undefined"==typeof c&&0===d)return[];if(!A(c))return T(this,c,d);var f,g,h,i,j=[],k=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(c.sticky?"y":""),l=0,m=new RegExp(c.source,k+"g");a||(f=new RegExp("^"+m.source+"$(?!\\s)",k));var o="undefined"==typeof d?b:M.ToUint32(d);for(g=m.exec(e);g&&(h=g.index+g[0].length,!(h>l&&(V(j,S(e,l,g.index)),!a&&g.length>1&&g[0].replace(f,function(){for(var a=1;a<arguments.length-2;a++)"undefined"==typeof arguments[a]&&(g[a]=void 0)}),g.length>1&&g.index<e.length&&n.apply(j,Q(g,1)),i=g[0].length,l=h,j.length>=o)));)m.lastIndex===g.index&&m.lastIndex++,g=m.exec(e);return l===e.length?(i||!m.test(""))&&V(j,""):V(j,S(e,l)),j.length>o?S(j,0,o):j}}():"0".split(void 0,0).length&&(i.split=function(a,b){return"undefined"==typeof a&&0===b?[]:T(this,a,b)});var qb=i.replace,rb=function(){var a=[];return"x".replace(/x(.)?/g,function(b,c){V(a,c)}),1===a.length&&"undefined"==typeof a[0]}();rb||(i.replace=function(a,c){var d=b(c),e=A(a)&&/\)[*?]/.test(a.source);if(d&&e){var f=function(b){var d=arguments.length,e=a.lastIndex;a.lastIndex=0;var f=a.exec(b)||[];return a.lastIndex=e,V(f,arguments[d-2],arguments[d-1]),c.apply(this,f)};return qb.call(this,a,f)}return qb.call(this,a,c)});var sb=i.substr,tb="".substr&&"b"!=="0b".substr(-1);J(i,{substr:function(a,b){var c=a;return 0>a&&(c=s(this.length+a,0)),sb.call(this,c,b)}},tb);var ub="	\n\f\r   ᠎             　\u2028\u2029\ufeff",vb="​",wb="["+ub+"]",xb=new RegExp("^"+wb+wb+"*"),yb=new RegExp(wb+wb+"*$"),zb=i.trim&&(ub.trim()||!vb.trim());J(i,{trim:function(){if("undefined"==typeof this||null===this)throw new TypeError("can't convert "+this+" to object");return h(this).replace(xb,"").replace(yb,"")}},zb);var Ab=q.bind(String.prototype.trim),Bb=i.lastIndexOf&&-1!=="abcあい".lastIndexOf("あい",2);J(i,{lastIndexOf:function(a){if("undefined"==typeof this||null===this)throw new TypeError("can't convert "+this+" to object");for(var b=h(this),c=h(a),d=arguments.length>1?j(arguments[1]):NaN,e=L(d)?1/0:M.ToInteger(d),f=t(s(e,0),b.length),g=c.length,i=f+g;i>0;){i=s(0,i-g);var k=U(S(b,i,f+g),c);if(-1!==k)return i+k}return-1}},Bb);var Cb=i.lastIndexOf;if(J(i,{lastIndexOf:function(a){return Cb.apply(this,arguments)}},1!==i.lastIndexOf.length),(8!==parseInt(ub+"08")||22!==parseInt(ub+"0x16"))&&(parseInt=function(a){var b=/^[\-+]?0[xX]/;return function(c,d){var e=Ab(c),f=j(d)||(b.test(e)?16:10);return a(e,f)}}(parseInt)),1/parseFloat("-0")!==-(1/0)&&(parseFloat=function(a){return function(b){var c=Ab(b),d=a(c);return 0===d&&"-"===S(c,0,1)?-0:d}}(parseFloat)),"RangeError: test"!==String(new RangeError("test"))){var Db=function(){if("undefined"==typeof this||null===this)throw new TypeError("can't convert "+this+" to object");var a=this.name;"undefined"==typeof a?a="Error":"string"!=typeof a&&(a=h(a));var b=this.message;return"undefined"==typeof b?b="":"string"!=typeof b&&(b=h(b)),a?b?a+": "+b:a:b};Error.prototype.toString=Db}if(I){var Eb=function(a,b){if(W(a,b)){var c=Object.getOwnPropertyDescriptor(a,b);c.enumerable=!1,Object.defineProperty(a,b,c)}};Eb(Error.prototype,"message"),""!==Error.prototype.message&&(Error.prototype.message=""),Eb(Error.prototype,"name")}if("/a/gim"!==String(/a/gim)){var Fb=function(){var a="/"+this.source+"/";return this.global&&(a+="g"),this.ignoreCase&&(a+="i"),this.multiline&&(a+="m"),a};RegExp.prototype.toString=Fb}}),function(a,b){"use strict";"function"==typeof define&&define.amd?define(b):"object"==typeof exports?module.exports=b():a.returnExports=b()}(this,function(){var a,c,d,e,f=Function.call,g=Object.prototype,h=f.bind(g.hasOwnProperty),i=f.bind(g.propertyIsEnumerable),j=f.bind(g.toString),k=h(g,"__defineGetter__");k&&(a=f.bind(g.__defineGetter__),c=f.bind(g.__defineSetter__),d=f.bind(g.__lookupGetter__),e=f.bind(g.__lookupSetter__)),Object.getPrototypeOf||(Object.getPrototypeOf=function(a){var b=a.__proto__;return b||null===b?b:"[object Function]"===j(a.constructor)?a.constructor.prototype:a instanceof Object?g:null});var l=function(a){try{return a.sentinel=0,0===Object.getOwnPropertyDescriptor(a,"sentinel").value}catch(b){return!1}};if(Object.defineProperty){var m=l({}),n="undefined"==typeof b||l(b.createElement("div"));if(!n||!m)var o=Object.getOwnPropertyDescriptor}if(!Object.getOwnPropertyDescriptor||o){var p="Object.getOwnPropertyDescriptor called on a non-object: ";Object.getOwnPropertyDescriptor=function(a,b){if("object"!=typeof a&&"function"!=typeof a||null===a)throw new TypeError(p+a);if(o)try{return o.call(Object,a,b)}catch(c){}var f;if(!h(a,b))return f;if(f={enumerable:i(a,b),configurable:!0},k){var j=a.__proto__,l=a!==g;l&&(a.__proto__=g);var m=d(a,b),n=e(a,b);if(l&&(a.__proto__=j),m||n)return m&&(f.get=m),n&&(f.set=n),f}return f.value=a[b],f.writable=!0,f}}if(Object.getOwnPropertyNames||(Object.getOwnPropertyNames=function(a){return Object.keys(a)}),!Object.create){var q,r=!({__proto__:null}instanceof Object),s=function(){if(!b.domain)return!1;try{return!!new ActiveXObject("htmlfile")}catch(a){return!1}},t=function(){var a,b;return b=new ActiveXObject("htmlfile"),b.write("<script></script>"),b.close(),a=b.parentWindow.Object.prototype,b=null,a},u=function(){var a,c=b.createElement("iframe"),d=b.body||b.documentElement;return c.style.display="none",d.appendChild(c),c.src="javascript:",a=c.contentWindow.Object.prototype,d.removeChild(c),c=null,a};q=r||"undefined"==typeof b?function(){return{__proto__:null}}:function(){var a=s()?t():u();delete a.constructor,delete a.hasOwnProperty,delete a.propertyIsEnumerable,delete a.isPrototypeOf,delete a.toLocaleString,delete a.toString,delete a.valueOf;var b=function(){};return b.prototype=a,q=function(){return new b},new b},Object.create=function(a,b){var c,d=function(){};if(null===a)c=q();else{if("object"!=typeof a&&"function"!=typeof a)throw new TypeError("Object prototype may only be an Object or null");d.prototype=a,c=new d,c.__proto__=a}return void 0!==b&&Object.defineProperties(c,b),c}}var v=function(a){try{return Object.defineProperty(a,"sentinel",{}),"sentinel"in a}catch(b){return!1}};if(Object.defineProperty){var w=v({}),x="undefined"==typeof b||v(b.createElement("div"));if(!w||!x)var y=Object.defineProperty,z=Object.defineProperties}if(!Object.defineProperty||y){var A="Property description must be an object: ",B="Object.defineProperty called on non-object: ",C="getters & setters can not be defined on this javascript engine";Object.defineProperty=function(b,f,h){if("object"!=typeof b&&"function"!=typeof b||null===b)throw new TypeError(B+b);if("object"!=typeof h&&"function"!=typeof h||null===h)throw new TypeError(A+h);if(y)try{return y.call(Object,b,f,h)}catch(i){}if("value"in h)if(k&&(d(b,f)||e(b,f))){var j=b.__proto__;b.__proto__=g,delete b[f],b[f]=h.value,b.__proto__=j}else b[f]=h.value;else{if(!k&&("get"in h||"set"in h))throw new TypeError(C);"get"in h&&a(b,f,h.get),"set"in h&&c(b,f,h.set)}return b}}(!Object.defineProperties||z)&&(Object.defineProperties=function(a,b){if(z)try{return z.call(Object,a,b)}catch(c){}return Object.keys(b).forEach(function(c){"__proto__"!==c&&Object.defineProperty(a,c,b[c])}),a}),Object.seal||(Object.seal=function(a){if(Object(a)!==a)throw new TypeError("Object.seal can only be called on Objects.");return a}),Object.freeze||(Object.freeze=function(a){if(Object(a)!==a)throw new TypeError("Object.freeze can only be called on Objects.");return a});try{Object.freeze(function(){})}catch(D){Object.freeze=function(a){return function(b){return"function"==typeof b?b:a(b)}}(Object.freeze)}Object.preventExtensions||(Object.preventExtensions=function(a){if(Object(a)!==a)throw new TypeError("Object.preventExtensions can only be called on Objects.");return a}),Object.isSealed||(Object.isSealed=function(a){if(Object(a)!==a)throw new TypeError("Object.isSealed can only be called on Objects.");return!1}),Object.isFrozen||(Object.isFrozen=function(a){if(Object(a)!==a)throw new TypeError("Object.isFrozen can only be called on Objects.");return!1}),Object.isExtensible||(Object.isExtensible=function(a){if(Object(a)!==a)throw new TypeError("Object.isExtensible can only be called on Objects.");for(var b="";h(a,b);)b+="?";a[b]=!0;var c=h(a,b);return delete a[b],c})})}(window,document);
// /Users/michaelmartinez/webviewer/Content/js/video.js
/**
 * @license
 * Video.js 5.11.6 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/master/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
 */

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.videojs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
    (function (global){
        var topLevel = typeof global !== 'undefined' ? global :
            typeof window !== 'undefined' ? window : {}
        var minDoc = _dereq_('min-document');

        if (typeof document !== 'undefined') {
            module.exports = document;
        } else {
            var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

            if (!doccy) {
                doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
            }

            module.exports = doccy;
        }

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9nbG9iYWwvZG9jdW1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9wTGV2ZWwgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6XG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fVxudmFyIG1pbkRvYyA9IHJlcXVpcmUoJ21pbi1kb2N1bWVudCcpO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQ7XG59IGVsc2Uge1xuICAgIHZhciBkb2NjeSA9IHRvcExldmVsWydfX0dMT0JBTF9ET0NVTUVOVF9DQUNIRUA0J107XG5cbiAgICBpZiAoIWRvY2N5KSB7XG4gICAgICAgIGRvY2N5ID0gdG9wTGV2ZWxbJ19fR0xPQkFMX0RPQ1VNRU5UX0NBQ0hFQDQnXSA9IG1pbkRvYztcbiAgICB9XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGRvY2N5O1xufVxuIl19
},{"min-document":3}],2:[function(_dereq_,module,exports){
    (function (global){
        if (typeof window !== "undefined") {
            module.exports = window;
        } else if (typeof global !== "undefined") {
            module.exports = global;
        } else if (typeof self !== "undefined"){
            module.exports = self;
        } else {
            module.exports = {};
        }

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9nbG9iYWwvd2luZG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBzZWxmO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHt9O1xufVxuIl19
},{}],3:[function(_dereq_,module,exports){

},{}],4:[function(_dereq_,module,exports){
    var getNative = _dereq_('../internal/getNative');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeNow = getNative(Date, 'now');

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
            return new Date().getTime();
        };

    module.exports = now;

},{"../internal/getNative":20}],5:[function(_dereq_,module,exports){
    var isObject = _dereq_('../lang/isObject'),
        now = _dereq_('../date/now');

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max;

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it's invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
 *   'maxWait': 1000
 * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
 *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
 *     todoChanges.cancel();
 *   }
 * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
        var args,
            maxTimeoutId,
            result,
            stamp,
            thisArg,
            timeoutId,
            trailingCall,
            lastCalled = 0,
            maxWait = false,
            trailing = true;

        if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = wait < 0 ? 0 : (+wait || 0);
        if (options === true) {
            var leading = true;
            trailing = false;
        } else if (isObject(options)) {
            leading = !!options.leading;
            maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
            trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function cancel() {
            if (timeoutId) {
                clearTimeout(timeoutId);
            }
            if (maxTimeoutId) {
                clearTimeout(maxTimeoutId);
            }
            lastCalled = 0;
            maxTimeoutId = timeoutId = trailingCall = undefined;
        }

        function complete(isCalled, id) {
            if (id) {
                clearTimeout(id);
            }
            maxTimeoutId = timeoutId = trailingCall = undefined;
            if (isCalled) {
                lastCalled = now();
                result = func.apply(thisArg, args);
                if (!timeoutId && !maxTimeoutId) {
                    args = thisArg = undefined;
                }
            }
        }

        function delayed() {
            var remaining = wait - (now() - stamp);
            if (remaining <= 0 || remaining > wait) {
                complete(trailingCall, maxTimeoutId);
            } else {
                timeoutId = setTimeout(delayed, remaining);
            }
        }

        function maxDelayed() {
            complete(trailing, timeoutId);
        }

        function debounced() {
            args = arguments;
            stamp = now();
            thisArg = this;
            trailingCall = trailing && (timeoutId || !leading);

            if (maxWait === false) {
                var leadingCall = leading && !timeoutId;
            } else {
                if (!maxTimeoutId && !leading) {
                    lastCalled = stamp;
                }
                var remaining = maxWait - (stamp - lastCalled),
                    isCalled = remaining <= 0 || remaining > maxWait;

                if (isCalled) {
                    if (maxTimeoutId) {
                        maxTimeoutId = clearTimeout(maxTimeoutId);
                    }
                    lastCalled = stamp;
                    result = func.apply(thisArg, args);
                }
                else if (!maxTimeoutId) {
                    maxTimeoutId = setTimeout(maxDelayed, remaining);
                }
            }
            if (isCalled && timeoutId) {
                timeoutId = clearTimeout(timeoutId);
            }
            else if (!timeoutId && wait !== maxWait) {
                timeoutId = setTimeout(delayed, wait);
            }
            if (leadingCall) {
                isCalled = true;
                result = func.apply(thisArg, args);
            }
            if (isCalled && !timeoutId && !maxTimeoutId) {
                args = thisArg = undefined;
            }
            return result;
        }
        debounced.cancel = cancel;
        return debounced;
    }

    module.exports = debounce;

},{"../date/now":4,"../lang/isObject":33}],6:[function(_dereq_,module,exports){
    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max;

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function restParam(func, start) {
        if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
        return function() {
            var args = arguments,
                index = -1,
                length = nativeMax(args.length - start, 0),
                rest = Array(length);

            while (++index < length) {
                rest[index] = args[start + index];
            }
            switch (start) {
                case 0: return func.call(this, rest);
                case 1: return func.call(this, args[0], rest);
                case 2: return func.call(this, args[0], args[1], rest);
            }
            var otherArgs = Array(start + 1);
            index = -1;
            while (++index < start) {
                otherArgs[index] = args[index];
            }
            otherArgs[start] = rest;
            return func.apply(this, otherArgs);
        };
    }

    module.exports = restParam;

},{}],7:[function(_dereq_,module,exports){
    var debounce = _dereq_('./debounce'),
        isObject = _dereq_('../lang/isObject');

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
 *   'trailing': false
 * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (options === false) {
            leading = false;
        } else if (isObject(options)) {
            leading = 'leading' in options ? !!options.leading : leading;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
    }

    module.exports = throttle;

},{"../lang/isObject":33,"./debounce":5}],8:[function(_dereq_,module,exports){
    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
        var index = -1,
            length = source.length;

        array || (array = Array(length));
        while (++index < length) {
            array[index] = source[index];
        }
        return array;
    }

    module.exports = arrayCopy;

},{}],9:[function(_dereq_,module,exports){
    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
        var index = -1,
            length = array.length;

        while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
                break;
            }
        }
        return array;
    }

    module.exports = arrayEach;

},{}],10:[function(_dereq_,module,exports){
    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, props, object) {
        object || (object = {});

        var index = -1,
            length = props.length;

        while (++index < length) {
            var key = props[index];
            object[key] = source[key];
        }
        return object;
    }

    module.exports = baseCopy;

},{}],11:[function(_dereq_,module,exports){
    var createBaseFor = _dereq_('./createBaseFor');

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    module.exports = baseFor;

},{"./createBaseFor":18}],12:[function(_dereq_,module,exports){
    var baseFor = _dereq_('./baseFor'),
        keysIn = _dereq_('../object/keysIn');

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
        return baseFor(object, iteratee, keysIn);
    }

    module.exports = baseForIn;

},{"../object/keysIn":39,"./baseFor":11}],13:[function(_dereq_,module,exports){
    var arrayEach = _dereq_('./arrayEach'),
        baseMergeDeep = _dereq_('./baseMergeDeep'),
        isArray = _dereq_('../lang/isArray'),
        isArrayLike = _dereq_('./isArrayLike'),
        isObject = _dereq_('../lang/isObject'),
        isObjectLike = _dereq_('./isObjectLike'),
        isTypedArray = _dereq_('../lang/isTypedArray'),
        keys = _dereq_('../object/keys');

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
        if (!isObject(object)) {
            return object;
        }
        var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
            props = isSrcArr ? undefined : keys(source);

        arrayEach(props || source, function(srcValue, key) {
            if (props) {
                key = srcValue;
                srcValue = source[key];
            }
            if (isObjectLike(srcValue)) {
                stackA || (stackA = []);
                stackB || (stackB = []);
                baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
            }
            else {
                var value = object[key],
                    result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
                    isCommon = result === undefined;

                if (isCommon) {
                    result = srcValue;
                }
                if ((result !== undefined || (isSrcArr && !(key in object))) &&
                    (isCommon || (result === result ? (result !== value) : (value === value)))) {
                    object[key] = result;
                }
            }
        });
        return object;
    }

    module.exports = baseMerge;

},{"../lang/isArray":30,"../lang/isObject":33,"../lang/isTypedArray":36,"../object/keys":38,"./arrayEach":9,"./baseMergeDeep":14,"./isArrayLike":21,"./isObjectLike":26}],14:[function(_dereq_,module,exports){
    var arrayCopy = _dereq_('./arrayCopy'),
        isArguments = _dereq_('../lang/isArguments'),
        isArray = _dereq_('../lang/isArray'),
        isArrayLike = _dereq_('./isArrayLike'),
        isPlainObject = _dereq_('../lang/isPlainObject'),
        isTypedArray = _dereq_('../lang/isTypedArray'),
        toPlainObject = _dereq_('../lang/toPlainObject');

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
        var length = stackA.length,
            srcValue = source[key];

        while (length--) {
            if (stackA[length] == srcValue) {
                object[key] = stackB[length];
                return;
            }
        }
        var value = object[key],
            result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
            isCommon = result === undefined;

        if (isCommon) {
            result = srcValue;
            if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
                result = isArray(value)
                    ? value
                    : (isArrayLike(value) ? arrayCopy(value) : []);
            }
            else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                result = isArguments(value)
                    ? toPlainObject(value)
                    : (isPlainObject(value) ? value : {});
            }
            else {
                isCommon = false;
            }
        }
        // Add the source value to the stack of traversed objects and associate
        // it with its merged value.
        stackA.push(srcValue);
        stackB.push(result);

        if (isCommon) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
        } else if (result === result ? (result !== value) : (value === value)) {
            object[key] = result;
        }
    }

    module.exports = baseMergeDeep;

},{"../lang/isArguments":29,"../lang/isArray":30,"../lang/isPlainObject":34,"../lang/isTypedArray":36,"../lang/toPlainObject":37,"./arrayCopy":8,"./isArrayLike":21}],15:[function(_dereq_,module,exports){
    var toObject = _dereq_('./toObject');

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
        return function(object) {
            return object == null ? undefined : toObject(object)[key];
        };
    }

    module.exports = baseProperty;

},{"./toObject":28}],16:[function(_dereq_,module,exports){
    var identity = _dereq_('../utility/identity');

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
        if (typeof func != 'function') {
            return identity;
        }
        if (thisArg === undefined) {
            return func;
        }
        switch (argCount) {
            case 1: return function(value) {
                return func.call(thisArg, value);
            };
            case 3: return function(value, index, collection) {
                return func.call(thisArg, value, index, collection);
            };
            case 4: return function(accumulator, value, index, collection) {
                return func.call(thisArg, accumulator, value, index, collection);
            };
            case 5: return function(value, other, key, object, source) {
                return func.call(thisArg, value, other, key, object, source);
            };
        }
        return function() {
            return func.apply(thisArg, arguments);
        };
    }

    module.exports = bindCallback;

},{"../utility/identity":42}],17:[function(_dereq_,module,exports){
    var bindCallback = _dereq_('./bindCallback'),
        isIterateeCall = _dereq_('./isIterateeCall'),
        restParam = _dereq_('../function/restParam');

    /**
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
        return restParam(function(object, sources) {
            var index = -1,
                length = object == null ? 0 : sources.length,
                customizer = length > 2 ? sources[length - 2] : undefined,
                guard = length > 2 ? sources[2] : undefined,
                thisArg = length > 1 ? sources[length - 1] : undefined;

            if (typeof customizer == 'function') {
                customizer = bindCallback(customizer, thisArg, 5);
                length -= 2;
            } else {
                customizer = typeof thisArg == 'function' ? thisArg : undefined;
                length -= (customizer ? 1 : 0);
            }
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined : customizer;
                length = 1;
            }
            while (++index < length) {
                var source = sources[index];
                if (source) {
                    assigner(object, source, customizer);
                }
            }
            return object;
        });
    }

    module.exports = createAssigner;

},{"../function/restParam":6,"./bindCallback":16,"./isIterateeCall":24}],18:[function(_dereq_,module,exports){
    var toObject = _dereq_('./toObject');

    /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
            var iterable = toObject(object),
                props = keysFunc(object),
                length = props.length,
                index = fromRight ? length : -1;

            while ((fromRight ? index-- : ++index < length)) {
                var key = props[index];
                if (iteratee(iterable[key], key, iterable) === false) {
                    break;
                }
            }
            return object;
        };
    }

    module.exports = createBaseFor;

},{"./toObject":28}],19:[function(_dereq_,module,exports){
    var baseProperty = _dereq_('./baseProperty');

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    module.exports = getLength;

},{"./baseProperty":15}],20:[function(_dereq_,module,exports){
    var isNative = _dereq_('../lang/isNative');

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
        var value = object == null ? undefined : object[key];
        return isNative(value) ? value : undefined;
    }

    module.exports = getNative;

},{"../lang/isNative":32}],21:[function(_dereq_,module,exports){
    var getLength = _dereq_('./getLength'),
        isLength = _dereq_('./isLength');

    /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
    function isArrayLike(value) {
        return value != null && isLength(getLength(value));
    }

    module.exports = isArrayLike;

},{"./getLength":19,"./isLength":25}],22:[function(_dereq_,module,exports){
    /**
     * Checks if `value` is a host object in IE < 9.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
     */
    var isHostObject = (function() {
        try {
            Object({ 'toString': 0 } + '');
        } catch(e) {
            return function() { return false; };
        }
        return function(value) {
            // IE < 9 presents many host objects as `Object` objects that can coerce
            // to strings despite having improperly defined `toString` methods.
            return typeof value.toString != 'function' && typeof (value + '') == 'string';
        };
    }());

    module.exports = isHostObject;

},{}],23:[function(_dereq_,module,exports){
    /** Used to detect unsigned integer values. */
    var reIsUint = /^\d+$/;

    /**
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
        value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return value > -1 && value % 1 == 0 && value < length;
    }

    module.exports = isIndex;

},{}],24:[function(_dereq_,module,exports){
    var isArrayLike = _dereq_('./isArrayLike'),
        isIndex = _dereq_('./isIndex'),
        isObject = _dereq_('../lang/isObject');

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
            return false;
        }
        var type = typeof index;
        if (type == 'number'
                ? (isArrayLike(object) && isIndex(index, object.length))
                : (type == 'string' && index in object)) {
            var other = object[index];
            return value === value ? (value === other) : (other !== other);
        }
        return false;
    }

    module.exports = isIterateeCall;

},{"../lang/isObject":33,"./isArrayLike":21,"./isIndex":23}],25:[function(_dereq_,module,exports){
    /**
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    module.exports = isLength;

},{}],26:[function(_dereq_,module,exports){
    /**
     * Checks if `value` is object-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     */
    function isObjectLike(value) {
        return !!value && typeof value == 'object';
    }

    module.exports = isObjectLike;

},{}],27:[function(_dereq_,module,exports){
    var isArguments = _dereq_('../lang/isArguments'),
        isArray = _dereq_('../lang/isArray'),
        isIndex = _dereq_('./isIndex'),
        isLength = _dereq_('./isLength'),
        isString = _dereq_('../lang/isString'),
        keysIn = _dereq_('../object/keysIn');

    /** Used for native method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
        var props = keysIn(object),
            propsLength = props.length,
            length = propsLength && object.length;

        var allowIndexes = !!length && isLength(length) &&
            (isArray(object) || isArguments(object) || isString(object));

        var index = -1,
            result = [];

        while (++index < propsLength) {
            var key = props[index];
            if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
                result.push(key);
            }
        }
        return result;
    }

    module.exports = shimKeys;

},{"../lang/isArguments":29,"../lang/isArray":30,"../lang/isString":35,"../object/keysIn":39,"./isIndex":23,"./isLength":25}],28:[function(_dereq_,module,exports){
    var isObject = _dereq_('../lang/isObject'),
        isString = _dereq_('../lang/isString'),
        support = _dereq_('../support');

    /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
        if (support.unindexedChars && isString(value)) {
            var index = -1,
                length = value.length,
                result = Object(value);

            while (++index < length) {
                result[index] = value.charAt(index);
            }
            return result;
        }
        return isObject(value) ? value : Object(value);
    }

    module.exports = toObject;

},{"../lang/isObject":33,"../lang/isString":35,"../support":41}],29:[function(_dereq_,module,exports){
    var isArrayLike = _dereq_('../internal/isArrayLike'),
        isObjectLike = _dereq_('../internal/isObjectLike');

    /** Used for native method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Native method references. */
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
        return isObjectLike(value) && isArrayLike(value) &&
            hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    }

    module.exports = isArguments;

},{"../internal/isArrayLike":21,"../internal/isObjectLike":26}],30:[function(_dereq_,module,exports){
    var getNative = _dereq_('../internal/getNative'),
        isLength = _dereq_('../internal/isLength'),
        isObjectLike = _dereq_('../internal/isObjectLike');

    /** `Object#toString` result references. */
    var arrayTag = '[object Array]';

    /** Used for native method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeIsArray = getNative(Array, 'isArray');

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
            return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
        };

    module.exports = isArray;

},{"../internal/getNative":20,"../internal/isLength":25,"../internal/isObjectLike":26}],31:[function(_dereq_,module,exports){
    var isObject = _dereq_('./isObject');

    /** `Object#toString` result references. */
    var funcTag = '[object Function]';

    /** Used for native method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in older versions of Chrome and Safari which return 'function' for regexes
        // and Safari 8 which returns 'object' for typed array constructors.
        return isObject(value) && objToString.call(value) == funcTag;
    }

    module.exports = isFunction;

},{"./isObject":33}],32:[function(_dereq_,module,exports){
    var isFunction = _dereq_('./isFunction'),
        isHostObject = _dereq_('../internal/isHostObject'),
        isObjectLike = _dereq_('../internal/isObjectLike');

    /** Used to detect host constructors (Safari > 5). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used for native method references. */
    var objectProto = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
        fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
        if (value == null) {
            return false;
        }
        if (isFunction(value)) {
            return reIsNative.test(fnToString.call(value));
        }
        return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
    }

    module.exports = isNative;

},{"../internal/isHostObject":22,"../internal/isObjectLike":26,"./isFunction":31}],33:[function(_dereq_,module,exports){
    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
        // Avoid a V8 JIT bug in Chrome 19-20.
        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
        var type = typeof value;
        return !!value && (type == 'object' || type == 'function');
    }

    module.exports = isObject;

},{}],34:[function(_dereq_,module,exports){
    var baseForIn = _dereq_('../internal/baseForIn'),
        isArguments = _dereq_('./isArguments'),
        isHostObject = _dereq_('../internal/isHostObject'),
        isObjectLike = _dereq_('../internal/isObjectLike'),
        support = _dereq_('../support');

    /** `Object#toString` result references. */
    var objectTag = '[object Object]';

    /** Used for native method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
 *   this.a = 1;
 * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
        var Ctor;

        // Exit early for non `Object` objects.
        if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isHostObject(value) && !isArguments(value)) ||
            (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
            return false;
        }
        // IE < 9 iterates inherited properties before own properties. If the first
        // iterated property is an object's own property then there are no inherited
        // enumerable properties.
        var result;
        if (support.ownLast) {
            baseForIn(value, function(subValue, key, object) {
                result = hasOwnProperty.call(object, key);
                return false;
            });
            return result !== false;
        }
        // In most environments an object's own properties are iterated before
        // its inherited properties. If the last iterated property is an object's
        // own property then there are no inherited enumerable properties.
        baseForIn(value, function(subValue, key) {
            result = key;
        });
        return result === undefined || hasOwnProperty.call(value, result);
    }

    module.exports = isPlainObject;

},{"../internal/baseForIn":12,"../internal/isHostObject":22,"../internal/isObjectLike":26,"../support":41,"./isArguments":29}],35:[function(_dereq_,module,exports){
    var isObjectLike = _dereq_('../internal/isObjectLike');

    /** `Object#toString` result references. */
    var stringTag = '[object String]';

    /** Used for native method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
        return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
    }

    module.exports = isString;

},{"../internal/isObjectLike":26}],36:[function(_dereq_,module,exports){
    var isLength = _dereq_('../internal/isLength'),
        isObjectLike = _dereq_('../internal/isObjectLike');

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
        typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
            typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
        typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
            typedArrayTags[dateTag] = typedArrayTags[errorTag] =
                typedArrayTags[funcTag] = typedArrayTags[mapTag] =
                    typedArrayTags[numberTag] = typedArrayTags[objectTag] =
                        typedArrayTags[regexpTag] = typedArrayTags[setTag] =
                            typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

    /** Used for native method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    module.exports = isTypedArray;

},{"../internal/isLength":25,"../internal/isObjectLike":26}],37:[function(_dereq_,module,exports){
    var baseCopy = _dereq_('../internal/baseCopy'),
        keysIn = _dereq_('../object/keysIn');

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
 *   this.b = 2;
 * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
        return baseCopy(value, keysIn(value));
    }

    module.exports = toPlainObject;

},{"../internal/baseCopy":10,"../object/keysIn":39}],38:[function(_dereq_,module,exports){
    var getNative = _dereq_('../internal/getNative'),
        isArrayLike = _dereq_('../internal/isArrayLike'),
        isObject = _dereq_('../lang/isObject'),
        shimKeys = _dereq_('../internal/shimKeys'),
        support = _dereq_('../support');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeKeys = getNative(Object, 'keys');

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
        var Ctor = object == null ? undefined : object.constructor;
        if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
            (typeof object == 'function' ? support.enumPrototypes : isArrayLike(object))) {
            return shimKeys(object);
        }
        return isObject(object) ? nativeKeys(object) : [];
    };

    module.exports = keys;

},{"../internal/getNative":20,"../internal/isArrayLike":21,"../internal/shimKeys":27,"../lang/isObject":33,"../support":41}],39:[function(_dereq_,module,exports){
    var arrayEach = _dereq_('../internal/arrayEach'),
        isArguments = _dereq_('../lang/isArguments'),
        isArray = _dereq_('../lang/isArray'),
        isFunction = _dereq_('../lang/isFunction'),
        isIndex = _dereq_('../internal/isIndex'),
        isLength = _dereq_('../internal/isLength'),
        isObject = _dereq_('../lang/isObject'),
        isString = _dereq_('../lang/isString'),
        support = _dereq_('../support');

    /** `Object#toString` result references. */
    var arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        stringTag = '[object String]';

    /** Used to fix the JScript `[[DontEnum]]` bug. */
    var shadowProps = [
        'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
        'toLocaleString', 'toString', 'valueOf'
    ];

    /** Used for native method references. */
    var errorProto = Error.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /** Used to avoid iterating over non-enumerable properties in IE < 9. */
    var nonEnumProps = {};
    nonEnumProps[arrayTag] = nonEnumProps[dateTag] = nonEnumProps[numberTag] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
    nonEnumProps[boolTag] = nonEnumProps[stringTag] = { 'constructor': true, 'toString': true, 'valueOf': true };
    nonEnumProps[errorTag] = nonEnumProps[funcTag] = nonEnumProps[regexpTag] = { 'constructor': true, 'toString': true };
    nonEnumProps[objectTag] = { 'constructor': true };

    arrayEach(shadowProps, function(key) {
        for (var tag in nonEnumProps) {
            if (hasOwnProperty.call(nonEnumProps, tag)) {
                var props = nonEnumProps[tag];
                props[key] = hasOwnProperty.call(props, key);
            }
        }
    });

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
        if (object == null) {
            return [];
        }
        if (!isObject(object)) {
            object = Object(object);
        }
        var length = object.length;

        length = (length && isLength(length) &&
        (isArray(object) || isArguments(object) || isString(object)) && length) || 0;

        var Ctor = object.constructor,
            index = -1,
            proto = (isFunction(Ctor) && Ctor.prototype) || objectProto,
            isProto = proto === object,
            result = Array(length),
            skipIndexes = length > 0,
            skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error),
            skipProto = support.enumPrototypes && isFunction(object);

        while (++index < length) {
            result[index] = (index + '');
        }
        // lodash skips the `constructor` property when it infers it's iterating
        // over a `prototype` object because IE < 9 can't set the `[[Enumerable]]`
        // attribute of an existing property and the `constructor` property of a
        // prototype defaults to non-enumerable.
        for (var key in object) {
            if (!(skipProto && key == 'prototype') &&
                !(skipErrorProps && (key == 'message' || key == 'name')) &&
                !(skipIndexes && isIndex(key, length)) &&
                !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                result.push(key);
            }
        }
        if (support.nonEnumShadows && object !== objectProto) {
            var tag = object === stringProto ? stringTag : (object === errorProto ? errorTag : objToString.call(object)),
                nonEnums = nonEnumProps[tag] || nonEnumProps[objectTag];

            if (tag == objectTag) {
                proto = objectProto;
            }
            length = shadowProps.length;
            while (length--) {
                key = shadowProps[length];
                var nonEnum = nonEnums[key];
                if (!(isProto && nonEnum) &&
                    (nonEnum ? hasOwnProperty.call(object, key) : object[key] !== proto[key])) {
                    result.push(key);
                }
            }
        }
        return result;
    }

    module.exports = keysIn;

},{"../internal/arrayEach":9,"../internal/isIndex":23,"../internal/isLength":25,"../lang/isArguments":29,"../lang/isArray":30,"../lang/isFunction":31,"../lang/isObject":33,"../lang/isString":35,"../support":41}],40:[function(_dereq_,module,exports){
    var baseMerge = _dereq_('../internal/baseMerge'),
        createAssigner = _dereq_('../internal/createAssigner');

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it's invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
 *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
 * };
     *
     * var ages = {
 *   'data': [{ 'age': 36 }, { 'age': 40 }]
 * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
 *   'fruits': ['apple'],
 *   'vegetables': ['beet']
 * };
     *
     * var other = {
 *   'fruits': ['banana'],
 *   'vegetables': ['carrot']
 * };
     *
     * _.merge(object, other, function(a, b) {
 *   if (_.isArray(a)) {
 *     return a.concat(b);
 *   }
 * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    module.exports = merge;

},{"../internal/baseMerge":13,"../internal/createAssigner":17}],41:[function(_dereq_,module,exports){
    /** Used for native method references. */
    var arrayProto = Array.prototype,
        errorProto = Error.prototype,
        objectProto = Object.prototype;

    /** Native method references. */
    var propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice;

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = {};

    (function(x) {
        var Ctor = function() { this.x = x; },
            object = { '0': x, 'length': x },
            props = [];

        Ctor.prototype = { 'valueOf': x, 'y': x };
        for (var key in new Ctor) { props.push(key); }

        /**
         * Detect if `name` or `message` properties of `Error.prototype` are
         * enumerable by default (IE < 9, Safari < 5.1).
         *
         * @memberOf _.support
         * @type boolean
         */
        support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') ||
        propertyIsEnumerable.call(errorProto, 'name');

        /**
         * Detect if `prototype` properties are enumerable by default.
         *
         * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
         * (if the prototype or a property on the prototype has been set)
         * incorrectly set the `[[Enumerable]]` value of a function's `prototype`
         * property to `true`.
         *
         * @memberOf _.support
         * @type boolean
         */
        support.enumPrototypes = propertyIsEnumerable.call(Ctor, 'prototype');

        /**
         * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
         *
         * In IE < 9 an object's own properties, shadowing non-enumerable ones,
         * are made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).
         *
         * @memberOf _.support
         * @type boolean
         */
        support.nonEnumShadows = !/valueOf/.test(props);

        /**
         * Detect if own properties are iterated after inherited properties (IE < 9).
         *
         * @memberOf _.support
         * @type boolean
         */
        support.ownLast = props[0] != 'x';

        /**
         * Detect if `Array#shift` and `Array#splice` augment array-like objects
         * correctly.
         *
         * Firefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array
         * `shift()` and `splice()` functions that fail to remove the last element,
         * `value[0]`, of array-like objects even though the "length" property is
         * set to `0`. The `shift()` method is buggy in compatibility modes of IE 8,
         * while `splice()` is buggy regardless of mode in IE < 9.
         *
         * @memberOf _.support
         * @type boolean
         */
        support.spliceObjects = (splice.call(object, 0, 1), !object[0]);

        /**
         * Detect lack of support for accessing string characters by index.
         *
         * IE < 8 can't access characters by index. IE 8 can only access characters
         * by index on string literals, not string objects.
         *
         * @memberOf _.support
         * @type boolean
         */
        support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';
    }(1, 0));

    module.exports = support;

},{}],42:[function(_dereq_,module,exports){
    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
        return value;
    }

    module.exports = identity;

},{}],43:[function(_dereq_,module,exports){
    'use strict';

    var keys = _dereq_('object-keys');

    module.exports = function hasSymbols() {
        if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
        if (typeof Symbol.iterator === 'symbol') { return true; }

        var obj = {};
        var sym = Symbol('test');
        if (typeof sym === 'string') { return false; }

        // temp disabled per https://github.com/ljharb/object.assign/issues/17
        // if (sym instanceof Symbol) { return false; }
        // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
        // if (!(Object(sym) instanceof Symbol)) { return false; }

        var symVal = 42;
        obj[sym] = symVal;
        for (sym in obj) { return false; }
        if (keys(obj).length !== 0) { return false; }
        if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

        if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

        var syms = Object.getOwnPropertySymbols(obj);
        if (syms.length !== 1 || syms[0] !== sym) { return false; }

        if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

        if (typeof Object.getOwnPropertyDescriptor === 'function') {
            var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
            if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
        }

        return true;
    };

},{"object-keys":50}],44:[function(_dereq_,module,exports){
    'use strict';

// modified from https://github.com/es-shims/es6-shim
    var keys = _dereq_('object-keys');
    var bind = _dereq_('function-bind');
    var canBeObject = function (obj) {
        return typeof obj !== 'undefined' && obj !== null;
    };
    var hasSymbols = _dereq_('./hasSymbols')();
    var toObject = Object;
    var push = bind.call(Function.call, Array.prototype.push);
    var propIsEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);

    module.exports = function assign(target, source1) {
        if (!canBeObject(target)) { throw new TypeError('target must be an object'); }
        var objTarget = toObject(target);
        var s, source, i, props, syms, value, key;
        for (s = 1; s < arguments.length; ++s) {
            source = toObject(arguments[s]);
            props = keys(source);
            if (hasSymbols && Object.getOwnPropertySymbols) {
                syms = Object.getOwnPropertySymbols(source);
                for (i = 0; i < syms.length; ++i) {
                    key = syms[i];
                    if (propIsEnumerable(source, key)) {
                        push(props, key);
                    }
                }
            }
            for (i = 0; i < props.length; ++i) {
                key = props[i];
                value = source[key];
                if (propIsEnumerable(source, key)) {
                    objTarget[key] = value;
                }
            }
        }
        return objTarget;
    };

},{"./hasSymbols":43,"function-bind":49,"object-keys":50}],45:[function(_dereq_,module,exports){
    'use strict';

    var defineProperties = _dereq_('define-properties');

    var implementation = _dereq_('./implementation');
    var getPolyfill = _dereq_('./polyfill');
    var shim = _dereq_('./shim');

    defineProperties(implementation, {
        implementation: implementation,
        getPolyfill: getPolyfill,
        shim: shim
    });

    module.exports = implementation;

},{"./implementation":44,"./polyfill":52,"./shim":53,"define-properties":46}],46:[function(_dereq_,module,exports){
    'use strict';

    var keys = _dereq_('object-keys');
    var foreach = _dereq_('foreach');
    var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

    var toStr = Object.prototype.toString;

    var isFunction = function (fn) {
        return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
    };

    var arePropertyDescriptorsSupported = function () {
        var obj = {};
        try {
            Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
            /* eslint-disable no-unused-vars, no-restricted-syntax */
            for (var _ in obj) { return false; }
            /* eslint-enable no-unused-vars, no-restricted-syntax */
            return obj.x === obj;
        } catch (e) { /* this is IE 8. */
            return false;
        }
    };
    var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

    var defineProperty = function (object, name, value, predicate) {
        if (name in object && (!isFunction(predicate) || !predicate())) {
            return;
        }
        if (supportsDescriptors) {
            Object.defineProperty(object, name, {
                configurable: true,
                enumerable: false,
                value: value,
                writable: true
            });
        } else {
            object[name] = value;
        }
    };

    var defineProperties = function (object, map) {
        var predicates = arguments.length > 2 ? arguments[2] : {};
        var props = keys(map);
        if (hasSymbols) {
            props = props.concat(Object.getOwnPropertySymbols(map));
        }
        foreach(props, function (name) {
            defineProperty(object, name, map[name], predicates[name]);
        });
    };

    defineProperties.supportsDescriptors = !!supportsDescriptors;

    module.exports = defineProperties;

},{"foreach":47,"object-keys":50}],47:[function(_dereq_,module,exports){

    var hasOwn = Object.prototype.hasOwnProperty;
    var toString = Object.prototype.toString;

    module.exports = function forEach (obj, fn, ctx) {
        if (toString.call(fn) !== '[object Function]') {
            throw new TypeError('iterator must be a function');
        }
        var l = obj.length;
        if (l === +l) {
            for (var i = 0; i < l; i++) {
                fn.call(ctx, obj[i], i, obj);
            }
        } else {
            for (var k in obj) {
                if (hasOwn.call(obj, k)) {
                    fn.call(ctx, obj[k], k, obj);
                }
            }
        }
    };


},{}],48:[function(_dereq_,module,exports){
    var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
    var slice = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = '[object Function]';

    module.exports = function bind(that) {
        var target = this;
        if (typeof target !== 'function' || toStr.call(target) !== funcType) {
            throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slice.call(arguments, 1);

        var bound;
        var binder = function () {
            if (this instanceof bound) {
                var result = target.apply(
                    this,
                    args.concat(slice.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;
            } else {
                return target.apply(
                    that,
                    args.concat(slice.call(arguments))
                );
            }
        };

        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

        if (target.prototype) {
            var Empty = function Empty() {};
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            Empty.prototype = null;
        }

        return bound;
    };

},{}],49:[function(_dereq_,module,exports){
    var implementation = _dereq_('./implementation');

    module.exports = Function.prototype.bind || implementation;

},{"./implementation":48}],50:[function(_dereq_,module,exports){
    'use strict';

// modified from https://github.com/es-shims/es5-shim
    var has = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var slice = Array.prototype.slice;
    var isArgs = _dereq_('./isArguments');
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
    var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
    var dontEnums = [
        'toString',
        'toLocaleString',
        'valueOf',
        'hasOwnProperty',
        'isPrototypeOf',
        'propertyIsEnumerable',
        'constructor'
    ];
    var equalsConstructorPrototype = function (o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
    };
    var excludedKeys = {
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
    };
    var hasAutomationEqualityBug = (function () {
        /* global window */
        if (typeof window === 'undefined') { return false; }
        for (var k in window) {
            try {
                if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
                    try {
                        equalsConstructorPrototype(window[k]);
                    } catch (e) {
                        return true;
                    }
                }
            } catch (e) {
                return true;
            }
        }
        return false;
    }());
    var equalsConstructorPrototypeIfNotBuggy = function (o) {
        /* global window */
        if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
            return equalsConstructorPrototype(o);
        }
        try {
            return equalsConstructorPrototype(o);
        } catch (e) {
            return false;
        }
    };

    var keysShim = function keys(object) {
        var isObject = object !== null && typeof object === 'object';
        var isFunction = toStr.call(object) === '[object Function]';
        var isArguments = isArgs(object);
        var isString = isObject && toStr.call(object) === '[object String]';
        var theKeys = [];

        if (!isObject && !isFunction && !isArguments) {
            throw new TypeError('Object.keys called on a non-object');
        }

        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !has.call(object, 0)) {
            for (var i = 0; i < object.length; ++i) {
                theKeys.push(String(i));
            }
        }

        if (isArguments && object.length > 0) {
            for (var j = 0; j < object.length; ++j) {
                theKeys.push(String(j));
            }
        } else {
            for (var name in object) {
                if (!(skipProto && name === 'prototype') && has.call(object, name)) {
                    theKeys.push(String(name));
                }
            }
        }

        if (hasDontEnumBug) {
            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

            for (var k = 0; k < dontEnums.length; ++k) {
                if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
                    theKeys.push(dontEnums[k]);
                }
            }
        }
        return theKeys;
    };

    keysShim.shim = function shimObjectKeys() {
        if (Object.keys) {
            var keysWorksWithArguments = (function () {
                // Safari 5.0 bug
                return (Object.keys(arguments) || '').length === 2;
            }(1, 2));
            if (!keysWorksWithArguments) {
                var originalKeys = Object.keys;
                Object.keys = function keys(object) {
                    if (isArgs(object)) {
                        return originalKeys(slice.call(object));
                    } else {
                        return originalKeys(object);
                    }
                };
            }
        } else {
            Object.keys = keysShim;
        }
        return Object.keys || keysShim;
    };

    module.exports = keysShim;

},{"./isArguments":51}],51:[function(_dereq_,module,exports){
    'use strict';

    var toStr = Object.prototype.toString;

    module.exports = function isArguments(value) {
        var str = toStr.call(value);
        var isArgs = str === '[object Arguments]';
        if (!isArgs) {
            isArgs = str !== '[object Array]' &&
            value !== null &&
            typeof value === 'object' &&
            typeof value.length === 'number' &&
            value.length >= 0 &&
            toStr.call(value.callee) === '[object Function]';
        }
        return isArgs;
    };

},{}],52:[function(_dereq_,module,exports){
    'use strict';

    var implementation = _dereq_('./implementation');

    var lacksProperEnumerationOrder = function () {
        if (!Object.assign) {
            return false;
        }
        // v8, specifically in node 4.x, has a bug with incorrect property enumeration order
        // note: this does not detect the bug unless there's 20 characters
        var str = 'abcdefghijklmnopqrst';
        var letters = str.split('');
        var map = {};
        for (var i = 0; i < letters.length; ++i) {
            map[letters[i]] = letters[i];
        }
        var obj = Object.assign({}, map);
        var actual = '';
        for (var k in obj) {
            actual += k;
        }
        return str !== actual;
    };

    var assignHasPendingExceptions = function () {
        if (!Object.assign || !Object.preventExtensions) {
            return false;
        }
        // Firefox 37 still has "pending exception" logic in its Object.assign implementation,
        // which is 72% slower than our shim, and Firefox 40's native implementation.
        var thrower = Object.preventExtensions({ 1: 2 });
        try {
            Object.assign(thrower, 'xy');
        } catch (e) {
            return thrower[1] === 'y';
        }
    };

    module.exports = function getPolyfill() {
        if (!Object.assign) {
            return implementation;
        }
        if (lacksProperEnumerationOrder()) {
            return implementation;
        }
        if (assignHasPendingExceptions()) {
            return implementation;
        }
        return Object.assign;
    };

},{"./implementation":44}],53:[function(_dereq_,module,exports){
    'use strict';

    var define = _dereq_('define-properties');
    var getPolyfill = _dereq_('./polyfill');

    module.exports = function shimAssign() {
        var polyfill = getPolyfill();
        define(
            Object,
            { assign: polyfill },
            { assign: function () { return Object.assign !== polyfill; } }
        );
        return polyfill;
    };

},{"./polyfill":52,"define-properties":46}],54:[function(_dereq_,module,exports){
    module.exports = SafeParseTuple

    function SafeParseTuple(obj, reviver) {
        var json
        var error = null

        try {
            json = JSON.parse(obj, reviver)
        } catch (err) {
            error = err
        }

        return [error, json]
    }

},{}],55:[function(_dereq_,module,exports){
    function clean (s) {
        return s.replace(/\n\r?\s*/g, '')
    }


    module.exports = function tsml (sa) {
        var s = ''
            , i = 0

        for (; i < arguments.length; i++)
            s += clean(sa[i]) + (arguments[i + 1] || '')

        return s
    }
},{}],56:[function(_dereq_,module,exports){
    "use strict";
    var window = _dereq_("global/window")
    var once = _dereq_("once")
    var isFunction = _dereq_("is-function")
    var parseHeaders = _dereq_("parse-headers")
    var xtend = _dereq_("xtend")

    module.exports = createXHR
    createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
    createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

    forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
        createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
            options = initParams(uri, options, callback)
            options.method = method.toUpperCase()
            return _createXHR(options)
        }
    })

    function forEachArray(array, iterator) {
        for (var i = 0; i < array.length; i++) {
            iterator(array[i])
        }
    }

    function isEmpty(obj){
        for(var i in obj){
            if(obj.hasOwnProperty(i)) return false
        }
        return true
    }

    function initParams(uri, options, callback) {
        var params = uri

        if (isFunction(options)) {
            callback = options
            if (typeof uri === "string") {
                params = {uri:uri}
            }
        } else {
            params = xtend(options, {uri: uri})
        }

        params.callback = callback
        return params
    }

    function createXHR(uri, options, callback) {
        options = initParams(uri, options, callback)
        return _createXHR(options)
    }

    function _createXHR(options) {
        var callback = options.callback
        if(typeof callback === "undefined"){
            throw new Error("callback argument missing")
        }
        callback = once(callback)

        function readystatechange() {
            if (xhr.readyState === 4) {
                loadFunc()
            }
        }

        function getBody() {
            // Chrome with requestType=blob throws errors arround when even testing access to responseText
            var body = undefined

            if (xhr.response) {
                body = xhr.response
            } else if (xhr.responseType === "text" || !xhr.responseType) {
                body = xhr.responseText || xhr.responseXML
            }

            if (isJson) {
                try {
                    body = JSON.parse(body)
                } catch (e) {}
            }

            return body
        }

        var failureResponse = {
            body: undefined,
            headers: {},
            statusCode: 0,
            method: method,
            url: uri,
            rawRequest: xhr
        }

        function errorFunc(evt) {
            clearTimeout(timeoutTimer)
            if(!(evt instanceof Error)){
                evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
            }
            evt.statusCode = 0
            callback(evt, failureResponse)
        }

        // will load the data & process the response in a special response object
        function loadFunc() {
            if (aborted) return
            var status
            clearTimeout(timeoutTimer)
            if(options.useXDR && xhr.status===undefined) {
                //IE8 CORS GET successful response doesn't have a status field, but body is fine
                status = 200
            } else {
                status = (xhr.status === 1223 ? 204 : xhr.status)
            }
            var response = failureResponse
            var err = null

            if (status !== 0){
                response = {
                    body: getBody(),
                    statusCode: status,
                    method: method,
                    headers: {},
                    url: uri,
                    rawRequest: xhr
                }
                if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
                    response.headers = parseHeaders(xhr.getAllResponseHeaders())
                }
            } else {
                err = new Error("Internal XMLHttpRequest Error")
            }
            callback(err, response, response.body)

        }

        var xhr = options.xhr || null

        if (!xhr) {
            if (options.cors || options.useXDR) {
                xhr = new createXHR.XDomainRequest()
            }else{
                xhr = new createXHR.XMLHttpRequest()
            }
        }

        var key
        var aborted
        var uri = xhr.url = options.uri || options.url
        var method = xhr.method = options.method || "GET"
        var body = options.body || options.data || null
        var headers = xhr.headers = options.headers || {}
        var sync = !!options.sync
        var isJson = false
        var timeoutTimer

        if ("json" in options) {
            isJson = true
            headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
            if (method !== "GET" && method !== "HEAD") {
                headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
                body = JSON.stringify(options.json)
            }
        }

        xhr.onreadystatechange = readystatechange
        xhr.onload = loadFunc
        xhr.onerror = errorFunc
        // IE9 must have onprogress be set to a unique function.
        xhr.onprogress = function () {
            // IE must die
        }
        xhr.ontimeout = errorFunc
        xhr.open(method, uri, !sync, options.username, options.password)
        //has to be after open
        if(!sync) {
            xhr.withCredentials = !!options.withCredentials
        }
        // Cannot set timeout with sync request
        // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
        // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
        if (!sync && options.timeout > 0 ) {
            timeoutTimer = setTimeout(function(){
                aborted=true//IE9 may still call readystatechange
                xhr.abort("timeout")
                var e = new Error("XMLHttpRequest timeout")
                e.code = "ETIMEDOUT"
                errorFunc(e)
            }, options.timeout )
        }

        if (xhr.setRequestHeader) {
            for(key in headers){
                if(headers.hasOwnProperty(key)){
                    xhr.setRequestHeader(key, headers[key])
                }
            }
        } else if (options.headers && !isEmpty(options.headers)) {
            throw new Error("Headers cannot be set on an XDomainRequest object")
        }

        if ("responseType" in options) {
            xhr.responseType = options.responseType
        }

        if ("beforeSend" in options &&
            typeof options.beforeSend === "function"
        ) {
            options.beforeSend(xhr)
        }

        xhr.send(body)

        return xhr


    }

    function noop() {}

},{"global/window":2,"is-function":57,"once":58,"parse-headers":61,"xtend":62}],57:[function(_dereq_,module,exports){
    module.exports = isFunction

    var toString = Object.prototype.toString

    function isFunction (fn) {
        var string = toString.call(fn)
        return string === '[object Function]' ||
            (typeof fn === 'function' && string !== '[object RegExp]') ||
            (typeof window !== 'undefined' &&
                // IE8 and below
            (fn === window.setTimeout ||
            fn === window.alert ||
            fn === window.confirm ||
            fn === window.prompt))
    };

},{}],58:[function(_dereq_,module,exports){
    module.exports = once

    once.proto = once(function () {
        Object.defineProperty(Function.prototype, 'once', {
            value: function () {
                return once(this)
            },
            configurable: true
        })
    })

    function once (fn) {
        var called = false
        return function () {
            if (called) return
            called = true
            return fn.apply(this, arguments)
        }
    }

},{}],59:[function(_dereq_,module,exports){
    var isFunction = _dereq_('is-function')

    module.exports = forEach

    var toString = Object.prototype.toString
    var hasOwnProperty = Object.prototype.hasOwnProperty

    function forEach(list, iterator, context) {
        if (!isFunction(iterator)) {
            throw new TypeError('iterator must be a function')
        }

        if (arguments.length < 3) {
            context = this
        }

        if (toString.call(list) === '[object Array]')
            forEachArray(list, iterator, context)
        else if (typeof list === 'string')
            forEachString(list, iterator, context)
        else
            forEachObject(list, iterator, context)
    }

    function forEachArray(array, iterator, context) {
        for (var i = 0, len = array.length; i < len; i++) {
            if (hasOwnProperty.call(array, i)) {
                iterator.call(context, array[i], i, array)
            }
        }
    }

    function forEachString(string, iterator, context) {
        for (var i = 0, len = string.length; i < len; i++) {
            // no such thing as a sparse string.
            iterator.call(context, string.charAt(i), i, string)
        }
    }

    function forEachObject(object, iterator, context) {
        for (var k in object) {
            if (hasOwnProperty.call(object, k)) {
                iterator.call(context, object[k], k, object)
            }
        }
    }

},{"is-function":57}],60:[function(_dereq_,module,exports){

    exports = module.exports = trim;

    function trim(str){
        return str.replace(/^\s*|\s*$/g, '');
    }

    exports.left = function(str){
        return str.replace(/^\s*/, '');
    };

    exports.right = function(str){
        return str.replace(/\s*$/, '');
    };

},{}],61:[function(_dereq_,module,exports){
    var trim = _dereq_('trim')
        , forEach = _dereq_('for-each')
        , isArray = function(arg) {
            return Object.prototype.toString.call(arg) === '[object Array]';
        }

    module.exports = function (headers) {
        if (!headers)
            return {}

        var result = {}

        forEach(
            trim(headers).split('\n')
            , function (row) {
                var index = row.indexOf(':')
                    , key = trim(row.slice(0, index)).toLowerCase()
                    , value = trim(row.slice(index + 1))

                if (typeof(result[key]) === 'undefined') {
                    result[key] = value
                } else if (isArray(result[key])) {
                    result[key].push(value)
                } else {
                    result[key] = [ result[key], value ]
                }
            }
        )

        return result
    }
},{"for-each":59,"trim":60}],62:[function(_dereq_,module,exports){
    module.exports = extend

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function extend() {
        var target = {}

        for (var i = 0; i < arguments.length; i++) {
            var source = arguments[i]

            for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                    target[key] = source[key]
                }
            }
        }

        return target
    }

},{}],63:[function(_dereq_,module,exports){
    /**
     * @file big-play-button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _buttonJs = _dereq_('./button.js');

    var _buttonJs2 = _interopRequireDefault(_buttonJs);

    var _componentJs = _dereq_('./component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    /**
     * Initial play button. Shows before the video has played. The hiding of the
     * big play button is done via CSS and player states.
     *
     * @param {Object} player  Main Player
     * @param {Object=} options Object of option names and values
     * @extends Button
     * @class BigPlayButton
     */

    var BigPlayButton = (function (_Button) {
        _inherits(BigPlayButton, _Button);

        function BigPlayButton(player, options) {
            _classCallCheck(this, BigPlayButton);

            _Button.call(this, player, options);
        }

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-big-play-button';
        };

        /**
         * Handles click for play
         *
         * @method handleClick
         */

        BigPlayButton.prototype.handleClick = function handleClick() {
            this.player_.play();
        };

        return BigPlayButton;
    })(_buttonJs2['default']);

    BigPlayButton.prototype.controlText_ = 'Play Video';

    _componentJs2['default'].registerComponent('BigPlayButton', BigPlayButton);
    exports['default'] = BigPlayButton;
    module.exports = exports['default'];

},{"./button.js":64,"./component.js":67}],64:[function(_dereq_,module,exports){
    /**
     * @file button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _clickableComponentJs = _dereq_('./clickable-component.js');

    var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

    var _component = _dereq_('./component');

    var _component2 = _interopRequireDefault(_component);

    var _utilsEventsJs = _dereq_('./utils/events.js');

    var Events = _interopRequireWildcard(_utilsEventsJs);

    var _utilsFnJs = _dereq_('./utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsLogJs = _dereq_('./utils/log.js');

    var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _objectAssign = _dereq_('object.assign');

    var _objectAssign2 = _interopRequireDefault(_objectAssign);

    /**
     * Base class for all buttons
     *
     * @param {Object} player  Main Player
     * @param {Object=} options Object of option names and values
     * @extends ClickableComponent
     * @class Button
     */

    var Button = (function (_ClickableComponent) {
        _inherits(Button, _ClickableComponent);

        function Button(player, options) {
            _classCallCheck(this, Button);

            _ClickableComponent.call(this, player, options);
        }

        /**
         * Create the component's DOM element
         *
         * @param {String=} type Element's node type. e.g. 'div'
         * @param {Object=} props An object of properties that should be set on the element
         * @param {Object=} attributes An object of attributes that should be set on the element
         * @return {Element}
         * @method createEl
         */

        Button.prototype.createEl = function createEl() {
            var tag = arguments.length <= 0 || arguments[0] === undefined ? 'button' : arguments[0];
            var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            props = _objectAssign2['default']({
                className: this.buildCSSClass()
            }, props);

            if (tag !== 'button') {
                _utilsLogJs2['default'].warn('Creating a Button with an HTML element of ' + tag + ' is deprecated; use ClickableComponent instead.');

                // Add properties for clickable element which is not a native HTML button
                props = _objectAssign2['default']({
                    tabIndex: 0
                }, props);

                // Add ARIA attributes for clickable element which is not a native HTML button
                attributes = _objectAssign2['default']({
                    role: 'button'
                }, attributes);
            }

            // Add attributes for button element
            attributes = _objectAssign2['default']({
                type: 'button', // Necessary since the default button type is "submit"
                'aria-live': 'polite' // let the screen reader user know that the text of the button may change
            }, attributes);

            var el = _component2['default'].prototype.createEl.call(this, tag, props, attributes);

            this.createControlTextEl(el);

            return el;
        };

        /**
         * Adds a child component inside this button
         *
         * @param {String|Component} child The class name or instance of a child to add
         * @param {Object=} options Options, including options to be passed to children of the child.
         * @return {Component} The child component (created by this process if a string was used)
         * @deprecated
         * @method addChild
         */

        Button.prototype.addChild = function addChild(child) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            var className = this.constructor.name;
            _utilsLogJs2['default'].warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');

            // Avoid the error message generated by ClickableComponent's addChild method
            return _component2['default'].prototype.addChild.call(this, child, options);
        };

        /**
         * Handle KeyPress (document level) - Extend with specific functionality for button
         *
         * @method handleKeyPress
         */

        Button.prototype.handleKeyPress = function handleKeyPress(event) {
            // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.
            if (event.which === 32 || event.which === 13) {} else {
                _ClickableComponent.prototype.handleKeyPress.call(this, event); // Pass keypress handling up for unsupported keys
            }
        };

        return Button;
    })(_clickableComponentJs2['default']);

    _component2['default'].registerComponent('Button', Button);
    exports['default'] = Button;
    module.exports = exports['default'];

},{"./clickable-component.js":65,"./component":67,"./utils/events.js":143,"./utils/fn.js":144,"./utils/log.js":147,"global/document":1,"object.assign":45}],65:[function(_dereq_,module,exports){
    /**
     * @file button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _component = _dereq_('./component');

    var _component2 = _interopRequireDefault(_component);

    var _utilsDomJs = _dereq_('./utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsEventsJs = _dereq_('./utils/events.js');

    var Events = _interopRequireWildcard(_utilsEventsJs);

    var _utilsFnJs = _dereq_('./utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsLogJs = _dereq_('./utils/log.js');

    var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _objectAssign = _dereq_('object.assign');

    var _objectAssign2 = _interopRequireDefault(_objectAssign);

    /**
     * Clickable Component which is clickable or keyboard actionable, but is not a native HTML button
     *
     * @param {Object} player  Main Player
     * @param {Object=} options Object of option names and values
     * @extends Component
     * @class ClickableComponent
     */

    var ClickableComponent = (function (_Component) {
        _inherits(ClickableComponent, _Component);

        function ClickableComponent(player, options) {
            _classCallCheck(this, ClickableComponent);

            _Component.call(this, player, options);

            this.emitTapEvents();

            this.on('tap', this.handleClick);
            this.on('click', this.handleClick);
            this.on('focus', this.handleFocus);
            this.on('blur', this.handleBlur);
        }

        /**
         * Create the component's DOM element
         *
         * @param {String=} type Element's node type. e.g. 'div'
         * @param {Object=} props An object of properties that should be set on the element
         * @param {Object=} attributes An object of attributes that should be set on the element
         * @return {Element}
         * @method createEl
         */

        ClickableComponent.prototype.createEl = function createEl() {
            var tag = arguments.length <= 0 || arguments[0] === undefined ? 'div' : arguments[0];
            var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            props = _objectAssign2['default']({
                className: this.buildCSSClass(),
                tabIndex: 0
            }, props);

            if (tag === 'button') {
                _utilsLogJs2['default'].error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');
            }

            // Add ARIA attributes for clickable element which is not a native HTML button
            attributes = _objectAssign2['default']({
                role: 'button',
                'aria-live': 'polite' // let the screen reader user know that the text of the element may change
            }, attributes);

            var el = _Component.prototype.createEl.call(this, tag, props, attributes);

            this.createControlTextEl(el);

            return el;
        };

        /**
         * create control text
         *
         * @param {Element} el Parent element for the control text
         * @return {Element}
         * @method controlText
         */

        ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {
            this.controlTextEl_ = Dom.createEl('span', {
                className: 'vjs-control-text'
            });

            if (el) {
                el.appendChild(this.controlTextEl_);
            }

            this.controlText(this.controlText_, el);

            return this.controlTextEl_;
        };

        /**
         * Controls text - both request and localize
         *
         * @param {String}  text Text for element
         * @param {Element=} el Element to set the title on
         * @return {String}
         * @method controlText
         */

        ClickableComponent.prototype.controlText = function controlText(text) {
            var el = arguments.length <= 1 || arguments[1] === undefined ? this.el() : arguments[1];

            if (!text) return this.controlText_ || 'Need Text';

            var localizedText = this.localize(text);

            this.controlText_ = text;
            this.controlTextEl_.innerHTML = localizedText;
            el.setAttribute('title', localizedText);

            return this;
        };

        /**
         * Allows sub components to stack CSS class names
         *
         * @return {String}
         * @method buildCSSClass
         */

        ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);
        };

        /**
         * Adds a child component inside this clickable-component
         *
         * @param {String|Component} child The class name or instance of a child to add
         * @param {Object=} options Options, including options to be passed to children of the child.
         * @return {Component} The child component (created by this process if a string was used)
         * @method addChild
         */

        ClickableComponent.prototype.addChild = function addChild(child) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            // TODO: Fix adding an actionable child to a ClickableComponent; currently
            // it will cause issues with assistive technology (e.g. screen readers)
            // which support ARIA, since an element with role="button" cannot have
            // actionable child elements.

            //let className = this.constructor.name;
            //log.warn(`Adding a child to a ClickableComponent (${className}) can cause issues with assistive technology which supports ARIA, since an element with role="button" cannot have actionable child elements.`);

            return _Component.prototype.addChild.call(this, child, options);
        };

        /**
         * Enable the component element
         *
         * @return {Component}
         * @method enable
         */

        ClickableComponent.prototype.enable = function enable() {
            this.removeClass('vjs-disabled');
            this.el_.setAttribute('aria-disabled', 'false');
            return this;
        };

        /**
         * Disable the component element
         *
         * @return {Component}
         * @method disable
         */

        ClickableComponent.prototype.disable = function disable() {
            this.addClass('vjs-disabled');
            this.el_.setAttribute('aria-disabled', 'true');
            return this;
        };

        /**
         * Handle Click - Override with specific functionality for component
         *
         * @method handleClick
         */

        ClickableComponent.prototype.handleClick = function handleClick() {};

        /**
         * Handle Focus - Add keyboard functionality to element
         *
         * @method handleFocus
         */

        ClickableComponent.prototype.handleFocus = function handleFocus() {
            Events.on(_globalDocument2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));
        };

        /**
         * Handle KeyPress (document level) - Trigger click when Space or Enter key is pressed
         *
         * @method handleKeyPress
         */

        ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {
            // Support Space (32) or Enter (13) key operation to fire a click event
            if (event.which === 32 || event.which === 13) {
                event.preventDefault();
                this.handleClick(event);
            } else if (_Component.prototype.handleKeyPress) {
                _Component.prototype.handleKeyPress.call(this, event); // Pass keypress handling up for unsupported keys
            }
        };

        /**
         * Handle Blur - Remove keyboard triggers
         *
         * @method handleBlur
         */

        ClickableComponent.prototype.handleBlur = function handleBlur() {
            Events.off(_globalDocument2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));
        };

        return ClickableComponent;
    })(_component2['default']);

    _component2['default'].registerComponent('ClickableComponent', ClickableComponent);
    exports['default'] = ClickableComponent;
    module.exports = exports['default'];

},{"./component":67,"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/log.js":147,"global/document":1,"object.assign":45}],66:[function(_dereq_,module,exports){
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _button = _dereq_('./button');

    var _button2 = _interopRequireDefault(_button);

    var _component = _dereq_('./component');

    var _component2 = _interopRequireDefault(_component);

    /**
     * The `CloseButton` component is a button which fires a "close" event
     * when it is activated.
     *
     * @extends Button
     * @class CloseButton
     */

    var CloseButton = (function (_Button) {
        _inherits(CloseButton, _Button);

        function CloseButton(player, options) {
            _classCallCheck(this, CloseButton);

            _Button.call(this, player, options);
            this.controlText(options && options.controlText || this.localize('Close'));
        }

        CloseButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);
        };

        CloseButton.prototype.handleClick = function handleClick() {
            this.trigger({ type: 'close', bubbles: false });
        };

        return CloseButton;
    })(_button2['default']);

    _component2['default'].registerComponent('CloseButton', CloseButton);
    exports['default'] = CloseButton;
    module.exports = exports['default'];

},{"./button":64,"./component":67}],67:[function(_dereq_,module,exports){
    /**
     * @file component.js
     *
     * Player Component - Base class for all UI objects
     */

    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _utilsDomJs = _dereq_('./utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFnJs = _dereq_('./utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsGuidJs = _dereq_('./utils/guid.js');

    var Guid = _interopRequireWildcard(_utilsGuidJs);

    var _utilsEventsJs = _dereq_('./utils/events.js');

    var Events = _interopRequireWildcard(_utilsEventsJs);

    var _utilsLogJs = _dereq_('./utils/log.js');

    var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

    var _utilsToTitleCaseJs = _dereq_('./utils/to-title-case.js');

    var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

    var _utilsMergeOptionsJs = _dereq_('./utils/merge-options.js');

    var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);

    /**
     * Base UI Component class
     * Components are embeddable UI objects that are represented by both a
     * javascript object and an element in the DOM. They can be children of other
     * components, and can have many children themselves.
     * ```js
     *     // adding a button to the player
     *     var button = player.addChild('button');
     *     button.el(); // -> button element
     * ```
     * ```html
     *     <div class="video-js">
     *       <div class="vjs-button">Button</div>
     *     </div>
     * ```
     * Components are also event targets.
     * ```js
     *     button.on('click', function(){
 *       console.log('Button Clicked!');
 *     });
     *     button.trigger('customevent');
     * ```
     *
     * @param {Object} player  Main Player
     * @param {Object=} options Object of option names and values
     * @param {Function=} ready    Ready callback function
     * @class Component
     */

    var Component = (function () {
        function Component(player, options, ready) {
            _classCallCheck(this, Component);

            // The component might be the player itself and we can't pass `this` to super
            if (!player && this.play) {
                this.player_ = player = this; // eslint-disable-line
            } else {
                this.player_ = player;
            }

            // Make a copy of prototype.options_ to protect against overriding defaults
            this.options_ = _utilsMergeOptionsJs2['default']({}, this.options_);

            // Updated options with supplied options
            options = this.options_ = _utilsMergeOptionsJs2['default'](this.options_, options);

            // Get ID from options or options element if one is supplied
            this.id_ = options.id || options.el && options.el.id;

            // If there was no ID from the options, generate one
            if (!this.id_) {
                // Don't require the player ID function in the case of mock players
                var id = player && player.id && player.id() || 'no_player';

                this.id_ = id + '_component_' + Guid.newGUID();
            }

            this.name_ = options.name || null;

            // Create element if one wasn't provided in options
            if (options.el) {
                this.el_ = options.el;
            } else if (options.createEl !== false) {
                this.el_ = this.createEl();
            }

            this.children_ = [];
            this.childIndex_ = {};
            this.childNameIndex_ = {};

            // Add any child components in options
            if (options.initChildren !== false) {
                this.initChildren();
            }

            this.ready(ready);
            // Don't want to trigger ready here or it will before init is actually
            // finished for all children that run this constructor

            if (options.reportTouchActivity !== false) {
                this.enableTouchActivity();
            }
        }

        /**
         * Dispose of the component and all child components
         *
         * @method dispose
         */

        Component.prototype.dispose = function dispose() {
            this.trigger({ type: 'dispose', bubbles: false });

            // Dispose all children.
            if (this.children_) {
                for (var i = this.children_.length - 1; i >= 0; i--) {
                    if (this.children_[i].dispose) {
                        this.children_[i].dispose();
                    }
                }
            }

            // Delete child references
            this.children_ = null;
            this.childIndex_ = null;
            this.childNameIndex_ = null;

            // Remove all event listeners.
            this.off();

            // Remove element from DOM
            if (this.el_.parentNode) {
                this.el_.parentNode.removeChild(this.el_);
            }

            Dom.removeElData(this.el_);
            this.el_ = null;
        };

        /**
         * Return the component's player
         *
         * @return {Player}
         * @method player
         */

        Component.prototype.player = function player() {
            return this.player_;
        };

        /**
         * Deep merge of options objects
         * Whenever a property is an object on both options objects
         * the two properties will be merged using mergeOptions.
         *
         * ```js
         *     Parent.prototype.options_ = {
   *       optionSet: {
   *         'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },
   *         'childTwo': {},
   *         'childThree': {}
   *       }
   *     }
         *     newOptions = {
   *       optionSet: {
   *         'childOne': { 'foo': 'baz', 'abc': '123' }
   *         'childTwo': null,
   *         'childFour': {}
   *       }
   *     }
         *
         *     this.options(newOptions);
         * ```
         * RESULT
         * ```js
         *     {
   *       optionSet: {
   *         'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },
   *         'childTwo': null, // Disabled. Won't be initialized.
   *         'childThree': {},
   *         'childFour': {}
   *       }
   *     }
         * ```
         *
         * @param  {Object} obj Object of new option values
         * @return {Object}     A NEW object of this.options_ and obj merged
         * @method options
         */

        Component.prototype.options = function options(obj) {
            _utilsLogJs2['default'].warn('this.options() has been deprecated and will be moved to the constructor in 6.0');

            if (!obj) {
                return this.options_;
            }

            this.options_ = _utilsMergeOptionsJs2['default'](this.options_, obj);
            return this.options_;
        };

        /**
         * Get the component's DOM element
         * ```js
         *     var domEl = myComponent.el();
         * ```
         *
         * @return {Element}
         * @method el
         */

        Component.prototype.el = function el() {
            return this.el_;
        };

        /**
         * Create the component's DOM element
         *
         * @param  {String=} tagName  Element's node type. e.g. 'div'
         * @param  {Object=} properties An object of properties that should be set
         * @param  {Object=} attributes An object of attributes that should be set
         * @return {Element}
         * @method createEl
         */

        Component.prototype.createEl = function createEl(tagName, properties, attributes) {
            return Dom.createEl(tagName, properties, attributes);
        };

        Component.prototype.localize = function localize(string) {
            var code = this.player_.language && this.player_.language();
            var languages = this.player_.languages && this.player_.languages();

            if (!code || !languages) {
                return string;
            }

            var language = languages[code];

            if (language && language[string]) {
                return language[string];
            }

            var primaryCode = code.split('-')[0];
            var primaryLang = languages[primaryCode];

            if (primaryLang && primaryLang[string]) {
                return primaryLang[string];
            }

            return string;
        };

        /**
         * Return the component's DOM element where children are inserted.
         * Will either be the same as el() or a new element defined in createEl().
         *
         * @return {Element}
         * @method contentEl
         */

        Component.prototype.contentEl = function contentEl() {
            return this.contentEl_ || this.el_;
        };

        /**
         * Get the component's ID
         * ```js
         *     var id = myComponent.id();
         * ```
         *
         * @return {String}
         * @method id
         */

        Component.prototype.id = function id() {
            return this.id_;
        };

        /**
         * Get the component's name. The name is often used to reference the component.
         * ```js
         *     var name = myComponent.name();
         * ```
         *
         * @return {String}
         * @method name
         */

        Component.prototype.name = function name() {
            return this.name_;
        };

        /**
         * Get an array of all child components
         * ```js
         *     var kids = myComponent.children();
         * ```
         *
         * @return {Array} The children
         * @method children
         */

        Component.prototype.children = function children() {
            return this.children_;
        };

        /**
         * Returns a child component with the provided ID
         *
         * @return {Component}
         * @method getChildById
         */

        Component.prototype.getChildById = function getChildById(id) {
            return this.childIndex_[id];
        };

        /**
         * Returns a child component with the provided name
         *
         * @return {Component}
         * @method getChild
         */

        Component.prototype.getChild = function getChild(name) {
            return this.childNameIndex_[name];
        };

        /**
         * Adds a child component inside this component
         * ```js
         *     myComponent.el();
         *     // -> <div class='my-component'></div>
         *     myComponent.children();
         *     // [empty array]
         *
         *     var myButton = myComponent.addChild('MyButton');
         *     // -> <div class='my-component'><div class="my-button">myButton<div></div>
         *     // -> myButton === myComponent.children()[0];
         * ```
         * Pass in options for child constructors and options for children of the child
         * ```js
         *     var myButton = myComponent.addChild('MyButton', {
   *       text: 'Press Me',
   *       buttonChildExample: {
   *         buttonChildOption: true
   *       }
   *     });
         * ```
         *
         * @param {String|Component} child The class name or instance of a child to add
         * @param {Object=} options Options, including options to be passed to children of the child.
         * @param {Number} index into our children array to attempt to add the child
         * @return {Component} The child component (created by this process if a string was used)
         * @method addChild
         */

        Component.prototype.addChild = function addChild(child) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var index = arguments.length <= 2 || arguments[2] === undefined ? this.children_.length : arguments[2];

            var component = undefined;
            var componentName = undefined;

            // If child is a string, create nt with options
            if (typeof child === 'string') {
                componentName = child;

                // Options can also be specified as a boolean, so convert to an empty object if false.
                if (!options) {
                    options = {};
                }

                // Same as above, but true is deprecated so show a warning.
                if (options === true) {
                    _utilsLogJs2['default'].warn('Initializing a child component with `true` is deprecated. Children should be defined in an array when possible, but if necessary use an object instead of `true`.');
                    options = {};
                }

                // If no componentClass in options, assume componentClass is the name lowercased
                // (e.g. playButton)
                var componentClassName = options.componentClass || _utilsToTitleCaseJs2['default'](componentName);

                // Set name through options
                options.name = componentName;

                // Create a new object & element for this controls set
                // If there's no .player_, this is a player
                var ComponentClass = Component.getComponent(componentClassName);

                if (!ComponentClass) {
                    throw new Error('Component ' + componentClassName + ' does not exist');
                }

                // data stored directly on the videojs object may be
                // misidentified as a component to retain
                // backwards-compatibility with 4.x. check to make sure the
                // component class can be instantiated.
                if (typeof ComponentClass !== 'function') {
                    return null;
                }

                component = new ComponentClass(this.player_ || this, options);

                // child is a component instance
            } else {
                component = child;
            }

            this.children_.splice(index, 0, component);

            if (typeof component.id === 'function') {
                this.childIndex_[component.id()] = component;
            }

            // If a name wasn't used to create the component, check if we can use the
            // name function of the component
            componentName = componentName || component.name && component.name();

            if (componentName) {
                this.childNameIndex_[componentName] = component;
            }

            // Add the UI object's element to the container div (box)
            // Having an element is not required
            if (typeof component.el === 'function' && component.el()) {
                var childNodes = this.contentEl().children;
                var refNode = childNodes[index] || null;
                this.contentEl().insertBefore(component.el(), refNode);
            }

            // Return so it can stored on parent object if desired.
            return component;
        };

        /**
         * Remove a child component from this component's list of children, and the
         * child component's element from this component's element
         *
         * @param  {Component} component Component to remove
         * @method removeChild
         */

        Component.prototype.removeChild = function removeChild(component) {
            if (typeof component === 'string') {
                component = this.getChild(component);
            }

            if (!component || !this.children_) {
                return;
            }

            var childFound = false;

            for (var i = this.children_.length - 1; i >= 0; i--) {
                if (this.children_[i] === component) {
                    childFound = true;
                    this.children_.splice(i, 1);
                    break;
                }
            }

            if (!childFound) {
                return;
            }

            this.childIndex_[component.id()] = null;
            this.childNameIndex_[component.name()] = null;

            var compEl = component.el();

            if (compEl && compEl.parentNode === this.contentEl()) {
                this.contentEl().removeChild(component.el());
            }
        };

        /**
         * Add and initialize default child components from options
         * ```js
         *     // when an instance of MyComponent is created, all children in options
         *     // will be added to the instance by their name strings and options
         *     MyComponent.prototype.options_ = {
   *       children: [
   *         'myChildComponent'
   *       ],
   *       myChildComponent: {
   *         myChildOption: true
   *       }
   *     };
         *
         *     // Or when creating the component
         *     var myComp = new MyComponent(player, {
   *       children: [
   *         'myChildComponent'
   *       ],
   *       myChildComponent: {
   *         myChildOption: true
   *       }
   *     });
         * ```
         * The children option can also be an array of
         * child options objects (that also include a 'name' key).
         * This can be used if you have two child components of the
         * same type that need different options.
         * ```js
         *     var myComp = new MyComponent(player, {
   *       children: [
   *         'button',
   *         {
   *           name: 'button',
   *           someOtherOption: true
   *         },
   *         {
   *           name: 'button',
   *           someOtherOption: false
   *         }
   *       ]
   *     });
         * ```
         *
         * @method initChildren
         */

        Component.prototype.initChildren = function initChildren() {
            var _this = this;

            var children = this.options_.children;

            if (children) {
                (function () {
                    // `this` is `parent`
                    var parentOptions = _this.options_;

                    var handleAdd = function handleAdd(child) {
                        var name = child.name;
                        var opts = child.opts;

                        // Allow options for children to be set at the parent options
                        // e.g. videojs(id, { controlBar: false });
                        // instead of videojs(id, { children: { controlBar: false });
                        if (parentOptions[name] !== undefined) {
                            opts = parentOptions[name];
                        }

                        // Allow for disabling default components
                        // e.g. options['children']['posterImage'] = false
                        if (opts === false) {
                            return;
                        }

                        // Allow options to be passed as a simple boolean if no configuration
                        // is necessary.
                        if (opts === true) {
                            opts = {};
                        }

                        // We also want to pass the original player options to each component as well so they don't need to
                        // reach back into the player for options later.
                        opts.playerOptions = _this.options_.playerOptions;

                        // Create and add the child component.
                        // Add a direct reference to the child by name on the parent instance.
                        // If two of the same component are used, different names should be supplied
                        // for each
                        var newChild = _this.addChild(name, opts);
                        if (newChild) {
                            _this[name] = newChild;
                        }
                    };

                    // Allow for an array of children details to passed in the options
                    var workingChildren = undefined;
                    var Tech = Component.getComponent('Tech');

                    if (Array.isArray(children)) {
                        workingChildren = children;
                    } else {
                        workingChildren = Object.keys(children);
                    }

                    workingChildren
                        // children that are in this.options_ but also in workingChildren  would
                        // give us extra children we do not want. So, we want to filter them out.
                        .concat(Object.keys(_this.options_).filter(function (child) {
                            return !workingChildren.some(function (wchild) {
                                if (typeof wchild === 'string') {
                                    return child === wchild;
                                } else {
                                    return child === wchild.name;
                                }
                            });
                        })).map(function (child) {
                            var name = undefined,
                                opts = undefined;

                            if (typeof child === 'string') {
                                name = child;
                                opts = children[name] || _this.options_[name] || {};
                            } else {
                                name = child.name;
                                opts = child;
                            }

                            return { name: name, opts: opts };
                        }).filter(function (child) {
                            // we have to make sure that child.name isn't in the techOrder since
                            // techs are registerd as Components but can't aren't compatible
                            // See https://github.com/videojs/video.js/issues/2772
                            var c = Component.getComponent(child.opts.componentClass || _utilsToTitleCaseJs2['default'](child.name));
                            return c && !Tech.isTech(c);
                        }).forEach(handleAdd);
                })();
            }
        };

        /**
         * Allows sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        Component.prototype.buildCSSClass = function buildCSSClass() {
            // Child classes can include a function that does:
            // return 'CLASS NAME' + this._super();
            return '';
        };

        /**
         * Add an event listener to this component's element
         * ```js
         *     var myFunc = function(){
   *       var myComponent = this;
   *       // Do something when the event is fired
   *     };
         *
         *     myComponent.on('eventType', myFunc);
         * ```
         * The context of myFunc will be myComponent unless previously bound.
         * Alternatively, you can add a listener to another element or component.
         * ```js
         *     myComponent.on(otherElement, 'eventName', myFunc);
         *     myComponent.on(otherComponent, 'eventName', myFunc);
         * ```
         * The benefit of using this over `VjsEvents.on(otherElement, 'eventName', myFunc)`
         * and `otherComponent.on('eventName', myFunc)` is that this way the listeners
         * will be automatically cleaned up when either component is disposed.
         * It will also bind myComponent as the context of myFunc.
         * **NOTE**: When using this on elements in the page other than window
         * and document (both permanent), if you remove the element from the DOM
         * you need to call `myComponent.trigger(el, 'dispose')` on it to clean up
         * references to it and allow the browser to garbage collect it.
         *
         * @param  {String|Component} first   The event type or other component
         * @param  {Function|String}      second  The event handler or event type
         * @param  {Function}             third   The event handler
         * @return {Component}
         * @method on
         */

        Component.prototype.on = function on(first, second, third) {
            var _this2 = this;

            if (typeof first === 'string' || Array.isArray(first)) {
                Events.on(this.el_, first, Fn.bind(this, second));

                // Targeting another component or element
            } else {
                (function () {
                    var target = first;
                    var type = second;
                    var fn = Fn.bind(_this2, third);

                    // When this component is disposed, remove the listener from the other component
                    var removeOnDispose = function removeOnDispose() {
                        return _this2.off(target, type, fn);
                    };

                    // Use the same function ID so we can remove it later it using the ID
                    // of the original listener
                    removeOnDispose.guid = fn.guid;
                    _this2.on('dispose', removeOnDispose);

                    // If the other component is disposed first we need to clean the reference
                    // to the other component in this component's removeOnDispose listener
                    // Otherwise we create a memory leak.
                    var cleanRemover = function cleanRemover() {
                        return _this2.off('dispose', removeOnDispose);
                    };

                    // Add the same function ID so we can easily remove it later
                    cleanRemover.guid = fn.guid;

                    // Check if this is a DOM node
                    if (first.nodeName) {
                        // Add the listener to the other element
                        Events.on(target, type, fn);
                        Events.on(target, 'dispose', cleanRemover);

                        // Should be a component
                        // Not using `instanceof Component` because it makes mock players difficult
                    } else if (typeof first.on === 'function') {
                        // Add the listener to the other component
                        target.on(type, fn);
                        target.on('dispose', cleanRemover);
                    }
                })();
            }

            return this;
        };

        /**
         * Remove an event listener from this component's element
         * ```js
         *     myComponent.off('eventType', myFunc);
         * ```
         * If myFunc is excluded, ALL listeners for the event type will be removed.
         * If eventType is excluded, ALL listeners will be removed from the component.
         * Alternatively you can use `off` to remove listeners that were added to other
         * elements or components using `myComponent.on(otherComponent...`.
         * In this case both the event type and listener function are REQUIRED.
         * ```js
         *     myComponent.off(otherElement, 'eventType', myFunc);
         *     myComponent.off(otherComponent, 'eventType', myFunc);
         * ```
         *
         * @param  {String=|Component}  first  The event type or other component
         * @param  {Function=|String}       second The listener function or event type
         * @param  {Function=}              third  The listener for other component
         * @return {Component}
         * @method off
         */

        Component.prototype.off = function off(first, second, third) {
            if (!first || typeof first === 'string' || Array.isArray(first)) {
                Events.off(this.el_, first, second);
            } else {
                var target = first;
                var type = second;
                // Ensure there's at least a guid, even if the function hasn't been used
                var fn = Fn.bind(this, third);

                // Remove the dispose listener on this component,
                // which was given the same guid as the event listener
                this.off('dispose', fn);

                if (first.nodeName) {
                    // Remove the listener
                    Events.off(target, type, fn);
                    // Remove the listener for cleaning the dispose listener
                    Events.off(target, 'dispose', fn);
                } else {
                    target.off(type, fn);
                    target.off('dispose', fn);
                }
            }

            return this;
        };

        /**
         * Add an event listener to be triggered only once and then removed
         * ```js
         *     myComponent.one('eventName', myFunc);
         * ```
         * Alternatively you can add a listener to another element or component
         * that will be triggered only once.
         * ```js
         *     myComponent.one(otherElement, 'eventName', myFunc);
         *     myComponent.one(otherComponent, 'eventName', myFunc);
         * ```
         *
         * @param  {String|Component}  first   The event type or other component
         * @param  {Function|String}       second  The listener function or event type
         * @param  {Function=}             third   The listener function for other component
         * @return {Component}
         * @method one
         */

        Component.prototype.one = function one(first, second, third) {
            var _this3 = this,
                _arguments = arguments;

            if (typeof first === 'string' || Array.isArray(first)) {
                Events.one(this.el_, first, Fn.bind(this, second));
            } else {
                (function () {
                    var target = first;
                    var type = second;
                    var fn = Fn.bind(_this3, third);

                    var newFunc = function newFunc() {
                        _this3.off(target, type, newFunc);
                        fn.apply(null, _arguments);
                    };

                    // Keep the same function ID so we can remove it later
                    newFunc.guid = fn.guid;

                    _this3.on(target, type, newFunc);
                })();
            }

            return this;
        };

        /**
         * Trigger an event on an element
         * ```js
         *     myComponent.trigger('eventName');
         *     myComponent.trigger({'type':'eventName'});
         *     myComponent.trigger('eventName', {data: 'some data'});
         *     myComponent.trigger({'type':'eventName'}, {data: 'some data'});
         * ```
         *
         * @param  {Event|Object|String} event  A string (the type) or an event object with a type attribute
         * @param  {Object} [hash] data hash to pass along with the event
         * @return {Component}       self
         * @method trigger
         */

        Component.prototype.trigger = function trigger(event, hash) {
            Events.trigger(this.el_, event, hash);
            return this;
        };

        /**
         * Bind a listener to the component's ready state.
         * Different from event listeners in that if the ready event has already happened
         * it will trigger the function immediately.
         *
         * @param  {Function} fn Ready listener
         * @param  {Boolean} sync Exec the listener synchronously if component is ready
         * @return {Component}
         * @method ready
         */

        Component.prototype.ready = function ready(fn) {
            var sync = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

            if (fn) {
                if (this.isReady_) {
                    if (sync) {
                        fn.call(this);
                    } else {
                        // Call the function asynchronously by default for consistency
                        this.setTimeout(fn, 1);
                    }
                } else {
                    this.readyQueue_ = this.readyQueue_ || [];
                    this.readyQueue_.push(fn);
                }
            }
            return this;
        };

        /**
         * Trigger the ready listeners
         *
         * @return {Component}
         * @method triggerReady
         */

        Component.prototype.triggerReady = function triggerReady() {
            this.isReady_ = true;

            // Ensure ready is triggerd asynchronously
            this.setTimeout(function () {
                var readyQueue = this.readyQueue_;

                // Reset Ready Queue
                this.readyQueue_ = [];

                if (readyQueue && readyQueue.length > 0) {
                    readyQueue.forEach(function (fn) {
                        fn.call(this);
                    }, this);
                }

                // Allow for using event listeners also
                this.trigger('ready');
            }, 1);
        };

        /**
         * Finds a single DOM element matching `selector` within the component's
         * `contentEl` or another custom context.
         *
         * @method $
         * @param  {String} selector
         *         A valid CSS selector, which will be passed to `querySelector`.
         *
         * @param  {Element|String} [context=document]
         *         A DOM element within which to query. Can also be a selector
         *         string in which case the first matching element will be used
         *         as context. If missing (or no element matches selector), falls
         *         back to `document`.
         *
         * @return {Element|null}
         */

        Component.prototype.$ = function $(selector, context) {
            return Dom.$(selector, context || this.contentEl());
        };

        /**
         * Finds a all DOM elements matching `selector` within the component's
         * `contentEl` or another custom context.
         *
         * @method $$
         * @param  {String} selector
         *         A valid CSS selector, which will be passed to `querySelectorAll`.
         *
         * @param  {Element|String} [context=document]
         *         A DOM element within which to query. Can also be a selector
         *         string in which case the first matching element will be used
         *         as context. If missing (or no element matches selector), falls
         *         back to `document`.
         *
         * @return {NodeList}
         */

        Component.prototype.$$ = function $$(selector, context) {
            return Dom.$$(selector, context || this.contentEl());
        };

        /**
         * Check if a component's element has a CSS class name
         *
         * @param {String} classToCheck Classname to check
         * @return {Component}
         * @method hasClass
         */

        Component.prototype.hasClass = function hasClass(classToCheck) {
            return Dom.hasElClass(this.el_, classToCheck);
        };

        /**
         * Add a CSS class name to the component's element
         *
         * @param {String} classToAdd Classname to add
         * @return {Component}
         * @method addClass
         */

        Component.prototype.addClass = function addClass(classToAdd) {
            Dom.addElClass(this.el_, classToAdd);
            return this;
        };

        /**
         * Remove a CSS class name from the component's element
         *
         * @param {String} classToRemove Classname to remove
         * @return {Component}
         * @method removeClass
         */

        Component.prototype.removeClass = function removeClass(classToRemove) {
            Dom.removeElClass(this.el_, classToRemove);
            return this;
        };

        /**
         * Add or remove a CSS class name from the component's element
         *
         * @param  {String} classToToggle
         * @param  {Boolean|Function} [predicate]
         *         Can be a function that returns a Boolean. If `true`, the class
         *         will be added; if `false`, the class will be removed. If not
         *         given, the class will be added if not present and vice versa.
         *
         * @return {Component}
         * @method toggleClass
         */

        Component.prototype.toggleClass = function toggleClass(classToToggle, predicate) {
            Dom.toggleElClass(this.el_, classToToggle, predicate);
            return this;
        };

        /**
         * Show the component element if hidden
         *
         * @return {Component}
         * @method show
         */

        Component.prototype.show = function show() {
            this.removeClass('vjs-hidden');
            return this;
        };

        /**
         * Hide the component element if currently showing
         *
         * @return {Component}
         * @method hide
         */

        Component.prototype.hide = function hide() {
            this.addClass('vjs-hidden');
            return this;
        };

        /**
         * Lock an item in its visible state
         * To be used with fadeIn/fadeOut.
         *
         * @return {Component}
         * @private
         * @method lockShowing
         */

        Component.prototype.lockShowing = function lockShowing() {
            this.addClass('vjs-lock-showing');
            return this;
        };

        /**
         * Unlock an item to be hidden
         * To be used with fadeIn/fadeOut.
         *
         * @return {Component}
         * @private
         * @method unlockShowing
         */

        Component.prototype.unlockShowing = function unlockShowing() {
            this.removeClass('vjs-lock-showing');
            return this;
        };

        /**
         * Set or get the width of the component (CSS values)
         * Setting the video tag dimension values only works with values in pixels.
         * Percent values will not work.
         * Some percents can be used, but width()/height() will return the number + %,
         * not the actual computed width/height.
         *
         * @param  {Number|String=} num   Optional width number
         * @param  {Boolean} skipListeners Skip the 'resize' event trigger
         * @return {Component} This component, when setting the width
         * @return {Number|String} The width, when getting
         * @method width
         */

        Component.prototype.width = function width(num, skipListeners) {
            return this.dimension('width', num, skipListeners);
        };

        /**
         * Get or set the height of the component (CSS values)
         * Setting the video tag dimension values only works with values in pixels.
         * Percent values will not work.
         * Some percents can be used, but width()/height() will return the number + %,
         * not the actual computed width/height.
         *
         * @param  {Number|String=} num     New component height
         * @param  {Boolean=} skipListeners Skip the resize event trigger
         * @return {Component} This component, when setting the height
         * @return {Number|String} The height, when getting
         * @method height
         */

        Component.prototype.height = function height(num, skipListeners) {
            return this.dimension('height', num, skipListeners);
        };

        /**
         * Set both width and height at the same time
         *
         * @param  {Number|String} width Width of player
         * @param  {Number|String} height Height of player
         * @return {Component} The component
         * @method dimensions
         */

        Component.prototype.dimensions = function dimensions(width, height) {
            // Skip resize listeners on width for optimization
            return this.width(width, true).height(height);
        };

        /**
         * Get or set width or height
         * This is the shared code for the width() and height() methods.
         * All for an integer, integer + 'px' or integer + '%';
         * Known issue: Hidden elements officially have a width of 0. We're defaulting
         * to the style.width value and falling back to computedStyle which has the
         * hidden element issue. Info, but probably not an efficient fix:
         * http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/
         *
         * @param  {String} widthOrHeight  'width' or 'height'
         * @param  {Number|String=} num     New dimension
         * @param  {Boolean=} skipListeners Skip resize event trigger
         * @return {Component} The component if a dimension was set
         * @return {Number|String} The dimension if nothing was set
         * @private
         * @method dimension
         */

        Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {
            if (num !== undefined) {
                // Set to zero if null or literally NaN (NaN !== NaN)
                if (num === null || num !== num) {
                    num = 0;
                }

                // Check if using css width/height (% or px) and adjust
                if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
                    this.el_.style[widthOrHeight] = num;
                } else if (num === 'auto') {
                    this.el_.style[widthOrHeight] = '';
                } else {
                    this.el_.style[widthOrHeight] = num + 'px';
                }

                // skipListeners allows us to avoid triggering the resize event when setting both width and height
                if (!skipListeners) {
                    this.trigger('resize');
                }

                // Return component
                return this;
            }

            // Not setting a value, so getting it
            // Make sure element exists
            if (!this.el_) {
                return 0;
            }

            // Get dimension value from style
            var val = this.el_.style[widthOrHeight];
            var pxIndex = val.indexOf('px');

            if (pxIndex !== -1) {
                // Return the pixel value with no 'px'
                return parseInt(val.slice(0, pxIndex), 10);
            }

            // No px so using % or no style was set, so falling back to offsetWidth/height
            // If component has display:none, offset will return 0
            // TODO: handle display:none and no dimension style using px
            return parseInt(this.el_['offset' + _utilsToTitleCaseJs2['default'](widthOrHeight)], 10);
        };

        /**
         * Get width or height of computed style
         * @param  {String} widthOrHeight  'width' or 'height'
         * @return {Number|Boolean} The bolean false if nothing was set
         * @method currentDimension
         */

        Component.prototype.currentDimension = function currentDimension(widthOrHeight) {
            var computedWidthOrHeight = 0;

            if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {
                throw new Error('currentDimension only accepts width or height value');
            }

            if (typeof _globalWindow2['default'].getComputedStyle === 'function') {
                var computedStyle = _globalWindow2['default'].getComputedStyle(this.el_);
                computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];
            } else if (this.el_.currentStyle) {
                // ie 8 doesn't support computed style, shim it
                // return clientWidth or clientHeight instead for better accuracy
                var rule = 'offset' + _utilsToTitleCaseJs2['default'](widthOrHeight);
                computedWidthOrHeight = this.el_[rule];
            }

            // remove 'px' from variable and parse as integer
            computedWidthOrHeight = parseFloat(computedWidthOrHeight);
            return computedWidthOrHeight;
        };

        /**
         * Get an object which contains width and height values of computed style
         * @return {Object} The dimensions of element
         * @method currentDimensions
         */

        Component.prototype.currentDimensions = function currentDimensions() {
            return {
                width: this.currentDimension('width'),
                height: this.currentDimension('height')
            };
        };

        /**
         * Get width of computed style
         * @return {Integer}
         * @method currentWidth
         */

        Component.prototype.currentWidth = function currentWidth() {
            return this.currentDimension('width');
        };

        /**
         * Get height of computed style
         * @return {Integer}
         * @method currentHeight
         */

        Component.prototype.currentHeight = function currentHeight() {
            return this.currentDimension('height');
        };

        /**
         * Emit 'tap' events when touch events are supported
         * This is used to support toggling the controls through a tap on the video.
         * We're requiring them to be enabled because otherwise every component would
         * have this extra overhead unnecessarily, on mobile devices where extra
         * overhead is especially bad.
         *
         * @private
         * @method emitTapEvents
         */

        Component.prototype.emitTapEvents = function emitTapEvents() {
            // Track the start time so we can determine how long the touch lasted
            var touchStart = 0;
            var firstTouch = null;

            // Maximum movement allowed during a touch event to still be considered a tap
            // Other popular libs use anywhere from 2 (hammer.js) to 15, so 10 seems like a nice, round number.
            var tapMovementThreshold = 10;

            // The maximum length a touch can be while still being considered a tap
            var touchTimeThreshold = 200;

            var couldBeTap = undefined;

            this.on('touchstart', function (event) {
                // If more than one finger, don't consider treating this as a click
                if (event.touches.length === 1) {
                    // Copy pageX/pageY from the object
                    firstTouch = {
                        pageX: event.touches[0].pageX,
                        pageY: event.touches[0].pageY
                    };
                    // Record start time so we can detect a tap vs. "touch and hold"
                    touchStart = new Date().getTime();
                    // Reset couldBeTap tracking
                    couldBeTap = true;
                }
            });

            this.on('touchmove', function (event) {
                // If more than one finger, don't consider treating this as a click
                if (event.touches.length > 1) {
                    couldBeTap = false;
                } else if (firstTouch) {
                    // Some devices will throw touchmoves for all but the slightest of taps.
                    // So, if we moved only a small distance, this could still be a tap
                    var xdiff = event.touches[0].pageX - firstTouch.pageX;
                    var ydiff = event.touches[0].pageY - firstTouch.pageY;
                    var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);

                    if (touchDistance > tapMovementThreshold) {
                        couldBeTap = false;
                    }
                }
            });

            var noTap = function noTap() {
                couldBeTap = false;
            };

            // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
            this.on('touchleave', noTap);
            this.on('touchcancel', noTap);

            // When the touch ends, measure how long it took and trigger the appropriate
            // event
            this.on('touchend', function (event) {
                firstTouch = null;
                // Proceed only if the touchmove/leave/cancel event didn't happen
                if (couldBeTap === true) {
                    // Measure how long the touch lasted
                    var touchTime = new Date().getTime() - touchStart;

                    // Make sure the touch was less than the threshold to be considered a tap
                    if (touchTime < touchTimeThreshold) {
                        // Don't let browser turn this into a click
                        event.preventDefault();
                        this.trigger('tap');
                        // It may be good to copy the touchend event object and change the
                        // type to tap, if the other event properties aren't exact after
                        // Events.fixEvent runs (e.g. event.target)
                    }
                }
            });
        };

        /**
         * Report user touch activity when touch events occur
         * User activity is used to determine when controls should show/hide. It's
         * relatively simple when it comes to mouse events, because any mouse event
         * should show the controls. So we capture mouse events that bubble up to the
         * player and report activity when that happens.
         * With touch events it isn't as easy. We can't rely on touch events at the
         * player level, because a tap (touchstart + touchend) on the video itself on
         * mobile devices is meant to turn controls off (and on). User activity is
         * checked asynchronously, so what could happen is a tap event on the video
         * turns the controls off, then the touchend event bubbles up to the player,
         * which if it reported user activity, would turn the controls right back on.
         * (We also don't want to completely block touch events from bubbling up)
         * Also a touchmove, touch+hold, and anything other than a tap is not supposed
         * to turn the controls back on on a mobile device.
         * Here we're setting the default component behavior to report user activity
         * whenever touch events happen, and this can be turned off by components that
         * want touch events to act differently.
         *
         * @method enableTouchActivity
         */

        Component.prototype.enableTouchActivity = function enableTouchActivity() {
            // Don't continue if the root player doesn't support reporting user activity
            if (!this.player() || !this.player().reportUserActivity) {
                return;
            }

            // listener for reporting that the user is active
            var report = Fn.bind(this.player(), this.player().reportUserActivity);

            var touchHolding = undefined;

            this.on('touchstart', function () {
                report();
                // For as long as the they are touching the device or have their mouse down,
                // we consider them active even if they're not moving their finger or mouse.
                // So we want to continue to update that they are active
                this.clearInterval(touchHolding);
                // report at the same interval as activityCheck
                touchHolding = this.setInterval(report, 250);
            });

            var touchEnd = function touchEnd(event) {
                report();
                // stop the interval that maintains activity if the touch is holding
                this.clearInterval(touchHolding);
            };

            this.on('touchmove', report);
            this.on('touchend', touchEnd);
            this.on('touchcancel', touchEnd);
        };

        /**
         * Creates timeout and sets up disposal automatically.
         *
         * @param {Function} fn The function to run after the timeout.
         * @param {Number} timeout Number of ms to delay before executing specified function.
         * @return {Number} Returns the timeout ID
         * @method setTimeout
         */

        Component.prototype.setTimeout = function setTimeout(fn, timeout) {
            fn = Fn.bind(this, fn);

            // window.setTimeout would be preferable here, but due to some bizarre issue with Sinon and/or Phantomjs, we can't.
            var timeoutId = _globalWindow2['default'].setTimeout(fn, timeout);

            var disposeFn = function disposeFn() {
                this.clearTimeout(timeoutId);
            };

            disposeFn.guid = 'vjs-timeout-' + timeoutId;

            this.on('dispose', disposeFn);

            return timeoutId;
        };

        /**
         * Clears a timeout and removes the associated dispose listener
         *
         * @param {Number} timeoutId The id of the timeout to clear
         * @return {Number} Returns the timeout ID
         * @method clearTimeout
         */

        Component.prototype.clearTimeout = function clearTimeout(timeoutId) {
            _globalWindow2['default'].clearTimeout(timeoutId);

            var disposeFn = function disposeFn() {};

            disposeFn.guid = 'vjs-timeout-' + timeoutId;

            this.off('dispose', disposeFn);

            return timeoutId;
        };

        /**
         * Creates an interval and sets up disposal automatically.
         *
         * @param {Function} fn The function to run every N seconds.
         * @param {Number} interval Number of ms to delay before executing specified function.
         * @return {Number} Returns the interval ID
         * @method setInterval
         */

        Component.prototype.setInterval = function setInterval(fn, interval) {
            fn = Fn.bind(this, fn);

            var intervalId = _globalWindow2['default'].setInterval(fn, interval);

            var disposeFn = function disposeFn() {
                this.clearInterval(intervalId);
            };

            disposeFn.guid = 'vjs-interval-' + intervalId;

            this.on('dispose', disposeFn);

            return intervalId;
        };

        /**
         * Clears an interval and removes the associated dispose listener
         *
         * @param {Number} intervalId The id of the interval to clear
         * @return {Number} Returns the interval ID
         * @method clearInterval
         */

        Component.prototype.clearInterval = function clearInterval(intervalId) {
            _globalWindow2['default'].clearInterval(intervalId);

            var disposeFn = function disposeFn() {};

            disposeFn.guid = 'vjs-interval-' + intervalId;

            this.off('dispose', disposeFn);

            return intervalId;
        };

        /**
         * Registers a component
         *
         * @param {String} name Name of the component to register
         * @param {Object} comp The component to register
         * @static
         * @method registerComponent
         */

        Component.registerComponent = function registerComponent(name, comp) {
            if (!Component.components_) {
                Component.components_ = {};
            }

            Component.components_[name] = comp;
            return comp;
        };

        /**
         * Gets a component by name
         *
         * @param {String} name Name of the component to get
         * @return {Component}
         * @static
         * @method getComponent
         */

        Component.getComponent = function getComponent(name) {
            if (Component.components_ && Component.components_[name]) {
                return Component.components_[name];
            }

            if (_globalWindow2['default'] && _globalWindow2['default'].videojs && _globalWindow2['default'].videojs[name]) {
                _utilsLogJs2['default'].warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');
                return _globalWindow2['default'].videojs[name];
            }
        };

        /**
         * Sets up the constructor using the supplied init method
         * or uses the init of the parent object
         *
         * @param {Object} props An object of properties
         * @static
         * @deprecated
         * @method extend
         */

        Component.extend = function extend(props) {
            props = props || {};

            _utilsLogJs2['default'].warn('Component.extend({}) has been deprecated, use videojs.extend(Component, {}) instead');

            // Set up the constructor using the supplied init method
            // or using the init of the parent object
            // Make sure to check the unobfuscated version for external libs
            var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {};
            // In Resig's simple class inheritance (previously used) the constructor
            //  is a function that calls `this.init.apply(arguments)`
            // However that would prevent us from using `ParentObject.call(this);`
            //  in a Child constructor because the `this` in `this.init`
            //  would still refer to the Child and cause an infinite loop.
            // We would instead have to do
            //    `ParentObject.prototype.init.apply(this, arguments);`
            //  Bleh. We're not creating a _super() function, so it's good to keep
            //  the parent constructor reference simple.
            var subObj = function subObj() {
                init.apply(this, arguments);
            };

            // Inherit from this object's prototype
            subObj.prototype = Object.create(this.prototype);
            // Reset the constructor property for subObj otherwise
            // instances of subObj would have the constructor of the parent Object
            subObj.prototype.constructor = subObj;

            // Make the class extendable
            subObj.extend = Component.extend;

            // Extend subObj's prototype with functions and other properties from props
            for (var _name in props) {
                if (props.hasOwnProperty(_name)) {
                    subObj.prototype[_name] = props[_name];
                }
            }

            return subObj;
        };

        return Component;
    })();

    Component.registerComponent('Component', Component);
    exports['default'] = Component;
    module.exports = exports['default'];

},{"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/guid.js":146,"./utils/log.js":147,"./utils/merge-options.js":148,"./utils/to-title-case.js":151,"global/window":2}],68:[function(_dereq_,module,exports){
    /**
     * @file audio-track-button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _trackButtonJs = _dereq_('../track-button.js');

    var _trackButtonJs2 = _interopRequireDefault(_trackButtonJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsFnJs = _dereq_('../../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _audioTrackMenuItemJs = _dereq_('./audio-track-menu-item.js');

    var _audioTrackMenuItemJs2 = _interopRequireDefault(_audioTrackMenuItemJs);

    /**
     * The base class for buttons that toggle specific text track types (e.g. subtitles)
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends TrackButton
     * @class AudioTrackButton
     */

    var AudioTrackButton = (function (_TrackButton) {
        _inherits(AudioTrackButton, _TrackButton);

        function AudioTrackButton(player) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            _classCallCheck(this, AudioTrackButton);

            options.tracks = player.audioTracks && player.audioTracks();

            _TrackButton.call(this, player, options);

            this.el_.setAttribute('aria-label', 'Audio Menu');
        }

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);
        };

        /**
         * Create a menu item for each audio track
         *
         * @return {Array} Array of menu items
         * @method createItems
         */

        AudioTrackButton.prototype.createItems = function createItems() {
            var items = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

            var tracks = this.player_.audioTracks && this.player_.audioTracks();

            if (!tracks) {
                return items;
            }

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];

                items.push(new _audioTrackMenuItemJs2['default'](this.player_, {
                    // MenuItem is selectable
                    'selectable': true,
                    'track': track
                }));
            }

            return items;
        };

        return AudioTrackButton;
    })(_trackButtonJs2['default']);

    AudioTrackButton.prototype.controlText_ = 'Audio Track';
    _componentJs2['default'].registerComponent('AudioTrackButton', AudioTrackButton);
    exports['default'] = AudioTrackButton;
    module.exports = exports['default'];

},{"../../component.js":67,"../../utils/fn.js":144,"../track-button.js":98,"./audio-track-menu-item.js":69}],69:[function(_dereq_,module,exports){
    /**
     * @file audio-track-menu-item.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

    var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsFnJs = _dereq_('../../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    /**
     * The audio track menu item
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends MenuItem
     * @class AudioTrackMenuItem
     */

    var AudioTrackMenuItem = (function (_MenuItem) {
        _inherits(AudioTrackMenuItem, _MenuItem);

        function AudioTrackMenuItem(player, options) {
            var _this = this;

            _classCallCheck(this, AudioTrackMenuItem);

            var track = options.track;
            var tracks = player.audioTracks();

            // Modify options for parent MenuItem class's init.
            options.label = track.label || track.language || 'Unknown';
            options.selected = track.enabled;

            _MenuItem.call(this, player, options);

            this.track = track;

            if (tracks) {
                (function () {
                    var changeHandler = Fn.bind(_this, _this.handleTracksChange);

                    tracks.addEventListener('change', changeHandler);
                    _this.on('dispose', function () {
                        tracks.removeEventListener('change', changeHandler);
                    });
                })();
            }
        }

        /**
         * Handle click on audio track
         *
         * @method handleClick
         */

        AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {
            var tracks = this.player_.audioTracks();

            _MenuItem.prototype.handleClick.call(this, event);

            if (!tracks) return;

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];

                track.enabled = track === this.track;
            }
        };

        /**
         * Handle audio track change
         *
         * @method handleTracksChange
         */

        AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
            this.selected(this.track.enabled);
        };

        return AudioTrackMenuItem;
    })(_menuMenuItemJs2['default']);

    _componentJs2['default'].registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);
    exports['default'] = AudioTrackMenuItem;
    module.exports = exports['default'];

},{"../../component.js":67,"../../menu/menu-item.js":110,"../../utils/fn.js":144}],70:[function(_dereq_,module,exports){
    /**
     * @file control-bar.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

// Required children

    var _playToggleJs = _dereq_('./play-toggle.js');

    var _playToggleJs2 = _interopRequireDefault(_playToggleJs);

    var _timeControlsCurrentTimeDisplayJs = _dereq_('./time-controls/current-time-display.js');

    var _timeControlsCurrentTimeDisplayJs2 = _interopRequireDefault(_timeControlsCurrentTimeDisplayJs);

    var _timeControlsDurationDisplayJs = _dereq_('./time-controls/duration-display.js');

    var _timeControlsDurationDisplayJs2 = _interopRequireDefault(_timeControlsDurationDisplayJs);

    var _timeControlsTimeDividerJs = _dereq_('./time-controls/time-divider.js');

    var _timeControlsTimeDividerJs2 = _interopRequireDefault(_timeControlsTimeDividerJs);

    var _timeControlsRemainingTimeDisplayJs = _dereq_('./time-controls/remaining-time-display.js');

    var _timeControlsRemainingTimeDisplayJs2 = _interopRequireDefault(_timeControlsRemainingTimeDisplayJs);

    var _liveDisplayJs = _dereq_('./live-display.js');

    var _liveDisplayJs2 = _interopRequireDefault(_liveDisplayJs);

    var _progressControlProgressControlJs = _dereq_('./progress-control/progress-control.js');

    var _progressControlProgressControlJs2 = _interopRequireDefault(_progressControlProgressControlJs);

    var _fullscreenToggleJs = _dereq_('./fullscreen-toggle.js');

    var _fullscreenToggleJs2 = _interopRequireDefault(_fullscreenToggleJs);

    var _volumeControlVolumeControlJs = _dereq_('./volume-control/volume-control.js');

    var _volumeControlVolumeControlJs2 = _interopRequireDefault(_volumeControlVolumeControlJs);

    var _volumeMenuButtonJs = _dereq_('./volume-menu-button.js');

    var _volumeMenuButtonJs2 = _interopRequireDefault(_volumeMenuButtonJs);

    var _muteToggleJs = _dereq_('./mute-toggle.js');

    var _muteToggleJs2 = _interopRequireDefault(_muteToggleJs);

    var _textTrackControlsChaptersButtonJs = _dereq_('./text-track-controls/chapters-button.js');

    var _textTrackControlsChaptersButtonJs2 = _interopRequireDefault(_textTrackControlsChaptersButtonJs);

    var _textTrackControlsDescriptionsButtonJs = _dereq_('./text-track-controls/descriptions-button.js');

    var _textTrackControlsDescriptionsButtonJs2 = _interopRequireDefault(_textTrackControlsDescriptionsButtonJs);

    var _textTrackControlsSubtitlesButtonJs = _dereq_('./text-track-controls/subtitles-button.js');

    var _textTrackControlsSubtitlesButtonJs2 = _interopRequireDefault(_textTrackControlsSubtitlesButtonJs);

    var _textTrackControlsCaptionsButtonJs = _dereq_('./text-track-controls/captions-button.js');

    var _textTrackControlsCaptionsButtonJs2 = _interopRequireDefault(_textTrackControlsCaptionsButtonJs);

    var _audioTrackControlsAudioTrackButtonJs = _dereq_('./audio-track-controls/audio-track-button.js');

    var _audioTrackControlsAudioTrackButtonJs2 = _interopRequireDefault(_audioTrackControlsAudioTrackButtonJs);

    var _playbackRateMenuPlaybackRateMenuButtonJs = _dereq_('./playback-rate-menu/playback-rate-menu-button.js');

    var _playbackRateMenuPlaybackRateMenuButtonJs2 = _interopRequireDefault(_playbackRateMenuPlaybackRateMenuButtonJs);

    var _spacerControlsCustomControlSpacerJs = _dereq_('./spacer-controls/custom-control-spacer.js');

    var _spacerControlsCustomControlSpacerJs2 = _interopRequireDefault(_spacerControlsCustomControlSpacerJs);

    /**
     * Container of main controls
     *
     * @extends Component
     * @class ControlBar
     */

    var ControlBar = (function (_Component) {
        _inherits(ControlBar, _Component);

        function ControlBar() {
            _classCallCheck(this, ControlBar);

            _Component.apply(this, arguments);
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        ControlBar.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-control-bar',
                dir: 'ltr'
            }, {
                'role': 'group' // The control bar is a group, so it can contain menuitems
            });
        };

        return ControlBar;
    })(_componentJs2['default']);

    ControlBar.prototype.options_ = {
        children: ['playToggle', 'volumeMenuButton', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subtitlesButton', 'captionsButton', 'audioTrackButton', 'fullscreenToggle']
    };

    _componentJs2['default'].registerComponent('ControlBar', ControlBar);
    exports['default'] = ControlBar;
    module.exports = exports['default'];

},{"../component.js":67,"./audio-track-controls/audio-track-button.js":68,"./fullscreen-toggle.js":71,"./live-display.js":72,"./mute-toggle.js":73,"./play-toggle.js":74,"./playback-rate-menu/playback-rate-menu-button.js":75,"./progress-control/progress-control.js":80,"./spacer-controls/custom-control-spacer.js":83,"./text-track-controls/captions-button.js":86,"./text-track-controls/chapters-button.js":87,"./text-track-controls/descriptions-button.js":89,"./text-track-controls/subtitles-button.js":91,"./time-controls/current-time-display.js":94,"./time-controls/duration-display.js":95,"./time-controls/remaining-time-display.js":96,"./time-controls/time-divider.js":97,"./volume-control/volume-control.js":100,"./volume-menu-button.js":102}],71:[function(_dereq_,module,exports){
    /**
     * @file fullscreen-toggle.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _buttonJs = _dereq_('../button.js');

    var _buttonJs2 = _interopRequireDefault(_buttonJs);

    var _componentJs = _dereq_('../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    /**
     * Toggle fullscreen video
     *
     * @extends Button
     * @class FullscreenToggle
     */

    var FullscreenToggle = (function (_Button) {
        _inherits(FullscreenToggle, _Button);

        function FullscreenToggle(player, options) {
            _classCallCheck(this, FullscreenToggle);

            _Button.call(this, player, options);
            this.on(player, 'fullscreenchange', this.handleFullscreenChange);
        }

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);
        };

        /**
         * Handles Fullscreenchange on the component and change control text accordingly
         *
         * @method handleFullscreenChange
         */

        FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange() {
            if (this.player_.isFullscreen()) {
                this.controlText('Non-Fullscreen');
            } else {
                this.controlText('Fullscreen');
            }
        };

        /**
         * Handles click for full screen
         *
         * @method handleClick
         */

        FullscreenToggle.prototype.handleClick = function handleClick() {
            if (!this.player_.isFullscreen()) {
                this.player_.requestFullscreen();
            } else {
                this.player_.exitFullscreen();
            }
        };

        return FullscreenToggle;
    })(_buttonJs2['default']);

    FullscreenToggle.prototype.controlText_ = 'Fullscreen';

    _componentJs2['default'].registerComponent('FullscreenToggle', FullscreenToggle);
    exports['default'] = FullscreenToggle;
    module.exports = exports['default'];

},{"../button.js":64,"../component.js":67}],72:[function(_dereq_,module,exports){
    /**
     * @file live-display.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _component = _dereq_('../component');

    var _component2 = _interopRequireDefault(_component);

    var _utilsDomJs = _dereq_('../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    /**
     * Displays the live indicator
     * TODO - Future make it click to snap to live
     *
     * @extends Component
     * @class LiveDisplay
     */

    var LiveDisplay = (function (_Component) {
        _inherits(LiveDisplay, _Component);

        function LiveDisplay(player, options) {
            _classCallCheck(this, LiveDisplay);

            _Component.call(this, player, options);

            this.updateShowing();
            this.on(this.player(), 'durationchange', this.updateShowing);
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        LiveDisplay.prototype.createEl = function createEl() {
            var el = _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-live-control vjs-control'
            });

            this.contentEl_ = Dom.createEl('div', {
                className: 'vjs-live-display',
                innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE')
            }, {
                'aria-live': 'off'
            });

            el.appendChild(this.contentEl_);
            return el;
        };

        LiveDisplay.prototype.updateShowing = function updateShowing() {
            if (this.player().duration() === Infinity) {
                this.show();
            } else {
                this.hide();
            }
        };

        return LiveDisplay;
    })(_component2['default']);

    _component2['default'].registerComponent('LiveDisplay', LiveDisplay);
    exports['default'] = LiveDisplay;
    module.exports = exports['default'];

},{"../component":67,"../utils/dom.js":142}],73:[function(_dereq_,module,exports){
    /**
     * @file mute-toggle.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _button = _dereq_('../button');

    var _button2 = _interopRequireDefault(_button);

    var _component = _dereq_('../component');

    var _component2 = _interopRequireDefault(_component);

    var _utilsDomJs = _dereq_('../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    /**
     * A button component for muting the audio
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Button
     * @class MuteToggle
     */

    var MuteToggle = (function (_Button) {
        _inherits(MuteToggle, _Button);

        function MuteToggle(player, options) {
            _classCallCheck(this, MuteToggle);

            _Button.call(this, player, options);

            this.on(player, 'volumechange', this.update);

            // hide mute toggle if the current tech doesn't support volume control
            if (player.tech_ && player.tech_['featuresVolumeControl'] === false) {
                this.addClass('vjs-hidden');
            }

            this.on(player, 'loadstart', function () {
                this.update(); // We need to update the button to account for a default muted state.

                if (player.tech_['featuresVolumeControl'] === false) {
                    this.addClass('vjs-hidden');
                } else {
                    this.removeClass('vjs-hidden');
                }
            });
        }

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        MuteToggle.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);
        };

        /**
         * Handle click on mute
         *
         * @method handleClick
         */

        MuteToggle.prototype.handleClick = function handleClick() {
            this.player_.muted(this.player_.muted() ? false : true);
        };

        /**
         * Update volume
         *
         * @method update
         */

        MuteToggle.prototype.update = function update() {
            var vol = this.player_.volume(),
                level = 3;

            if (vol === 0 || this.player_.muted()) {
                level = 0;
            } else if (vol < 0.33) {
                level = 1;
            } else if (vol < 0.67) {
                level = 2;
            }

            // Don't rewrite the button text if the actual text doesn't change.
            // This causes unnecessary and confusing information for screen reader users.
            // This check is needed because this function gets called every time the volume level is changed.
            var toMute = this.player_.muted() ? 'Unmute' : 'Mute';
            if (this.controlText() !== toMute) {
                this.controlText(toMute);
            }

            /* TODO improve muted icon classes */
            for (var i = 0; i < 4; i++) {
                Dom.removeElClass(this.el_, 'vjs-vol-' + i);
            }
            Dom.addElClass(this.el_, 'vjs-vol-' + level);
        };

        return MuteToggle;
    })(_button2['default']);

    MuteToggle.prototype.controlText_ = 'Mute';

    _component2['default'].registerComponent('MuteToggle', MuteToggle);
    exports['default'] = MuteToggle;
    module.exports = exports['default'];

},{"../button":64,"../component":67,"../utils/dom.js":142}],74:[function(_dereq_,module,exports){
    /**
     * @file play-toggle.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _buttonJs = _dereq_('../button.js');

    var _buttonJs2 = _interopRequireDefault(_buttonJs);

    var _componentJs = _dereq_('../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    /**
     * Button to toggle between play and pause
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Button
     * @class PlayToggle
     */

    var PlayToggle = (function (_Button) {
        _inherits(PlayToggle, _Button);

        function PlayToggle(player, options) {
            _classCallCheck(this, PlayToggle);

            _Button.call(this, player, options);

            this.on(player, 'play', this.handlePlay);
            this.on(player, 'pause', this.handlePause);
        }

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        PlayToggle.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);
        };

        /**
         * Handle click to toggle between play and pause
         *
         * @method handleClick
         */

        PlayToggle.prototype.handleClick = function handleClick() {
            if (this.player_.paused()) {
                this.player_.play();
            } else {
                this.player_.pause();
            }
        };

        /**
         * Add the vjs-playing class to the element so it can change appearance
         *
         * @method handlePlay
         */

        PlayToggle.prototype.handlePlay = function handlePlay() {
            this.removeClass('vjs-paused');
            this.addClass('vjs-playing');
            this.controlText('Pause'); // change the button text to "Pause"
        };

        /**
         * Add the vjs-paused class to the element so it can change appearance
         *
         * @method handlePause
         */

        PlayToggle.prototype.handlePause = function handlePause() {
            this.removeClass('vjs-playing');
            this.addClass('vjs-paused');
            this.controlText('Play'); // change the button text to "Play"
        };

        return PlayToggle;
    })(_buttonJs2['default']);

    PlayToggle.prototype.controlText_ = 'Play';

    _componentJs2['default'].registerComponent('PlayToggle', PlayToggle);
    exports['default'] = PlayToggle;
    module.exports = exports['default'];

},{"../button.js":64,"../component.js":67}],75:[function(_dereq_,module,exports){
    /**
     * @file playback-rate-menu-button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _menuMenuButtonJs = _dereq_('../../menu/menu-button.js');

    var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

    var _menuMenuJs = _dereq_('../../menu/menu.js');

    var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

    var _playbackRateMenuItemJs = _dereq_('./playback-rate-menu-item.js');

    var _playbackRateMenuItemJs2 = _interopRequireDefault(_playbackRateMenuItemJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsDomJs = _dereq_('../../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    /**
     * The component for controlling the playback rate
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends MenuButton
     * @class PlaybackRateMenuButton
     */

    var PlaybackRateMenuButton = (function (_MenuButton) {
        _inherits(PlaybackRateMenuButton, _MenuButton);

        function PlaybackRateMenuButton(player, options) {
            _classCallCheck(this, PlaybackRateMenuButton);

            _MenuButton.call(this, player, options);

            this.updateVisibility();
            this.updateLabel();

            this.on(player, 'loadstart', this.updateVisibility);
            this.on(player, 'ratechange', this.updateLabel);
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        PlaybackRateMenuButton.prototype.createEl = function createEl() {
            var el = _MenuButton.prototype.createEl.call(this);

            this.labelEl_ = Dom.createEl('div', {
                className: 'vjs-playback-rate-value',
                innerHTML: 1.0
            });

            el.appendChild(this.labelEl_);

            return el;
        };

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);
        };

        /**
         * Create the playback rate menu
         *
         * @return {Menu} Menu object populated with items
         * @method createMenu
         */

        PlaybackRateMenuButton.prototype.createMenu = function createMenu() {
            var menu = new _menuMenuJs2['default'](this.player());
            var rates = this.playbackRates();

            if (rates) {
                for (var i = rates.length - 1; i >= 0; i--) {
                    menu.addChild(new _playbackRateMenuItemJs2['default'](this.player(), { 'rate': rates[i] + 'x' }));
                }
            }

            return menu;
        };

        /**
         * Updates ARIA accessibility attributes
         *
         * @method updateARIAAttributes
         */

        PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {
            // Current playback rate
            this.el().setAttribute('aria-valuenow', this.player().playbackRate());
        };

        /**
         * Handle menu item click
         *
         * @method handleClick
         */

        PlaybackRateMenuButton.prototype.handleClick = function handleClick() {
            // select next rate option
            var currentRate = this.player().playbackRate();
            var rates = this.playbackRates();

            // this will select first one if the last one currently selected
            var newRate = rates[0];
            for (var i = 0; i < rates.length; i++) {
                if (rates[i] > currentRate) {
                    newRate = rates[i];
                    break;
                }
            }
            this.player().playbackRate(newRate);
        };

        /**
         * Get possible playback rates
         *
         * @return {Array} Possible playback rates
         * @method playbackRates
         */

        PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {
            return this.options_['playbackRates'] || this.options_.playerOptions && this.options_.playerOptions['playbackRates'];
        };

        /**
         * Get whether playback rates is supported by the tech
         * and an array of playback rates exists
         *
         * @return {Boolean} Whether changing playback rate is supported
         * @method playbackRateSupported
         */

        PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {
            return this.player().tech_ && this.player().tech_['featuresPlaybackRate'] && this.playbackRates() && this.playbackRates().length > 0;
        };

        /**
         * Hide playback rate controls when they're no playback rate options to select
         *
         * @method updateVisibility
         */

        PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility() {
            if (this.playbackRateSupported()) {
                this.removeClass('vjs-hidden');
            } else {
                this.addClass('vjs-hidden');
            }
        };

        /**
         * Update button label when rate changed
         *
         * @method updateLabel
         */

        PlaybackRateMenuButton.prototype.updateLabel = function updateLabel() {
            if (this.playbackRateSupported()) {
                this.labelEl_.innerHTML = this.player().playbackRate() + 'x';
            }
        };

        return PlaybackRateMenuButton;
    })(_menuMenuButtonJs2['default']);

    PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';

    _componentJs2['default'].registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);
    exports['default'] = PlaybackRateMenuButton;
    module.exports = exports['default'];

},{"../../component.js":67,"../../menu/menu-button.js":109,"../../menu/menu.js":111,"../../utils/dom.js":142,"./playback-rate-menu-item.js":76}],76:[function(_dereq_,module,exports){
    /**
     * @file playback-rate-menu-item.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

    var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    /**
     * The specific menu item type for selecting a playback rate
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends MenuItem
     * @class PlaybackRateMenuItem
     */

    var PlaybackRateMenuItem = (function (_MenuItem) {
        _inherits(PlaybackRateMenuItem, _MenuItem);

        function PlaybackRateMenuItem(player, options) {
            _classCallCheck(this, PlaybackRateMenuItem);

            var label = options['rate'];
            var rate = parseFloat(label, 10);

            // Modify options for parent MenuItem class's init.
            options['label'] = label;
            options['selected'] = rate === 1;
            _MenuItem.call(this, player, options);

            this.label = label;
            this.rate = rate;

            this.on(player, 'ratechange', this.update);
        }

        /**
         * Handle click on menu item
         *
         * @method handleClick
         */

        PlaybackRateMenuItem.prototype.handleClick = function handleClick() {
            _MenuItem.prototype.handleClick.call(this);
            this.player().playbackRate(this.rate);
        };

        /**
         * Update playback rate with selected rate
         *
         * @method update
         */

        PlaybackRateMenuItem.prototype.update = function update() {
            this.selected(this.player().playbackRate() === this.rate);
        };

        return PlaybackRateMenuItem;
    })(_menuMenuItemJs2['default']);

    PlaybackRateMenuItem.prototype.contentElType = 'button';

    _componentJs2['default'].registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);
    exports['default'] = PlaybackRateMenuItem;
    module.exports = exports['default'];

},{"../../component.js":67,"../../menu/menu-item.js":110}],77:[function(_dereq_,module,exports){
    /**
     * @file load-progress-bar.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsDomJs = _dereq_('../../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    /**
     * Shows load progress
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Component
     * @class LoadProgressBar
     */

    var LoadProgressBar = (function (_Component) {
        _inherits(LoadProgressBar, _Component);

        function LoadProgressBar(player, options) {
            _classCallCheck(this, LoadProgressBar);

            _Component.call(this, player, options);
            this.on(player, 'progress', this.update);
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        LoadProgressBar.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-load-progress',
                innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
            });
        };

        /**
         * Update progress bar
         *
         * @method update
         */

        LoadProgressBar.prototype.update = function update() {
            var buffered = this.player_.buffered();
            var duration = this.player_.duration();
            var bufferedEnd = this.player_.bufferedEnd();
            var children = this.el_.children;

            // get the percent width of a time compared to the total end
            var percentify = function percentify(time, end) {
                var percent = time / end || 0; // no NaN
                return (percent >= 1 ? 1 : percent) * 100 + '%';
            };

            // update the width of the progress bar
            this.el_.style.width = percentify(bufferedEnd, duration);

            // add child elements to represent the individual buffered time ranges
            for (var i = 0; i < buffered.length; i++) {
                var start = buffered.start(i);
                var end = buffered.end(i);
                var part = children[i];

                if (!part) {
                    part = this.el_.appendChild(Dom.createEl());
                }

                // set the percent based on the width of the progress bar (bufferedEnd)
                part.style.left = percentify(start, bufferedEnd);
                part.style.width = percentify(end - start, bufferedEnd);
            }

            // remove unused buffered range elements
            for (var i = children.length; i > buffered.length; i--) {
                this.el_.removeChild(children[i - 1]);
            }
        };

        return LoadProgressBar;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('LoadProgressBar', LoadProgressBar);
    exports['default'] = LoadProgressBar;
    module.exports = exports['default'];

},{"../../component.js":67,"../../utils/dom.js":142}],78:[function(_dereq_,module,exports){
    /**
     * @file mouse-time-display.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsDomJs = _dereq_('../../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFnJs = _dereq_('../../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

    var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

    var _lodashCompatFunctionThrottle = _dereq_('lodash-compat/function/throttle');

    var _lodashCompatFunctionThrottle2 = _interopRequireDefault(_lodashCompatFunctionThrottle);

    /**
     * The Mouse Time Display component shows the time you will seek to
     * when hovering over the progress bar
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Component
     * @class MouseTimeDisplay
     */

    var MouseTimeDisplay = (function (_Component) {
        _inherits(MouseTimeDisplay, _Component);

        function MouseTimeDisplay(player, options) {
            var _this = this;

            _classCallCheck(this, MouseTimeDisplay);

            _Component.call(this, player, options);

            if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
                this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
            }

            if (this.keepTooltipsInside) {
                this.tooltip = Dom.createEl('div', { className: 'vjs-time-tooltip' });
                this.el().appendChild(this.tooltip);
                this.addClass('vjs-keep-tooltips-inside');
            }

            this.update(0, 0);

            player.on('ready', function () {
                _this.on(player.controlBar.progressControl.el(), 'mousemove', _lodashCompatFunctionThrottle2['default'](Fn.bind(_this, _this.handleMouseMove), 25));
            });
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        MouseTimeDisplay.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-mouse-display'
            });
        };

        MouseTimeDisplay.prototype.handleMouseMove = function handleMouseMove(event) {
            var duration = this.player_.duration();
            var newTime = this.calculateDistance(event) * duration;
            var position = event.pageX - Dom.findElPosition(this.el().parentNode).left;

            this.update(newTime, position);
        };

        MouseTimeDisplay.prototype.update = function update(newTime, position) {
            var time = _utilsFormatTimeJs2['default'](newTime, this.player_.duration());

            this.el().style.left = position + 'px';
            this.el().setAttribute('data-current-time', time);

            if (this.keepTooltipsInside) {
                var clampedPosition = this.clampPosition_(position);
                var difference = position - clampedPosition + 1;
                var tooltipWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.tooltip).width);
                var tooltipWidthHalf = tooltipWidth / 2;

                this.tooltip.innerHTML = time;
                this.tooltip.style.right = '-' + (tooltipWidthHalf - difference) + 'px';
            }
        };

        MouseTimeDisplay.prototype.calculateDistance = function calculateDistance(event) {
            return Dom.getPointerPosition(this.el().parentNode, event).x;
        };

        /**
         * This takes in a horizontal position for the bar and returns a clamped position.
         * Clamped position means that it will keep the position greater than half the width
         * of the tooltip and smaller than the player width minus half the width o the tooltip.
         * It will only clamp the position if `keepTooltipsInside` option is set.
         *
         * @param {Number} position the position the bar wants to be
         * @return {Number} newPosition the (potentially) clamped position
         * @method clampPosition_
         */

        MouseTimeDisplay.prototype.clampPosition_ = function clampPosition_(position) {
            if (!this.keepTooltipsInside) {
                return position;
            }

            var playerWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.player().el()).width);
            var tooltipWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.tooltip).width);
            var tooltipWidthHalf = tooltipWidth / 2;
            var actualPosition = position;

            if (position < tooltipWidthHalf) {
                actualPosition = Math.ceil(tooltipWidthHalf);
            } else if (position > playerWidth - tooltipWidthHalf) {
                actualPosition = Math.floor(playerWidth - tooltipWidthHalf);
            }

            return actualPosition;
        };

        return MouseTimeDisplay;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('MouseTimeDisplay', MouseTimeDisplay);
    exports['default'] = MouseTimeDisplay;
    module.exports = exports['default'];

},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/format-time.js":145,"global/window":2,"lodash-compat/function/throttle":7}],79:[function(_dereq_,module,exports){
    /**
     * @file play-progress-bar.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsFnJs = _dereq_('../../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsDomJs = _dereq_('../../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

    var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

    /**
     * Shows play progress
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Component
     * @class PlayProgressBar
     */

    var PlayProgressBar = (function (_Component) {
        _inherits(PlayProgressBar, _Component);

        function PlayProgressBar(player, options) {
            _classCallCheck(this, PlayProgressBar);

            _Component.call(this, player, options);
            this.updateDataAttr();
            this.on(player, 'timeupdate', this.updateDataAttr);
            player.ready(Fn.bind(this, this.updateDataAttr));

            if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
                this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
            }

            if (this.keepTooltipsInside) {
                this.addClass('vjs-keep-tooltips-inside');
            }
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        PlayProgressBar.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-play-progress vjs-slider-bar',
                innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
            });
        };

        PlayProgressBar.prototype.updateDataAttr = function updateDataAttr() {
            var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
            this.el_.setAttribute('data-current-time', _utilsFormatTimeJs2['default'](time, this.player_.duration()));
        };

        return PlayProgressBar;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('PlayProgressBar', PlayProgressBar);
    exports['default'] = PlayProgressBar;
    module.exports = exports['default'];

},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/format-time.js":145}],80:[function(_dereq_,module,exports){
    /**
     * @file progress-control.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _seekBarJs = _dereq_('./seek-bar.js');

    var _seekBarJs2 = _interopRequireDefault(_seekBarJs);

    var _mouseTimeDisplayJs = _dereq_('./mouse-time-display.js');

    var _mouseTimeDisplayJs2 = _interopRequireDefault(_mouseTimeDisplayJs);

    /**
     * The Progress Control component contains the seek bar, load progress,
     * and play progress
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Component
     * @class ProgressControl
     */

    var ProgressControl = (function (_Component) {
        _inherits(ProgressControl, _Component);

        function ProgressControl() {
            _classCallCheck(this, ProgressControl);

            _Component.apply(this, arguments);
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        ProgressControl.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-progress-control vjs-control'
            });
        };

        return ProgressControl;
    })(_componentJs2['default']);

    ProgressControl.prototype.options_ = {
        children: ['seekBar']
    };

    _componentJs2['default'].registerComponent('ProgressControl', ProgressControl);
    exports['default'] = ProgressControl;
    module.exports = exports['default'];

},{"../../component.js":67,"./mouse-time-display.js":78,"./seek-bar.js":81}],81:[function(_dereq_,module,exports){
    /**
     * @file seek-bar.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _sliderSliderJs = _dereq_('../../slider/slider.js');

    var _sliderSliderJs2 = _interopRequireDefault(_sliderSliderJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _loadProgressBarJs = _dereq_('./load-progress-bar.js');

    var _loadProgressBarJs2 = _interopRequireDefault(_loadProgressBarJs);

    var _playProgressBarJs = _dereq_('./play-progress-bar.js');

    var _playProgressBarJs2 = _interopRequireDefault(_playProgressBarJs);

    var _tooltipProgressBarJs = _dereq_('./tooltip-progress-bar.js');

    var _tooltipProgressBarJs2 = _interopRequireDefault(_tooltipProgressBarJs);

    var _utilsFnJs = _dereq_('../../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

    var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

    var _objectAssign = _dereq_('object.assign');

    var _objectAssign2 = _interopRequireDefault(_objectAssign);

    /**
     * Seek Bar and holder for the progress bars
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Slider
     * @class SeekBar
     */

    var SeekBar = (function (_Slider) {
        _inherits(SeekBar, _Slider);

        function SeekBar(player, options) {
            _classCallCheck(this, SeekBar);

            _Slider.call(this, player, options);
            this.on(player, 'timeupdate', this.updateProgress);
            this.on(player, 'ended', this.updateProgress);
            player.ready(Fn.bind(this, this.updateProgress));

            if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
                this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
            }

            if (this.keepTooltipsInside) {
                this.tooltipProgressBar = this.addChild('TooltipProgressBar');
            }
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        SeekBar.prototype.createEl = function createEl() {
            return _Slider.prototype.createEl.call(this, 'div', {
                className: 'vjs-progress-holder'
            }, {
                'aria-label': 'progress bar'
            });
        };

        /**
         * Update ARIA accessibility attributes
         *
         * @method updateARIAAttributes
         */

        SeekBar.prototype.updateProgress = function updateProgress() {
            this.updateAriaAttributes(this.el_);

            if (this.keepTooltipsInside) {
                this.updateAriaAttributes(this.tooltipProgressBar.el_);
                this.tooltipProgressBar.el_.style.width = this.bar.el_.style.width;

                var playerWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.player().el()).width);
                var tooltipWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.tooltipProgressBar.tooltip).width);
                var tooltipStyle = this.tooltipProgressBar.el().style;
                tooltipStyle.maxWidth = Math.floor(playerWidth - tooltipWidth / 2) + 'px';
                tooltipStyle.minWidth = Math.ceil(tooltipWidth / 2) + 'px';
                tooltipStyle.right = '-' + tooltipWidth / 2 + 'px';
            }
        };

        SeekBar.prototype.updateAriaAttributes = function updateAriaAttributes(el) {
            // Allows for smooth scrubbing, when player can't keep up.
            var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
            el.setAttribute('aria-valuenow', (this.getPercent() * 100).toFixed(2)); // machine readable value of progress bar (percentage complete)
            el.setAttribute('aria-valuetext', _utilsFormatTimeJs2['default'](time, this.player_.duration())); // human readable value of progress bar (time complete)
        };

        /**
         * Get percentage of video played
         *
         * @return {Number} Percentage played
         * @method getPercent
         */

        SeekBar.prototype.getPercent = function getPercent() {
            var percent = this.player_.currentTime() / this.player_.duration();
            return percent >= 1 ? 1 : percent;
        };

        /**
         * Handle mouse down on seek bar
         *
         * @method handleMouseDown
         */

        SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
            _Slider.prototype.handleMouseDown.call(this, event);

            this.player_.scrubbing(true);

            this.videoWasPlaying = !this.player_.paused();
            this.player_.pause();
        };

        /**
         * Handle mouse move on seek bar
         *
         * @method handleMouseMove
         */

        SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
            var newTime = this.calculateDistance(event) * this.player_.duration();

            // Don't let video end while scrubbing.
            if (newTime === this.player_.duration()) {
                newTime = newTime - 0.1;
            }

            // Set new time (tell player to seek to new time)
            this.player_.currentTime(newTime);
        };

        /**
         * Handle mouse up on seek bar
         *
         * @method handleMouseUp
         */

        SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
            _Slider.prototype.handleMouseUp.call(this, event);

            this.player_.scrubbing(false);
            if (this.videoWasPlaying) {
                this.player_.play();
            }
        };

        /**
         * Move more quickly fast forward for keyboard-only users
         *
         * @method stepForward
         */

        SeekBar.prototype.stepForward = function stepForward() {
            this.player_.currentTime(this.player_.currentTime() + 5); // more quickly fast forward for keyboard-only users
        };

        /**
         * Move more quickly rewind for keyboard-only users
         *
         * @method stepBack
         */

        SeekBar.prototype.stepBack = function stepBack() {
            this.player_.currentTime(this.player_.currentTime() - 5); // more quickly rewind for keyboard-only users
        };

        return SeekBar;
    })(_sliderSliderJs2['default']);

    SeekBar.prototype.options_ = {
        children: ['loadProgressBar', 'mouseTimeDisplay', 'playProgressBar'],
        'barName': 'playProgressBar'
    };

    SeekBar.prototype.playerEvent = 'timeupdate';

    _componentJs2['default'].registerComponent('SeekBar', SeekBar);
    exports['default'] = SeekBar;
    module.exports = exports['default'];

},{"../../component.js":67,"../../slider/slider.js":119,"../../utils/fn.js":144,"../../utils/format-time.js":145,"./load-progress-bar.js":77,"./play-progress-bar.js":79,"./tooltip-progress-bar.js":82,"global/window":2,"object.assign":45}],82:[function(_dereq_,module,exports){
    /**
     * @file play-progress-bar.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsFnJs = _dereq_('../../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsDomJs = _dereq_('../../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

    var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

    /**
     * Shows play progress
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Component
     * @class PlayProgressBar
     */

    var TooltipProgressBar = (function (_Component) {
        _inherits(TooltipProgressBar, _Component);

        function TooltipProgressBar(player, options) {
            _classCallCheck(this, TooltipProgressBar);

            _Component.call(this, player, options);
            this.updateDataAttr();
            this.on(player, 'timeupdate', this.updateDataAttr);
            player.ready(Fn.bind(this, this.updateDataAttr));
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        TooltipProgressBar.prototype.createEl = function createEl() {
            var el = _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-tooltip-progress-bar vjs-slider-bar',
                innerHTML: '<div class="vjs-time-tooltip"></div>\n        <span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
            });

            this.tooltip = el.querySelector('.vjs-time-tooltip');

            return el;
        };

        TooltipProgressBar.prototype.updateDataAttr = function updateDataAttr() {
            var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
            var formattedTime = _utilsFormatTimeJs2['default'](time, this.player_.duration());
            this.el_.setAttribute('data-current-time', formattedTime);
            this.tooltip.innerHTML = formattedTime;
        };

        return TooltipProgressBar;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('TooltipProgressBar', TooltipProgressBar);
    exports['default'] = TooltipProgressBar;
    module.exports = exports['default'];

},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/format-time.js":145}],83:[function(_dereq_,module,exports){
    /**
     * @file custom-control-spacer.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _spacerJs = _dereq_('./spacer.js');

    var _spacerJs2 = _interopRequireDefault(_spacerJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    /**
     * Spacer specifically meant to be used as an insertion point for new plugins, etc.
     *
     * @extends Spacer
     * @class CustomControlSpacer
     */

    var CustomControlSpacer = (function (_Spacer) {
        _inherits(CustomControlSpacer, _Spacer);

        function CustomControlSpacer() {
            _classCallCheck(this, CustomControlSpacer);

            _Spacer.apply(this, arguments);
        }

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);
        };

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        CustomControlSpacer.prototype.createEl = function createEl() {
            var el = _Spacer.prototype.createEl.call(this, {
                className: this.buildCSSClass()
            });

            // No-flex/table-cell mode requires there be some content
            // in the cell to fill the remaining space of the table.
            el.innerHTML = '&nbsp;';
            return el;
        };

        return CustomControlSpacer;
    })(_spacerJs2['default']);

    _componentJs2['default'].registerComponent('CustomControlSpacer', CustomControlSpacer);
    exports['default'] = CustomControlSpacer;
    module.exports = exports['default'];

},{"../../component.js":67,"./spacer.js":84}],84:[function(_dereq_,module,exports){
    /**
     * @file spacer.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    /**
     * Just an empty spacer element that can be used as an append point for plugins, etc.
     * Also can be used to create space between elements when necessary.
     *
     * @extends Component
     * @class Spacer
     */

    var Spacer = (function (_Component) {
        _inherits(Spacer, _Component);

        function Spacer() {
            _classCallCheck(this, Spacer);

            _Component.apply(this, arguments);
        }

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        Spacer.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);
        };

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        Spacer.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: this.buildCSSClass()
            });
        };

        return Spacer;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('Spacer', Spacer);

    exports['default'] = Spacer;
    module.exports = exports['default'];

},{"../../component.js":67}],85:[function(_dereq_,module,exports){
    /**
     * @file caption-settings-menu-item.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

    var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    /**
     * The menu item for caption track settings menu
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends TextTrackMenuItem
     * @class CaptionSettingsMenuItem
     */

    var CaptionSettingsMenuItem = (function (_TextTrackMenuItem) {
        _inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);

        function CaptionSettingsMenuItem(player, options) {
            _classCallCheck(this, CaptionSettingsMenuItem);

            options['track'] = {
                'kind': options['kind'],
                'player': player,
                'label': options['kind'] + ' settings',
                'selectable': false,
                'default': false,
                mode: 'disabled'
            };

            // CaptionSettingsMenuItem has no concept of 'selected'
            options['selectable'] = false;

            _TextTrackMenuItem.call(this, player, options);
            this.addClass('vjs-texttrack-settings');
            this.controlText(', opens ' + options['kind'] + ' settings dialog');
        }

        /**
         * Handle click on menu item
         *
         * @method handleClick
         */

        CaptionSettingsMenuItem.prototype.handleClick = function handleClick() {
            this.player().getChild('textTrackSettings').show();
            this.player().getChild('textTrackSettings').el_.focus();
        };

        return CaptionSettingsMenuItem;
    })(_textTrackMenuItemJs2['default']);

    _componentJs2['default'].registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);
    exports['default'] = CaptionSettingsMenuItem;
    module.exports = exports['default'];

},{"../../component.js":67,"./text-track-menu-item.js":93}],86:[function(_dereq_,module,exports){
    /**
     * @file captions-button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _textTrackButtonJs = _dereq_('./text-track-button.js');

    var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _captionSettingsMenuItemJs = _dereq_('./caption-settings-menu-item.js');

    var _captionSettingsMenuItemJs2 = _interopRequireDefault(_captionSettingsMenuItemJs);

    /**
     * The button component for toggling and selecting captions
     *
     * @param {Object} player  Player object
     * @param {Object=} options Object of option names and values
     * @param {Function=} ready    Ready callback function
     * @extends TextTrackButton
     * @class CaptionsButton
     */

    var CaptionsButton = (function (_TextTrackButton) {
        _inherits(CaptionsButton, _TextTrackButton);

        function CaptionsButton(player, options, ready) {
            _classCallCheck(this, CaptionsButton);

            _TextTrackButton.call(this, player, options, ready);
            this.el_.setAttribute('aria-label', 'Captions Menu');
        }

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
        };

        /**
         * Update caption menu items
         *
         * @method update
         */

        CaptionsButton.prototype.update = function update() {
            var threshold = 2;
            _TextTrackButton.prototype.update.call(this);

            // if native, then threshold is 1 because no settings button
            if (this.player().tech_ && this.player().tech_['featuresNativeTextTracks']) {
                threshold = 1;
            }

            if (this.items && this.items.length > threshold) {
                this.show();
            } else {
                this.hide();
            }
        };

        /**
         * Create caption menu items
         *
         * @return {Array} Array of menu items
         * @method createItems
         */

        CaptionsButton.prototype.createItems = function createItems() {
            var items = [];

            if (!(this.player().tech_ && this.player().tech_['featuresNativeTextTracks'])) {
                items.push(new _captionSettingsMenuItemJs2['default'](this.player_, { 'kind': this.kind_ }));
            }

            return _TextTrackButton.prototype.createItems.call(this, items);
        };

        return CaptionsButton;
    })(_textTrackButtonJs2['default']);

    CaptionsButton.prototype.kind_ = 'captions';
    CaptionsButton.prototype.controlText_ = 'Captions';

    _componentJs2['default'].registerComponent('CaptionsButton', CaptionsButton);
    exports['default'] = CaptionsButton;
    module.exports = exports['default'];

},{"../../component.js":67,"./caption-settings-menu-item.js":85,"./text-track-button.js":92}],87:[function(_dereq_,module,exports){
    /**
     * @file chapters-button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _textTrackButtonJs = _dereq_('./text-track-button.js');

    var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

    var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

    var _chaptersTrackMenuItemJs = _dereq_('./chapters-track-menu-item.js');

    var _chaptersTrackMenuItemJs2 = _interopRequireDefault(_chaptersTrackMenuItemJs);

    var _menuMenuJs = _dereq_('../../menu/menu.js');

    var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

    var _utilsDomJs = _dereq_('../../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFnJs = _dereq_('../../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsToTitleCaseJs = _dereq_('../../utils/to-title-case.js');

    var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    /**
     * The button component for toggling and selecting chapters
     * Chapters act much differently than other text tracks
     * Cues are navigation vs. other tracks of alternative languages
     *
     * @param {Object} player  Player object
     * @param {Object=} options Object of option names and values
     * @param {Function=} ready    Ready callback function
     * @extends TextTrackButton
     * @class ChaptersButton
     */

    var ChaptersButton = (function (_TextTrackButton) {
        _inherits(ChaptersButton, _TextTrackButton);

        function ChaptersButton(player, options, ready) {
            _classCallCheck(this, ChaptersButton);

            _TextTrackButton.call(this, player, options, ready);
            this.el_.setAttribute('aria-label', 'Chapters Menu');
        }

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
        };

        /**
         * Create a menu item for each text track
         *
         * @return {Array} Array of menu items
         * @method createItems
         */

        ChaptersButton.prototype.createItems = function createItems() {
            var items = [];

            var tracks = this.player_.textTracks();

            if (!tracks) {
                return items;
            }

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];
                if (track['kind'] === this.kind_) {
                    items.push(new _textTrackMenuItemJs2['default'](this.player_, {
                        'track': track
                    }));
                }
            }

            return items;
        };

        /**
         * Create menu from chapter buttons
         *
         * @return {Menu} Menu of chapter buttons
         * @method createMenu
         */

        ChaptersButton.prototype.createMenu = function createMenu() {
            var _this = this;

            var tracks = this.player_.textTracks() || [];
            var chaptersTrack = undefined;
            var items = this.items || [];

            for (var i = tracks.length - 1; i >= 0; i--) {

                // We will always choose the last track as our chaptersTrack
                var track = tracks[i];

                if (track['kind'] === this.kind_) {
                    chaptersTrack = track;

                    break;
                }
            }

            var menu = this.menu;
            if (menu === undefined) {
                menu = new _menuMenuJs2['default'](this.player_);
                var title = Dom.createEl('li', {
                    className: 'vjs-menu-title',
                    innerHTML: _utilsToTitleCaseJs2['default'](this.kind_),
                    tabIndex: -1
                });
                menu.children_.unshift(title);
                Dom.insertElFirst(title, menu.contentEl());
            } else {
                // We will empty out the menu children each time because we want a
                // fresh new menu child list each time
                items.forEach(function (item) {
                    return menu.removeChild(item);
                });
                // Empty out the ChaptersButton menu items because we no longer need them
                items = [];
            }

            if (chaptersTrack && chaptersTrack.cues == null) {
                chaptersTrack['mode'] = 'hidden';

                var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(chaptersTrack);

                if (remoteTextTrackEl) {
                    remoteTextTrackEl.addEventListener('load', function (event) {
                        return _this.update();
                    });
                }
            }

            if (chaptersTrack && chaptersTrack.cues && chaptersTrack.cues.length > 0) {
                var cues = chaptersTrack['cues'],
                    cue = undefined;

                for (var i = 0, l = cues.length; i < l; i++) {
                    cue = cues[i];

                    var mi = new _chaptersTrackMenuItemJs2['default'](this.player_, {
                        'track': chaptersTrack,
                        'cue': cue
                    });

                    items.push(mi);

                    menu.addChild(mi);
                }
            }

            if (items.length > 0) {
                this.show();
            }
            // Assigning the value of items back to this.items for next iteration
            this.items = items;
            return menu;
        };

        return ChaptersButton;
    })(_textTrackButtonJs2['default']);

    ChaptersButton.prototype.kind_ = 'chapters';
    ChaptersButton.prototype.controlText_ = 'Chapters';

    _componentJs2['default'].registerComponent('ChaptersButton', ChaptersButton);
    exports['default'] = ChaptersButton;
    module.exports = exports['default'];

},{"../../component.js":67,"../../menu/menu.js":111,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/to-title-case.js":151,"./chapters-track-menu-item.js":88,"./text-track-button.js":92,"./text-track-menu-item.js":93,"global/window":2}],88:[function(_dereq_,module,exports){
    /**
     * @file chapters-track-menu-item.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

    var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsFnJs = _dereq_('../../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    /**
     * The chapter track menu item
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends MenuItem
     * @class ChaptersTrackMenuItem
     */

    var ChaptersTrackMenuItem = (function (_MenuItem) {
        _inherits(ChaptersTrackMenuItem, _MenuItem);

        function ChaptersTrackMenuItem(player, options) {
            _classCallCheck(this, ChaptersTrackMenuItem);

            var track = options['track'];
            var cue = options['cue'];
            var currentTime = player.currentTime();

            // Modify options for parent MenuItem class's init.
            options['label'] = cue.text;
            options['selected'] = cue['startTime'] <= currentTime && currentTime < cue['endTime'];
            _MenuItem.call(this, player, options);

            this.track = track;
            this.cue = cue;
            track.addEventListener('cuechange', Fn.bind(this, this.update));
        }

        /**
         * Handle click on menu item
         *
         * @method handleClick
         */

        ChaptersTrackMenuItem.prototype.handleClick = function handleClick() {
            _MenuItem.prototype.handleClick.call(this);
            this.player_.currentTime(this.cue.startTime);
            this.update(this.cue.startTime);
        };

        /**
         * Update chapter menu item
         *
         * @method update
         */

        ChaptersTrackMenuItem.prototype.update = function update() {
            var cue = this.cue;
            var currentTime = this.player_.currentTime();

            // vjs.log(currentTime, cue.startTime);
            this.selected(cue['startTime'] <= currentTime && currentTime < cue['endTime']);
        };

        return ChaptersTrackMenuItem;
    })(_menuMenuItemJs2['default']);

    _componentJs2['default'].registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);
    exports['default'] = ChaptersTrackMenuItem;
    module.exports = exports['default'];

},{"../../component.js":67,"../../menu/menu-item.js":110,"../../utils/fn.js":144}],89:[function(_dereq_,module,exports){
    /**
     * @file descriptions-button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _textTrackButtonJs = _dereq_('./text-track-button.js');

    var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsFnJs = _dereq_('../../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    /**
     * The button component for toggling and selecting descriptions
     *
     * @param {Object} player  Player object
     * @param {Object=} options Object of option names and values
     * @param {Function=} ready    Ready callback function
     * @extends TextTrackButton
     * @class DescriptionsButton
     */

    var DescriptionsButton = (function (_TextTrackButton) {
        _inherits(DescriptionsButton, _TextTrackButton);

        function DescriptionsButton(player, options, ready) {
            var _this = this;

            _classCallCheck(this, DescriptionsButton);

            _TextTrackButton.call(this, player, options, ready);
            this.el_.setAttribute('aria-label', 'Descriptions Menu');

            var tracks = player.textTracks();

            if (tracks) {
                (function () {
                    var changeHandler = Fn.bind(_this, _this.handleTracksChange);

                    tracks.addEventListener('change', changeHandler);
                    _this.on('dispose', function () {
                        tracks.removeEventListener('change', changeHandler);
                    });
                })();
            }
        }

        /**
         * Handle text track change
         *
         * @method handleTracksChange
         */

        DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {
            var tracks = this.player().textTracks();
            var disabled = false;

            // Check whether a track of a different kind is showing
            for (var i = 0, l = tracks.length; i < l; i++) {
                var track = tracks[i];
                if (track['kind'] !== this.kind_ && track['mode'] === 'showing') {
                    disabled = true;
                    break;
                }
            }

            // If another track is showing, disable this menu button
            if (disabled) {
                this.disable();
            } else {
                this.enable();
            }
        };

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
        };

        return DescriptionsButton;
    })(_textTrackButtonJs2['default']);

    DescriptionsButton.prototype.kind_ = 'descriptions';
    DescriptionsButton.prototype.controlText_ = 'Descriptions';

    _componentJs2['default'].registerComponent('DescriptionsButton', DescriptionsButton);
    exports['default'] = DescriptionsButton;
    module.exports = exports['default'];

},{"../../component.js":67,"../../utils/fn.js":144,"./text-track-button.js":92}],90:[function(_dereq_,module,exports){
    /**
     * @file off-text-track-menu-item.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

    var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    /**
     * A special menu item for turning of a specific type of text track
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends TextTrackMenuItem
     * @class OffTextTrackMenuItem
     */

    var OffTextTrackMenuItem = (function (_TextTrackMenuItem) {
        _inherits(OffTextTrackMenuItem, _TextTrackMenuItem);

        function OffTextTrackMenuItem(player, options) {
            _classCallCheck(this, OffTextTrackMenuItem);

            // Create pseudo track info
            // Requires options['kind']
            options['track'] = {
                'kind': options['kind'],
                'player': player,
                'label': options['kind'] + ' off',
                'default': false,
                'mode': 'disabled'
            };

            // MenuItem is selectable
            options['selectable'] = true;

            _TextTrackMenuItem.call(this, player, options);
            this.selected(true);
        }

        /**
         * Handle text track change
         *
         * @param {Object} event Event object
         * @method handleTracksChange
         */

        OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
            var tracks = this.player().textTracks();
            var selected = true;

            for (var i = 0, l = tracks.length; i < l; i++) {
                var track = tracks[i];
                if (track['kind'] === this.track['kind'] && track['mode'] === 'showing') {
                    selected = false;
                    break;
                }
            }

            this.selected(selected);
        };

        return OffTextTrackMenuItem;
    })(_textTrackMenuItemJs2['default']);

    _componentJs2['default'].registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);
    exports['default'] = OffTextTrackMenuItem;
    module.exports = exports['default'];

},{"../../component.js":67,"./text-track-menu-item.js":93}],91:[function(_dereq_,module,exports){
    /**
     * @file subtitles-button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _textTrackButtonJs = _dereq_('./text-track-button.js');

    var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    /**
     * The button component for toggling and selecting subtitles
     *
     * @param {Object} player  Player object
     * @param {Object=} options Object of option names and values
     * @param {Function=} ready    Ready callback function
     * @extends TextTrackButton
     * @class SubtitlesButton
     */

    var SubtitlesButton = (function (_TextTrackButton) {
        _inherits(SubtitlesButton, _TextTrackButton);

        function SubtitlesButton(player, options, ready) {
            _classCallCheck(this, SubtitlesButton);

            _TextTrackButton.call(this, player, options, ready);
            this.el_.setAttribute('aria-label', 'Subtitles Menu');
        }

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
        };

        return SubtitlesButton;
    })(_textTrackButtonJs2['default']);

    SubtitlesButton.prototype.kind_ = 'subtitles';
    SubtitlesButton.prototype.controlText_ = 'Subtitles';

    _componentJs2['default'].registerComponent('SubtitlesButton', SubtitlesButton);
    exports['default'] = SubtitlesButton;
    module.exports = exports['default'];

},{"../../component.js":67,"./text-track-button.js":92}],92:[function(_dereq_,module,exports){
    /**
     * @file text-track-button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _trackButtonJs = _dereq_('../track-button.js');

    var _trackButtonJs2 = _interopRequireDefault(_trackButtonJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsFnJs = _dereq_('../../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

    var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

    var _offTextTrackMenuItemJs = _dereq_('./off-text-track-menu-item.js');

    var _offTextTrackMenuItemJs2 = _interopRequireDefault(_offTextTrackMenuItemJs);

    /**
     * The base class for buttons that toggle specific text track types (e.g. subtitles)
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends MenuButton
     * @class TextTrackButton
     */

    var TextTrackButton = (function (_TrackButton) {
        _inherits(TextTrackButton, _TrackButton);

        function TextTrackButton(player) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            _classCallCheck(this, TextTrackButton);

            options.tracks = player.textTracks();

            _TrackButton.call(this, player, options);
        }

        /**
         * Create a menu item for each text track
         *
         * @return {Array} Array of menu items
         * @method createItems
         */

        TextTrackButton.prototype.createItems = function createItems() {
            var items = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

            // Add an OFF menu item to turn all tracks off
            items.push(new _offTextTrackMenuItemJs2['default'](this.player_, { 'kind': this.kind_ }));

            var tracks = this.player_.textTracks();

            if (!tracks) {
                return items;
            }

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];

                // only add tracks that are of the appropriate kind and have a label
                if (track['kind'] === this.kind_) {
                    items.push(new _textTrackMenuItemJs2['default'](this.player_, {
                        // MenuItem is selectable
                        'selectable': true,
                        'track': track
                    }));
                }
            }

            return items;
        };

        return TextTrackButton;
    })(_trackButtonJs2['default']);

    _componentJs2['default'].registerComponent('TextTrackButton', TextTrackButton);
    exports['default'] = TextTrackButton;
    module.exports = exports['default'];

},{"../../component.js":67,"../../utils/fn.js":144,"../track-button.js":98,"./off-text-track-menu-item.js":90,"./text-track-menu-item.js":93}],93:[function(_dereq_,module,exports){
    /**
     * @file text-track-menu-item.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

    var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsFnJs = _dereq_('../../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    /**
     * The specific menu item type for selecting a language within a text track kind
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends MenuItem
     * @class TextTrackMenuItem
     */

    var TextTrackMenuItem = (function (_MenuItem) {
        _inherits(TextTrackMenuItem, _MenuItem);

        function TextTrackMenuItem(player, options) {
            var _this = this;

            _classCallCheck(this, TextTrackMenuItem);

            var track = options['track'];
            var tracks = player.textTracks();

            // Modify options for parent MenuItem class's init.
            options['label'] = track['label'] || track['language'] || 'Unknown';
            options['selected'] = track['default'] || track['mode'] === 'showing';

            _MenuItem.call(this, player, options);

            this.track = track;

            if (tracks) {
                (function () {
                    var changeHandler = Fn.bind(_this, _this.handleTracksChange);

                    tracks.addEventListener('change', changeHandler);
                    _this.on('dispose', function () {
                        tracks.removeEventListener('change', changeHandler);
                    });
                })();
            }

            // iOS7 doesn't dispatch change events to TextTrackLists when an
            // associated track's mode changes. Without something like
            // Object.observe() (also not present on iOS7), it's not
            // possible to detect changes to the mode attribute and polyfill
            // the change event. As a poor substitute, we manually dispatch
            // change events whenever the controls modify the mode.
            if (tracks && tracks.onchange === undefined) {
                (function () {
                    var event = undefined;

                    _this.on(['tap', 'click'], function () {
                        if (typeof _globalWindow2['default'].Event !== 'object') {
                            // Android 2.3 throws an Illegal Constructor error for window.Event
                            try {
                                event = new _globalWindow2['default'].Event('change');
                            } catch (err) {}
                        }

                        if (!event) {
                            event = _globalDocument2['default'].createEvent('Event');
                            event.initEvent('change', true, true);
                        }

                        tracks.dispatchEvent(event);
                    });
                })();
            }
        }

        /**
         * Handle click on text track
         *
         * @method handleClick
         */

        TextTrackMenuItem.prototype.handleClick = function handleClick(event) {
            var kind = this.track['kind'];
            var tracks = this.player_.textTracks();

            _MenuItem.prototype.handleClick.call(this, event);

            if (!tracks) return;

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];

                if (track['kind'] !== kind) {
                    continue;
                }

                if (track === this.track) {
                    track['mode'] = 'showing';
                } else {
                    track['mode'] = 'disabled';
                }
            }
        };

        /**
         * Handle text track change
         *
         * @method handleTracksChange
         */

        TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
            this.selected(this.track['mode'] === 'showing');
        };

        return TextTrackMenuItem;
    })(_menuMenuItemJs2['default']);

    _componentJs2['default'].registerComponent('TextTrackMenuItem', TextTrackMenuItem);
    exports['default'] = TextTrackMenuItem;
    module.exports = exports['default'];

},{"../../component.js":67,"../../menu/menu-item.js":110,"../../utils/fn.js":144,"global/document":1,"global/window":2}],94:[function(_dereq_,module,exports){
    /**
     * @file current-time-display.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsDomJs = _dereq_('../../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

    var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

    /**
     * Displays the current time
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Component
     * @class CurrentTimeDisplay
     */

    var CurrentTimeDisplay = (function (_Component) {
        _inherits(CurrentTimeDisplay, _Component);

        function CurrentTimeDisplay(player, options) {
            _classCallCheck(this, CurrentTimeDisplay);

            _Component.call(this, player, options);

            this.on(player, 'timeupdate', this.updateContent);
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        CurrentTimeDisplay.prototype.createEl = function createEl() {
            var el = _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-current-time vjs-time-control vjs-control'
            });

            this.contentEl_ = Dom.createEl('div', {
                className: 'vjs-current-time-display',
                // label the current time for screen reader users
                innerHTML: '<span class="vjs-control-text">Current Time </span>' + '0:00'
            }, {
                // tell screen readers not to automatically read the time as it changes
                'aria-live': 'off'
            });

            el.appendChild(this.contentEl_);
            return el;
        };

        /**
         * Update current time display
         *
         * @method updateContent
         */

        CurrentTimeDisplay.prototype.updateContent = function updateContent() {
            // Allows for smooth scrubbing, when player can't keep up.
            var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
            var localizedText = this.localize('Current Time');
            var formattedTime = _utilsFormatTimeJs2['default'](time, this.player_.duration());
            if (formattedTime !== this.formattedTime_) {
                this.formattedTime_ = formattedTime;
                this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime;
            }
        };

        return CurrentTimeDisplay;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);
    exports['default'] = CurrentTimeDisplay;
    module.exports = exports['default'];

},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/format-time.js":145}],95:[function(_dereq_,module,exports){
    /**
     * @file duration-display.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsDomJs = _dereq_('../../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

    var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

    /**
     * Displays the duration
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Component
     * @class DurationDisplay
     */

    var DurationDisplay = (function (_Component) {
        _inherits(DurationDisplay, _Component);

        function DurationDisplay(player, options) {
            _classCallCheck(this, DurationDisplay);

            _Component.call(this, player, options);

            this.on(player, 'durationchange', this.updateContent);
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        DurationDisplay.prototype.createEl = function createEl() {
            var el = _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-duration vjs-time-control vjs-control'
            });

            this.contentEl_ = Dom.createEl('div', {
                className: 'vjs-duration-display',
                // label the duration time for screen reader users
                innerHTML: '<span class="vjs-control-text">' + this.localize('Duration Time') + '</span> 0:00'
            }, {
                // tell screen readers not to automatically read the time as it changes
                'aria-live': 'off'
            });

            el.appendChild(this.contentEl_);
            return el;
        };

        /**
         * Update duration time display
         *
         * @method updateContent
         */

        DurationDisplay.prototype.updateContent = function updateContent() {
            var duration = this.player_.duration();
            if (duration && this.duration_ !== duration) {
                this.duration_ = duration;
                var localizedText = this.localize('Duration Time');
                var formattedTime = _utilsFormatTimeJs2['default'](duration);
                this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime; // label the duration time for screen reader users
            }
        };

        return DurationDisplay;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('DurationDisplay', DurationDisplay);
    exports['default'] = DurationDisplay;
    module.exports = exports['default'];

},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/format-time.js":145}],96:[function(_dereq_,module,exports){
    /**
     * @file remaining-time-display.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsDomJs = _dereq_('../../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

    var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

    /**
     * Displays the time left in the video
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Component
     * @class RemainingTimeDisplay
     */

    var RemainingTimeDisplay = (function (_Component) {
        _inherits(RemainingTimeDisplay, _Component);

        function RemainingTimeDisplay(player, options) {
            _classCallCheck(this, RemainingTimeDisplay);

            _Component.call(this, player, options);

            this.on(player, 'timeupdate', this.updateContent);
            this.on(player, 'durationchange', this.updateContent);
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        RemainingTimeDisplay.prototype.createEl = function createEl() {
            var el = _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-remaining-time vjs-time-control vjs-control'
            });

            this.contentEl_ = Dom.createEl('div', {
                className: 'vjs-remaining-time-display',
                // label the remaining time for screen reader users
                innerHTML: '<span class="vjs-control-text">' + this.localize('Remaining Time') + '</span> -0:00'
            }, {
                // tell screen readers not to automatically read the time as it changes
                'aria-live': 'off'
            });

            el.appendChild(this.contentEl_);
            return el;
        };

        /**
         * Update remaining time display
         *
         * @method updateContent
         */

        RemainingTimeDisplay.prototype.updateContent = function updateContent() {
            if (this.player_.duration()) {
                var localizedText = this.localize('Remaining Time');
                var formattedTime = _utilsFormatTimeJs2['default'](this.player_.remainingTime());
                if (formattedTime !== this.formattedTime_) {
                    this.formattedTime_ = formattedTime;
                    this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> -' + formattedTime;
                }
            }

            // Allows for smooth scrubbing, when player can't keep up.
            // var time = (this.player_.scrubbing()) ? this.player_.getCache().currentTime : this.player_.currentTime();
            // this.contentEl_.innerHTML = vjs.formatTime(time, this.player_.duration());
        };

        return RemainingTimeDisplay;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);
    exports['default'] = RemainingTimeDisplay;
    module.exports = exports['default'];

},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/format-time.js":145}],97:[function(_dereq_,module,exports){
    /**
     * @file time-divider.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    /**
     * The separator between the current time and duration.
     * Can be hidden if it's not needed in the design.
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Component
     * @class TimeDivider
     */

    var TimeDivider = (function (_Component) {
        _inherits(TimeDivider, _Component);

        function TimeDivider() {
            _classCallCheck(this, TimeDivider);

            _Component.apply(this, arguments);
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        TimeDivider.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-time-control vjs-time-divider',
                innerHTML: '<div><span>/</span></div>'
            });
        };

        return TimeDivider;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('TimeDivider', TimeDivider);
    exports['default'] = TimeDivider;
    module.exports = exports['default'];

},{"../../component.js":67}],98:[function(_dereq_,module,exports){
    /**
     * @file track-button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _menuMenuButtonJs = _dereq_('../menu/menu-button.js');

    var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

    var _componentJs = _dereq_('../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    /**
     * The base class for buttons that toggle specific text track types (e.g. subtitles)
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends MenuButton
     * @class TrackButton
     */

    var TrackButton = (function (_MenuButton) {
        _inherits(TrackButton, _MenuButton);

        function TrackButton(player, options) {
            _classCallCheck(this, TrackButton);

            var tracks = options.tracks;

            _MenuButton.call(this, player, options);

            if (this.items.length <= 1) {
                this.hide();
            }

            if (!tracks) {
                return;
            }

            var updateHandler = Fn.bind(this, this.update);
            tracks.addEventListener('removetrack', updateHandler);
            tracks.addEventListener('addtrack', updateHandler);

            this.player_.on('dispose', function () {
                tracks.removeEventListener('removetrack', updateHandler);
                tracks.removeEventListener('addtrack', updateHandler);
            });
        }

        return TrackButton;
    })(_menuMenuButtonJs2['default']);

    _componentJs2['default'].registerComponent('TrackButton', TrackButton);
    exports['default'] = TrackButton;
    module.exports = exports['default'];

},{"../component.js":67,"../menu/menu-button.js":109,"../utils/fn.js":144}],99:[function(_dereq_,module,exports){
    /**
     * @file volume-bar.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _sliderSliderJs = _dereq_('../../slider/slider.js');

    var _sliderSliderJs2 = _interopRequireDefault(_sliderSliderJs);

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsFnJs = _dereq_('../../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

// Required children

    var _volumeLevelJs = _dereq_('./volume-level.js');

    var _volumeLevelJs2 = _interopRequireDefault(_volumeLevelJs);

    /**
     * The bar that contains the volume level and can be clicked on to adjust the level
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Slider
     * @class VolumeBar
     */

    var VolumeBar = (function (_Slider) {
        _inherits(VolumeBar, _Slider);

        function VolumeBar(player, options) {
            _classCallCheck(this, VolumeBar);

            _Slider.call(this, player, options);
            this.on(player, 'volumechange', this.updateARIAAttributes);
            player.ready(Fn.bind(this, this.updateARIAAttributes));
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        VolumeBar.prototype.createEl = function createEl() {
            return _Slider.prototype.createEl.call(this, 'div', {
                className: 'vjs-volume-bar vjs-slider-bar'
            }, {
                'aria-label': 'volume level'
            });
        };

        /**
         * Handle mouse move on volume bar
         *
         * @method handleMouseMove
         */

        VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {
            this.checkMuted();
            this.player_.volume(this.calculateDistance(event));
        };

        VolumeBar.prototype.checkMuted = function checkMuted() {
            if (this.player_.muted()) {
                this.player_.muted(false);
            }
        };

        /**
         * Get percent of volume level
         *
         * @retun {Number} Volume level percent
         * @method getPercent
         */

        VolumeBar.prototype.getPercent = function getPercent() {
            if (this.player_.muted()) {
                return 0;
            } else {
                return this.player_.volume();
            }
        };

        /**
         * Increase volume level for keyboard users
         *
         * @method stepForward
         */

        VolumeBar.prototype.stepForward = function stepForward() {
            this.checkMuted();
            this.player_.volume(this.player_.volume() + 0.1);
        };

        /**
         * Decrease volume level for keyboard users
         *
         * @method stepBack
         */

        VolumeBar.prototype.stepBack = function stepBack() {
            this.checkMuted();
            this.player_.volume(this.player_.volume() - 0.1);
        };

        /**
         * Update ARIA accessibility attributes
         *
         * @method updateARIAAttributes
         */

        VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes() {
            // Current value of volume bar as a percentage
            var volume = (this.player_.volume() * 100).toFixed(2);
            this.el_.setAttribute('aria-valuenow', volume);
            this.el_.setAttribute('aria-valuetext', volume + '%');
        };

        return VolumeBar;
    })(_sliderSliderJs2['default']);

    VolumeBar.prototype.options_ = {
        children: ['volumeLevel'],
        'barName': 'volumeLevel'
    };

    VolumeBar.prototype.playerEvent = 'volumechange';

    _componentJs2['default'].registerComponent('VolumeBar', VolumeBar);
    exports['default'] = VolumeBar;
    module.exports = exports['default'];

},{"../../component.js":67,"../../slider/slider.js":119,"../../utils/fn.js":144,"./volume-level.js":101}],100:[function(_dereq_,module,exports){
    /**
     * @file volume-control.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

// Required children

    var _volumeBarJs = _dereq_('./volume-bar.js');

    var _volumeBarJs2 = _interopRequireDefault(_volumeBarJs);

    /**
     * The component for controlling the volume level
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Component
     * @class VolumeControl
     */

    var VolumeControl = (function (_Component) {
        _inherits(VolumeControl, _Component);

        function VolumeControl(player, options) {
            _classCallCheck(this, VolumeControl);

            _Component.call(this, player, options);

            // hide volume controls when they're not supported by the current tech
            if (player.tech_ && player.tech_['featuresVolumeControl'] === false) {
                this.addClass('vjs-hidden');
            }
            this.on(player, 'loadstart', function () {
                if (player.tech_['featuresVolumeControl'] === false) {
                    this.addClass('vjs-hidden');
                } else {
                    this.removeClass('vjs-hidden');
                }
            });
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        VolumeControl.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-volume-control vjs-control'
            });
        };

        return VolumeControl;
    })(_componentJs2['default']);

    VolumeControl.prototype.options_ = {
        children: ['volumeBar']
    };

    _componentJs2['default'].registerComponent('VolumeControl', VolumeControl);
    exports['default'] = VolumeControl;
    module.exports = exports['default'];

},{"../../component.js":67,"./volume-bar.js":99}],101:[function(_dereq_,module,exports){
    /**
     * @file volume-level.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    /**
     * Shows volume level
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Component
     * @class VolumeLevel
     */

    var VolumeLevel = (function (_Component) {
        _inherits(VolumeLevel, _Component);

        function VolumeLevel() {
            _classCallCheck(this, VolumeLevel);

            _Component.apply(this, arguments);
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        VolumeLevel.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-volume-level',
                innerHTML: '<span class="vjs-control-text"></span>'
            });
        };

        return VolumeLevel;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('VolumeLevel', VolumeLevel);
    exports['default'] = VolumeLevel;
    module.exports = exports['default'];

},{"../../component.js":67}],102:[function(_dereq_,module,exports){
    /**
     * @file volume-menu-button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _componentJs = _dereq_('../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _popupPopupJs = _dereq_('../popup/popup.js');

    var _popupPopupJs2 = _interopRequireDefault(_popupPopupJs);

    var _popupPopupButtonJs = _dereq_('../popup/popup-button.js');

    var _popupPopupButtonJs2 = _interopRequireDefault(_popupPopupButtonJs);

    var _muteToggleJs = _dereq_('./mute-toggle.js');

    var _muteToggleJs2 = _interopRequireDefault(_muteToggleJs);

    var _volumeControlVolumeBarJs = _dereq_('./volume-control/volume-bar.js');

    var _volumeControlVolumeBarJs2 = _interopRequireDefault(_volumeControlVolumeBarJs);

    /**
     * Button for volume popup
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends PopupButton
     * @class VolumeMenuButton
     */

    var VolumeMenuButton = (function (_PopupButton) {
        _inherits(VolumeMenuButton, _PopupButton);

        function VolumeMenuButton(player) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            _classCallCheck(this, VolumeMenuButton);

            // Default to inline
            if (options.inline === undefined) {
                options.inline = true;
            }

            // If the vertical option isn't passed at all, default to true.
            if (options.vertical === undefined) {
                // If an inline volumeMenuButton is used, we should default to using
                // a horizontal slider for obvious reasons.
                if (options.inline) {
                    options.vertical = false;
                } else {
                    options.vertical = true;
                }
            }

            // The vertical option needs to be set on the volumeBar as well,
            // since that will need to be passed along to the VolumeBar constructor
            options.volumeBar = options.volumeBar || {};
            options.volumeBar.vertical = !!options.vertical;

            _PopupButton.call(this, player, options);

            // Same listeners as MuteToggle
            this.on(player, 'volumechange', this.volumeUpdate);
            this.on(player, 'loadstart', this.volumeUpdate);

            // hide mute toggle if the current tech doesn't support volume control
            function updateVisibility() {
                if (player.tech_ && player.tech_['featuresVolumeControl'] === false) {
                    this.addClass('vjs-hidden');
                } else {
                    this.removeClass('vjs-hidden');
                }
            }

            updateVisibility.call(this);
            this.on(player, 'loadstart', updateVisibility);

            this.on(this.volumeBar, ['slideractive', 'focus'], function () {
                this.addClass('vjs-slider-active');
            });

            this.on(this.volumeBar, ['sliderinactive', 'blur'], function () {
                this.removeClass('vjs-slider-active');
            });

            this.on(this.volumeBar, ['focus'], function () {
                this.addClass('vjs-lock-showing');
            });

            this.on(this.volumeBar, ['blur'], function () {
                this.removeClass('vjs-lock-showing');
            });
        }

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        VolumeMenuButton.prototype.buildCSSClass = function buildCSSClass() {
            var orientationClass = '';
            if (!!this.options_.vertical) {
                orientationClass = 'vjs-volume-menu-button-vertical';
            } else {
                orientationClass = 'vjs-volume-menu-button-horizontal';
            }

            return 'vjs-volume-menu-button ' + _PopupButton.prototype.buildCSSClass.call(this) + ' ' + orientationClass;
        };

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {Popup} The volume popup button
         * @method createPopup
         */

        VolumeMenuButton.prototype.createPopup = function createPopup() {
            var popup = new _popupPopupJs2['default'](this.player_, {
                contentElType: 'div'
            });

            var vb = new _volumeControlVolumeBarJs2['default'](this.player_, this.options_.volumeBar);

            popup.addChild(vb);

            this.menuContent = popup;
            this.volumeBar = vb;

            this.attachVolumeBarEvents();

            return popup;
        };

        /**
         * Handle click on volume popup and calls super
         *
         * @method handleClick
         */

        VolumeMenuButton.prototype.handleClick = function handleClick() {
            _muteToggleJs2['default'].prototype.handleClick.call(this);
            _PopupButton.prototype.handleClick.call(this);
        };

        VolumeMenuButton.prototype.attachVolumeBarEvents = function attachVolumeBarEvents() {
            this.menuContent.on(['mousedown', 'touchdown'], Fn.bind(this, this.handleMouseDown));
        };

        VolumeMenuButton.prototype.handleMouseDown = function handleMouseDown(event) {
            this.on(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
            this.on(this.el_.ownerDocument, ['mouseup', 'touchend'], this.handleMouseUp);
        };

        VolumeMenuButton.prototype.handleMouseUp = function handleMouseUp(event) {
            this.off(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
        };

        return VolumeMenuButton;
    })(_popupPopupButtonJs2['default']);

    VolumeMenuButton.prototype.volumeUpdate = _muteToggleJs2['default'].prototype.update;
    VolumeMenuButton.prototype.controlText_ = 'Mute';

    _componentJs2['default'].registerComponent('VolumeMenuButton', VolumeMenuButton);
    exports['default'] = VolumeMenuButton;
    module.exports = exports['default'];

},{"../component.js":67,"../popup/popup-button.js":115,"../popup/popup.js":116,"../utils/fn.js":144,"./mute-toggle.js":73,"./volume-control/volume-bar.js":99}],103:[function(_dereq_,module,exports){
    /**
     * @file error-display.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _component = _dereq_('./component');

    var _component2 = _interopRequireDefault(_component);

    var _modalDialog = _dereq_('./modal-dialog');

    var _modalDialog2 = _interopRequireDefault(_modalDialog);

    var _utilsDom = _dereq_('./utils/dom');

    var Dom = _interopRequireWildcard(_utilsDom);

    var _utilsMergeOptions = _dereq_('./utils/merge-options');

    var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);

    /**
     * Display that an error has occurred making the video unplayable.
     *
     * @extends ModalDialog
     * @class ErrorDisplay
     */

    var ErrorDisplay = (function (_ModalDialog) {
        _inherits(ErrorDisplay, _ModalDialog);

        /**
         * Constructor for error display modal.
         *
         * @param  {Player} player
         * @param  {Object} [options]
         */

        function ErrorDisplay(player, options) {
            _classCallCheck(this, ErrorDisplay);

            _ModalDialog.call(this, player, options);
            this.on(player, 'error', this.open);
        }

        /**
         * Include the old class for backward-compatibility.
         *
         * This can be removed in 6.0.
         *
         * @method buildCSSClass
         * @deprecated
         * @return {String}
         */

        ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);
        };

        /**
         * Generates the modal content based on the player error.
         *
         * @return {String|Null}
         */

        ErrorDisplay.prototype.content = function content() {
            var error = this.player().error();
            return error ? this.localize(error.message) : '';
        };

        return ErrorDisplay;
    })(_modalDialog2['default']);

    ErrorDisplay.prototype.options_ = _utilsMergeOptions2['default'](_modalDialog2['default'].prototype.options_, {
        fillAlways: true,
        temporary: false,
        uncloseable: true
    });

    _component2['default'].registerComponent('ErrorDisplay', ErrorDisplay);
    exports['default'] = ErrorDisplay;
    module.exports = exports['default'];

},{"./component":67,"./modal-dialog":112,"./utils/dom":142,"./utils/merge-options":148}],104:[function(_dereq_,module,exports){
    /**
     * @file event-target.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    var _utilsEventsJs = _dereq_('./utils/events.js');

    var Events = _interopRequireWildcard(_utilsEventsJs);

    var EventTarget = function EventTarget() {};

    EventTarget.prototype.allowedEvents_ = {};

    EventTarget.prototype.on = function (type, fn) {
        // Remove the addEventListener alias before calling Events.on
        // so we don't get into an infinite type loop
        var ael = this.addEventListener;
        this.addEventListener = function () {};
        Events.on(this, type, fn);
        this.addEventListener = ael;
    };
    EventTarget.prototype.addEventListener = EventTarget.prototype.on;

    EventTarget.prototype.off = function (type, fn) {
        Events.off(this, type, fn);
    };
    EventTarget.prototype.removeEventListener = EventTarget.prototype.off;

    EventTarget.prototype.one = function (type, fn) {
        // Remove the addEventListener alias before calling Events.on
        // so we don't get into an infinite type loop
        var ael = this.addEventListener;
        this.addEventListener = function () {};
        Events.one(this, type, fn);
        this.addEventListener = ael;
    };

    EventTarget.prototype.trigger = function (event) {
        var type = event.type || event;

        if (typeof event === 'string') {
            event = {
                type: type
            };
        }
        event = Events.fixEvent(event);

        if (this.allowedEvents_[type] && this['on' + type]) {
            this['on' + type](event);
        }

        Events.trigger(this, event);
    };
// The standard DOM EventTarget.dispatchEvent() is aliased to trigger()
    EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;

    exports['default'] = EventTarget;
    module.exports = exports['default'];

},{"./utils/events.js":143}],105:[function(_dereq_,module,exports){
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _utilsLog = _dereq_('./utils/log');

    var _utilsLog2 = _interopRequireDefault(_utilsLog);

    /*
     * @file extend.js
     *
     * A combination of node inherits and babel's inherits (after transpile).
     * Both work the same but node adds `super_` to the subClass
     * and Bable adds the superClass as __proto__. Both seem useful.
     */
    var _inherits = function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });

        if (superClass) {
            // node
            subClass.super_ = superClass;
        }
    };

    /*
     * Function for subclassing using the same inheritance that
     * videojs uses internally
     * ```js
     * var Button = videojs.getComponent('Button');
     * ```
     * ```js
     * var MyButton = videojs.extend(Button, {
     *   constructor: function(player, options) {
     *     Button.call(this, player, options);
     *   },
     *   onClick: function() {
     *     // doSomething
     *   }
     * });
     * ```
     */
    var extendFn = function extendFn(superClass) {
        var subClassMethods = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        var subClass = function subClass() {
            superClass.apply(this, arguments);
        };
        var methods = {};

        if (typeof subClassMethods === 'object') {
            if (typeof subClassMethods.init === 'function') {
                _utilsLog2['default'].warn('Constructor logic via init() is deprecated; please use constructor() instead.');
                subClassMethods.constructor = subClassMethods.init;
            }
            if (subClassMethods.constructor !== Object.prototype.constructor) {
                subClass = subClassMethods.constructor;
            }
            methods = subClassMethods;
        } else if (typeof subClassMethods === 'function') {
            subClass = subClassMethods;
        }

        _inherits(subClass, superClass);

        // Extend subObj's prototype with functions and other properties from props
        for (var name in methods) {
            if (methods.hasOwnProperty(name)) {
                subClass.prototype[name] = methods[name];
            }
        }

        return subClass;
    };

    exports['default'] = extendFn;
    module.exports = exports['default'];

},{"./utils/log":147}],106:[function(_dereq_,module,exports){
    /**
     * @file fullscreen-api.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    /*
     * Store the browser-specific methods for the fullscreen API
     * @type {Object|undefined}
     * @private
     */
    var FullscreenApi = {};

// browser API methods
// map approach from Screenful.js - https://github.com/sindresorhus/screenfull.js
    var apiMap = [
// Spec: https://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html
        ['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
// WebKit
        ['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Old WebKit (Safari 5.1)
        ['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Mozilla
        ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
// Microsoft
        ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];

    var specApi = apiMap[0];
    var browserApi = undefined;

// determine the supported set of functions
    for (var i = 0; i < apiMap.length; i++) {
        // check for exitFullscreen function
        if (apiMap[i][1] in _globalDocument2['default']) {
            browserApi = apiMap[i];
            break;
        }
    }

// map the browser API names to the spec API names
    if (browserApi) {
        for (var i = 0; i < browserApi.length; i++) {
            FullscreenApi[specApi[i]] = browserApi[i];
        }
    }

    exports['default'] = FullscreenApi;
    module.exports = exports['default'];

},{"global/document":1}],107:[function(_dereq_,module,exports){
    /**
     * @file loading-spinner.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _component = _dereq_('./component');

    var _component2 = _interopRequireDefault(_component);

    /* Loading Spinner
     ================================================================================ */
    /**
     * Loading spinner for waiting events
     *
     * @extends Component
     * @class LoadingSpinner
     */

    var LoadingSpinner = (function (_Component) {
        _inherits(LoadingSpinner, _Component);

        function LoadingSpinner() {
            _classCallCheck(this, LoadingSpinner);

            _Component.apply(this, arguments);
        }

        /**
         * Create the component's DOM element
         *
         * @method createEl
         */

        LoadingSpinner.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-loading-spinner',
                dir: 'ltr'
            });
        };

        return LoadingSpinner;
    })(_component2['default']);

    _component2['default'].registerComponent('LoadingSpinner', LoadingSpinner);
    exports['default'] = LoadingSpinner;
    module.exports = exports['default'];

},{"./component":67}],108:[function(_dereq_,module,exports){
    /**
     * @file media-error.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _objectAssign = _dereq_('object.assign');

    var _objectAssign2 = _interopRequireDefault(_objectAssign);

    /*
     * Custom MediaError class which mimics the standard HTML5 MediaError class.
     *
     * @param {Number|String|Object|MediaError} value
     *        This can be of multiple types:
     *        - Number: should be a standard error code
     *        - String: an error message (the code will be 0)
     *        - Object: arbitrary properties
     *        - MediaError (native): used to populate a video.js MediaError object
     *        - MediaError (video.js): will return itself if it's already a
     *          video.js MediaError object.
     */
    function MediaError(value) {

        // Allow redundant calls to this constructor to avoid having `instanceof`
        // checks peppered around the code.
        if (value instanceof MediaError) {
            return value;
        }

        if (typeof value === 'number') {
            this.code = value;
        } else if (typeof value === 'string') {
            // default code is zero, so this is a custom error
            this.message = value;
        } else if (typeof value === 'object') {

            // We assign the `code` property manually because native MediaError objects
            // do not expose it as an own/enumerable property of the object.
            if (typeof value.code === 'number') {
                this.code = value.code;
            }

            _objectAssign2['default'](this, value);
        }

        if (!this.message) {
            this.message = MediaError.defaultMessages[this.code] || '';
        }
    }

    /*
     * The error code that refers two one of the defined
     * MediaError types
     *
     * @type {Number}
     */
    MediaError.prototype.code = 0;

    /*
     * An optional message to be shown with the error.
     * Message is not part of the HTML5 video spec
     * but allows for more informative custom errors.
     *
     * @type {String}
     */
    MediaError.prototype.message = '';

    /*
     * An optional status code that can be set by plugins
     * to allow even more detail about the error.
     * For example the HLS plugin might provide the specific
     * HTTP status code that was returned when the error
     * occurred, then allowing a custom error overlay
     * to display more information.
     *
     * @type {Array}
     */
    MediaError.prototype.status = null;

    MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', // = 0
        'MEDIA_ERR_ABORTED', // = 1
        'MEDIA_ERR_NETWORK', // = 2
        'MEDIA_ERR_DECODE', // = 3
        'MEDIA_ERR_SRC_NOT_SUPPORTED', // = 4
        'MEDIA_ERR_ENCRYPTED' // = 5
    ];

    MediaError.defaultMessages = {
        1: 'You aborted the media playback',
        2: 'A network error caused the media download to fail part-way.',
        3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',
        4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',
        5: 'The media is encrypted and we do not have the keys to decrypt it.'
    };

// Add types as properties on MediaError
// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
    for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
        MediaError[MediaError.errorTypes[errNum]] = errNum;
        // values should be accessible on both the class and instance
        MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
    }

    exports['default'] = MediaError;
    module.exports = exports['default'];

},{"object.assign":45}],109:[function(_dereq_,module,exports){
    /**
     * @file menu-button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _clickableComponentJs = _dereq_('../clickable-component.js');

    var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

    var _componentJs = _dereq_('../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _menuJs = _dereq_('./menu.js');

    var _menuJs2 = _interopRequireDefault(_menuJs);

    var _utilsDomJs = _dereq_('../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');

    var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

    /**
     * A button class with a popup menu
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Button
     * @class MenuButton
     */

    var MenuButton = (function (_ClickableComponent) {
        _inherits(MenuButton, _ClickableComponent);

        function MenuButton(player) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            _classCallCheck(this, MenuButton);

            _ClickableComponent.call(this, player, options);

            this.update();

            this.enabled_ = true;

            this.el_.setAttribute('aria-haspopup', 'true');
            this.el_.setAttribute('role', 'menuitem');
            this.on('keydown', this.handleSubmenuKeyPress);
        }

        /**
         * Update menu
         *
         * @method update
         */

        MenuButton.prototype.update = function update() {
            var menu = this.createMenu();

            if (this.menu) {
                this.removeChild(this.menu);
            }

            this.menu = menu;
            this.addChild(menu);

            /**
             * Track the state of the menu button
             *
             * @type {Boolean}
             * @private
             */
            this.buttonPressed_ = false;
            this.el_.setAttribute('aria-expanded', 'false');

            if (this.items && this.items.length === 0) {
                this.hide();
            } else if (this.items && this.items.length > 1) {
                this.show();
            }
        };

        /**
         * Create menu
         *
         * @return {Menu} The constructed menu
         * @method createMenu
         */

        MenuButton.prototype.createMenu = function createMenu() {
            var menu = new _menuJs2['default'](this.player_);

            // Add a title list item to the top
            if (this.options_.title) {
                var title = Dom.createEl('li', {
                    className: 'vjs-menu-title',
                    innerHTML: _utilsToTitleCaseJs2['default'](this.options_.title),
                    tabIndex: -1
                });
                menu.children_.unshift(title);
                Dom.insertElFirst(title, menu.contentEl());
            }

            this.items = this['createItems']();

            if (this.items) {
                // Add menu items to the menu
                for (var i = 0; i < this.items.length; i++) {
                    menu.addItem(this.items[i]);
                }
            }

            return menu;
        };

        /**
         * Create the list of menu items. Specific to each subclass.
         *
         * @method createItems
         */

        MenuButton.prototype.createItems = function createItems() {};

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        MenuButton.prototype.createEl = function createEl() {
            return _ClickableComponent.prototype.createEl.call(this, 'div', {
                className: this.buildCSSClass()
            });
        };

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        MenuButton.prototype.buildCSSClass = function buildCSSClass() {
            var menuButtonClass = 'vjs-menu-button';

            // If the inline option is passed, we want to use different styles altogether.
            if (this.options_.inline === true) {
                menuButtonClass += '-inline';
            } else {
                menuButtonClass += '-popup';
            }

            return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);
        };

        /**
         * When you click the button it adds focus, which
         * will show the menu indefinitely.
         * So we'll remove focus when the mouse leaves the button.
         * Focus is needed for tab navigation.
         * Allow sub components to stack CSS class names
         *
         * @method handleClick
         */

        MenuButton.prototype.handleClick = function handleClick() {
            this.one(this.menu.contentEl(), 'mouseleave', Fn.bind(this, function (e) {
                this.unpressButton();
                this.el_.blur();
            }));
            if (this.buttonPressed_) {
                this.unpressButton();
            } else {
                this.pressButton();
            }
        };

        /**
         * Handle key press on menu
         *
         * @param {Object} event Key press event
         * @method handleKeyPress
         */

        MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {

            // Escape (27) key or Tab (9) key unpress the 'button'
            if (event.which === 27 || event.which === 9) {
                if (this.buttonPressed_) {
                    this.unpressButton();
                }
                // Don't preventDefault for Tab key - we still want to lose focus
                if (event.which !== 9) {
                    event.preventDefault();
                }
                // Up (38) key or Down (40) key press the 'button'
            } else if (event.which === 38 || event.which === 40) {
                if (!this.buttonPressed_) {
                    this.pressButton();
                    event.preventDefault();
                }
            } else {
                _ClickableComponent.prototype.handleKeyPress.call(this, event);
            }
        };

        /**
         * Handle key press on submenu
         *
         * @param {Object} event Key press event
         * @method handleSubmenuKeyPress
         */

        MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {

            // Escape (27) key or Tab (9) key unpress the 'button'
            if (event.which === 27 || event.which === 9) {
                if (this.buttonPressed_) {
                    this.unpressButton();
                }
                // Don't preventDefault for Tab key - we still want to lose focus
                if (event.which !== 9) {
                    event.preventDefault();
                }
            }
        };

        /**
         * Makes changes based on button pressed
         *
         * @method pressButton
         */

        MenuButton.prototype.pressButton = function pressButton() {
            if (this.enabled_) {
                this.buttonPressed_ = true;
                this.menu.lockShowing();
                this.el_.setAttribute('aria-expanded', 'true');
                this.menu.focus(); // set the focus into the submenu
            }
        };

        /**
         * Makes changes based on button unpressed
         *
         * @method unpressButton
         */

        MenuButton.prototype.unpressButton = function unpressButton() {
            if (this.enabled_) {
                this.buttonPressed_ = false;
                this.menu.unlockShowing();
                this.el_.setAttribute('aria-expanded', 'false');
                this.el_.focus(); // Set focus back to this menu button
            }
        };

        /**
         * Disable the menu button
         *
         * @return {Component}
         * @method disable
         */

        MenuButton.prototype.disable = function disable() {
            // Unpress, but don't force focus on this button
            this.buttonPressed_ = false;
            this.menu.unlockShowing();
            this.el_.setAttribute('aria-expanded', 'false');

            this.enabled_ = false;

            return _ClickableComponent.prototype.disable.call(this);
        };

        /**
         * Enable the menu button
         *
         * @return {Component}
         * @method disable
         */

        MenuButton.prototype.enable = function enable() {
            this.enabled_ = true;

            return _ClickableComponent.prototype.enable.call(this);
        };

        return MenuButton;
    })(_clickableComponentJs2['default']);

    _componentJs2['default'].registerComponent('MenuButton', MenuButton);
    exports['default'] = MenuButton;
    module.exports = exports['default'];

},{"../clickable-component.js":65,"../component.js":67,"../utils/dom.js":142,"../utils/fn.js":144,"../utils/to-title-case.js":151,"./menu.js":111}],110:[function(_dereq_,module,exports){
    /**
     * @file menu-item.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _clickableComponentJs = _dereq_('../clickable-component.js');

    var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

    var _componentJs = _dereq_('../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _objectAssign = _dereq_('object.assign');

    var _objectAssign2 = _interopRequireDefault(_objectAssign);

    /**
     * The component for a menu item. `<li>`
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Button
     * @class MenuItem
     */

    var MenuItem = (function (_ClickableComponent) {
        _inherits(MenuItem, _ClickableComponent);

        function MenuItem(player, options) {
            _classCallCheck(this, MenuItem);

            _ClickableComponent.call(this, player, options);

            this.selectable = options['selectable'];

            this.selected(options['selected']);

            if (this.selectable) {
                // TODO: May need to be either menuitemcheckbox or menuitemradio,
                //       and may need logical grouping of menu items.
                this.el_.setAttribute('role', 'menuitemcheckbox');
            } else {
                this.el_.setAttribute('role', 'menuitem');
            }
        }

        /**
         * Create the component's DOM element
         *
         * @param {String=} type Desc
         * @param {Object=} props Desc
         * @return {Element}
         * @method createEl
         */

        MenuItem.prototype.createEl = function createEl(type, props, attrs) {
            return _ClickableComponent.prototype.createEl.call(this, 'li', _objectAssign2['default']({
                className: 'vjs-menu-item',
                innerHTML: this.localize(this.options_['label']),
                tabIndex: -1
            }, props), attrs);
        };

        /**
         * Handle a click on the menu item, and set it to selected
         *
         * @method handleClick
         */

        MenuItem.prototype.handleClick = function handleClick() {
            this.selected(true);
        };

        /**
         * Set this menu item as selected or not
         *
         * @param  {Boolean} selected
         * @method selected
         */

        MenuItem.prototype.selected = function selected(_selected) {
            if (this.selectable) {
                if (_selected) {
                    this.addClass('vjs-selected');
                    this.el_.setAttribute('aria-checked', 'true');
                    // aria-checked isn't fully supported by browsers/screen readers,
                    // so indicate selected state to screen reader in the control text.
                    this.controlText(', selected');
                } else {
                    this.removeClass('vjs-selected');
                    this.el_.setAttribute('aria-checked', 'false');
                    // Indicate un-selected state to screen reader
                    // Note that a space clears out the selected state text
                    this.controlText(' ');
                }
            }
        };

        return MenuItem;
    })(_clickableComponentJs2['default']);

    _componentJs2['default'].registerComponent('MenuItem', MenuItem);
    exports['default'] = MenuItem;
    module.exports = exports['default'];

},{"../clickable-component.js":65,"../component.js":67,"object.assign":45}],111:[function(_dereq_,module,exports){
    /**
     * @file menu.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsDomJs = _dereq_('../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsEventsJs = _dereq_('../utils/events.js');

    var Events = _interopRequireWildcard(_utilsEventsJs);

    /**
     * The Menu component is used to build pop up menus, including subtitle and
     * captions selection menus.
     *
     * @extends Component
     * @class Menu
     */

    var Menu = (function (_Component) {
        _inherits(Menu, _Component);

        function Menu(player, options) {
            _classCallCheck(this, Menu);

            _Component.call(this, player, options);

            this.focusedChild_ = -1;

            this.on('keydown', this.handleKeyPress);
        }

        /**
         * Add a menu item to the menu
         *
         * @param {Object|String} component Component or component type to add
         * @method addItem
         */

        Menu.prototype.addItem = function addItem(component) {
            this.addChild(component);
            component.on('click', Fn.bind(this, function () {
                this.unlockShowing();
                //TODO: Need to set keyboard focus back to the menuButton
            }));
        };

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        Menu.prototype.createEl = function createEl() {
            var contentElType = this.options_.contentElType || 'ul';
            this.contentEl_ = Dom.createEl(contentElType, {
                className: 'vjs-menu-content'
            });
            this.contentEl_.setAttribute('role', 'menu');
            var el = _Component.prototype.createEl.call(this, 'div', {
                append: this.contentEl_,
                className: 'vjs-menu'
            });
            el.setAttribute('role', 'presentation');
            el.appendChild(this.contentEl_);

            // Prevent clicks from bubbling up. Needed for Menu Buttons,
            // where a click on the parent is significant
            Events.on(el, 'click', function (event) {
                event.preventDefault();
                event.stopImmediatePropagation();
            });

            return el;
        };

        /**
         * Handle key press for menu
         *
         * @param {Object} event Event object
         * @method handleKeyPress
         */

        Menu.prototype.handleKeyPress = function handleKeyPress(event) {
            if (event.which === 37 || event.which === 40) {
                // Left and Down Arrows
                event.preventDefault();
                this.stepForward();
            } else if (event.which === 38 || event.which === 39) {
                // Up and Right Arrows
                event.preventDefault();
                this.stepBack();
            }
        };

        /**
         * Move to next (lower) menu item for keyboard users
         *
         * @method stepForward
         */

        Menu.prototype.stepForward = function stepForward() {
            var stepChild = 0;

            if (this.focusedChild_ !== undefined) {
                stepChild = this.focusedChild_ + 1;
            }
            this.focus(stepChild);
        };

        /**
         * Move to previous (higher) menu item for keyboard users
         *
         * @method stepBack
         */

        Menu.prototype.stepBack = function stepBack() {
            var stepChild = 0;

            if (this.focusedChild_ !== undefined) {
                stepChild = this.focusedChild_ - 1;
            }
            this.focus(stepChild);
        };

        /**
         * Set focus on a menu item in the menu
         *
         * @param {Object|String} item Index of child item set focus on
         * @method focus
         */

        Menu.prototype.focus = function focus() {
            var item = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

            var children = this.children().slice();
            var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);

            if (haveTitle) {
                children.shift();
            }

            if (children.length > 0) {
                if (item < 0) {
                    item = 0;
                } else if (item >= children.length) {
                    item = children.length - 1;
                }

                this.focusedChild_ = item;

                children[item].el_.focus();
            }
        };

        return Menu;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('Menu', Menu);
    exports['default'] = Menu;
    module.exports = exports['default'];

},{"../component.js":67,"../utils/dom.js":142,"../utils/events.js":143,"../utils/fn.js":144}],112:[function(_dereq_,module,exports){
    /**
     * @file modal-dialog.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _utilsDom = _dereq_('./utils/dom');

    var Dom = _interopRequireWildcard(_utilsDom);

    var _utilsFn = _dereq_('./utils/fn');

    var Fn = _interopRequireWildcard(_utilsFn);

    var _utilsLog = _dereq_('./utils/log');

    var _utilsLog2 = _interopRequireDefault(_utilsLog);

    var _component = _dereq_('./component');

    var _component2 = _interopRequireDefault(_component);

    var _closeButton = _dereq_('./close-button');

    var _closeButton2 = _interopRequireDefault(_closeButton);

    var MODAL_CLASS_NAME = 'vjs-modal-dialog';
    var ESC = 27;

    /**
     * The `ModalDialog` displays over the video and its controls, which blocks
     * interaction with the player until it is closed.
     *
     * Modal dialogs include a "Close" button and will close when that button
     * is activated - or when ESC is pressed anywhere.
     *
     * @extends Component
     * @class ModalDialog
     */

    var ModalDialog = (function (_Component) {
        _inherits(ModalDialog, _Component);

        /**
         * Constructor for modals.
         *
         * @param  {Player} player
         * @param  {Object} [options]
         * @param  {Mixed} [options.content=undefined]
         *         Provide customized content for this modal.
         *
         * @param  {String} [options.description]
         *         A text description for the modal, primarily for accessibility.
         *
         * @param  {Boolean} [options.fillAlways=false]
         *         Normally, modals are automatically filled only the first time
         *         they open. This tells the modal to refresh its content
         *         every time it opens.
         *
         * @param  {String} [options.label]
         *         A text label for the modal, primarily for accessibility.
         *
         * @param  {Boolean} [options.temporary=true]
         *         If `true`, the modal can only be opened once; it will be
         *         disposed as soon as it's closed.
         *
         * @param  {Boolean} [options.uncloseable=false]
         *         If `true`, the user will not be able to close the modal
         *         through the UI in the normal ways. Programmatic closing is
         *         still possible.
         *
         */

        function ModalDialog(player, options) {
            _classCallCheck(this, ModalDialog);

            _Component.call(this, player, options);
            this.opened_ = this.hasBeenOpened_ = this.hasBeenFilled_ = false;

            this.closeable(!this.options_.uncloseable);
            this.content(this.options_.content);

            // Make sure the contentEl is defined AFTER any children are initialized
            // because we only want the contents of the modal in the contentEl
            // (not the UI elements like the close button).
            this.contentEl_ = Dom.createEl('div', {
                className: MODAL_CLASS_NAME + '-content'
            }, {
                role: 'document'
            });

            this.descEl_ = Dom.createEl('p', {
                className: MODAL_CLASS_NAME + '-description vjs-offscreen',
                id: this.el().getAttribute('aria-describedby')
            });

            Dom.textContent(this.descEl_, this.description());
            this.el_.appendChild(this.descEl_);
            this.el_.appendChild(this.contentEl_);
        }

        /*
         * Modal dialog default options.
         *
         * @type {Object}
         * @private
         */

        /**
         * Create the modal's DOM element
         *
         * @method createEl
         * @return {Element}
         */

        ModalDialog.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: this.buildCSSClass(),
                tabIndex: -1
            }, {
                'aria-describedby': this.id() + '_description',
                'aria-hidden': 'true',
                'aria-label': this.label(),
                role: 'dialog'
            });
        };

        /**
         * Build the modal's CSS class.
         *
         * @method buildCSSClass
         * @return {String}
         */

        ModalDialog.prototype.buildCSSClass = function buildCSSClass() {
            return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);
        };

        /**
         * Handles key presses on the document, looking for ESC, which closes
         * the modal.
         *
         * @method handleKeyPress
         * @param  {Event} e
         */

        ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {
            if (e.which === ESC && this.closeable()) {
                this.close();
            }
        };

        /**
         * Returns the label string for this modal. Primarily used for accessibility.
         *
         * @return {String}
         */

        ModalDialog.prototype.label = function label() {
            return this.options_.label || this.localize('Modal Window');
        };

        /**
         * Returns the description string for this modal. Primarily used for
         * accessibility.
         *
         * @return {String}
         */

        ModalDialog.prototype.description = function description() {
            var desc = this.options_.description || this.localize('This is a modal window.');

            // Append a universal closeability message if the modal is closeable.
            if (this.closeable()) {
                desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');
            }

            return desc;
        };

        /**
         * Opens the modal.
         *
         * @method open
         * @return {ModalDialog}
         */

        ModalDialog.prototype.open = function open() {
            if (!this.opened_) {
                var player = this.player();

                this.trigger('beforemodalopen');
                this.opened_ = true;

                // Fill content if the modal has never opened before and
                // never been filled.
                if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
                    this.fill();
                }

                // If the player was playing, pause it and take note of its previously
                // playing state.
                this.wasPlaying_ = !player.paused();

                if (this.wasPlaying_) {
                    player.pause();
                }

                if (this.closeable()) {
                    this.on(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));
                }

                player.controls(false);
                this.show();
                this.el().setAttribute('aria-hidden', 'false');
                this.trigger('modalopen');
                this.hasBeenOpened_ = true;
            }
            return this;
        };

        /**
         * Whether or not the modal is opened currently.
         *
         * @method opened
         * @param  {Boolean} [value]
         *         If given, it will open (`true`) or close (`false`) the modal.
         *
         * @return {Boolean}
         */

        ModalDialog.prototype.opened = function opened(value) {
            if (typeof value === 'boolean') {
                this[value ? 'open' : 'close']();
            }
            return this.opened_;
        };

        /**
         * Closes the modal.
         *
         * @method close
         * @return {ModalDialog}
         */

        ModalDialog.prototype.close = function close() {
            if (this.opened_) {
                var player = this.player();

                this.trigger('beforemodalclose');
                this.opened_ = false;

                if (this.wasPlaying_) {
                    player.play();
                }

                if (this.closeable()) {
                    this.off(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));
                }

                player.controls(true);
                this.hide();
                this.el().setAttribute('aria-hidden', 'true');
                this.trigger('modalclose');

                if (this.options_.temporary) {
                    this.dispose();
                }
            }
            return this;
        };

        /**
         * Whether or not the modal is closeable via the UI.
         *
         * @method closeable
         * @param  {Boolean} [value]
         *         If given as a Boolean, it will set the `closeable` option.
         *
         * @return {Boolean}
         */

        ModalDialog.prototype.closeable = function closeable(value) {
            if (typeof value === 'boolean') {
                var closeable = this.closeable_ = !!value;
                var _close = this.getChild('closeButton');

                // If this is being made closeable and has no close button, add one.
                if (closeable && !_close) {

                    // The close button should be a child of the modal - not its
                    // content element, so temporarily change the content element.
                    var temp = this.contentEl_;
                    this.contentEl_ = this.el_;
                    _close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });
                    this.contentEl_ = temp;
                    this.on(_close, 'close', this.close);
                }

                // If this is being made uncloseable and has a close button, remove it.
                if (!closeable && _close) {
                    this.off(_close, 'close', this.close);
                    this.removeChild(_close);
                    _close.dispose();
                }
            }
            return this.closeable_;
        };

        /**
         * Fill the modal's content element with the modal's "content" option.
         *
         * The content element will be emptied before this change takes place.
         *
         * @method fill
         * @return {ModalDialog}
         */

        ModalDialog.prototype.fill = function fill() {
            return this.fillWith(this.content());
        };

        /**
         * Fill the modal's content element with arbitrary content.
         *
         * The content element will be emptied before this change takes place.
         *
         * @method fillWith
         * @param  {Mixed} [content]
         *         The same rules apply to this as apply to the `content` option.
         *
         * @return {ModalDialog}
         */

        ModalDialog.prototype.fillWith = function fillWith(content) {
            var contentEl = this.contentEl();
            var parentEl = contentEl.parentNode;
            var nextSiblingEl = contentEl.nextSibling;

            this.trigger('beforemodalfill');
            this.hasBeenFilled_ = true;

            // Detach the content element from the DOM before performing
            // manipulation to avoid modifying the live DOM multiple times.
            parentEl.removeChild(contentEl);
            this.empty();
            Dom.insertContent(contentEl, content);
            this.trigger('modalfill');

            // Re-inject the re-filled content element.
            if (nextSiblingEl) {
                parentEl.insertBefore(contentEl, nextSiblingEl);
            } else {
                parentEl.appendChild(contentEl);
            }

            return this;
        };

        /**
         * Empties the content element.
         *
         * This happens automatically anytime the modal is filled.
         *
         * @method empty
         * @return {ModalDialog}
         */

        ModalDialog.prototype.empty = function empty() {
            this.trigger('beforemodalempty');
            Dom.emptyEl(this.contentEl());
            this.trigger('modalempty');
            return this;
        };

        /**
         * Gets or sets the modal content, which gets normalized before being
         * rendered into the DOM.
         *
         * This does not update the DOM or fill the modal, but it is called during
         * that process.
         *
         * @method content
         * @param  {Mixed} [value]
         *         If defined, sets the internal content value to be used on the
         *         next call(s) to `fill`. This value is normalized before being
         *         inserted. To "clear" the internal content value, pass `null`.
         *
         * @return {Mixed}
         */

        ModalDialog.prototype.content = function content(value) {
            if (typeof value !== 'undefined') {
                this.content_ = value;
            }
            return this.content_;
        };

        return ModalDialog;
    })(_component2['default']);

    ModalDialog.prototype.options_ = {
        temporary: true
    };

    _component2['default'].registerComponent('ModalDialog', ModalDialog);
    exports['default'] = ModalDialog;
    module.exports = exports['default'];

},{"./close-button":66,"./component":67,"./utils/dom":142,"./utils/fn":144,"./utils/log":147}],113:[function(_dereq_,module,exports){
    /**
     * @file player.js
     */
// Subclasses Component
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('./component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _utilsEventsJs = _dereq_('./utils/events.js');

    var Events = _interopRequireWildcard(_utilsEventsJs);

    var _utilsDomJs = _dereq_('./utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFnJs = _dereq_('./utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsGuidJs = _dereq_('./utils/guid.js');

    var Guid = _interopRequireWildcard(_utilsGuidJs);

    var _utilsBrowserJs = _dereq_('./utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    var _utilsLogJs = _dereq_('./utils/log.js');

    var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

    var _utilsToTitleCaseJs = _dereq_('./utils/to-title-case.js');

    var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

    var _utilsTimeRangesJs = _dereq_('./utils/time-ranges.js');

    var _utilsBufferJs = _dereq_('./utils/buffer.js');

    var _utilsStylesheetJs = _dereq_('./utils/stylesheet.js');

    var stylesheet = _interopRequireWildcard(_utilsStylesheetJs);

    var _fullscreenApiJs = _dereq_('./fullscreen-api.js');

    var _fullscreenApiJs2 = _interopRequireDefault(_fullscreenApiJs);

    var _mediaErrorJs = _dereq_('./media-error.js');

    var _mediaErrorJs2 = _interopRequireDefault(_mediaErrorJs);

    var _safeJsonParseTuple = _dereq_('safe-json-parse/tuple');

    var _safeJsonParseTuple2 = _interopRequireDefault(_safeJsonParseTuple);

    var _objectAssign = _dereq_('object.assign');

    var _objectAssign2 = _interopRequireDefault(_objectAssign);

    var _utilsMergeOptionsJs = _dereq_('./utils/merge-options.js');

    var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);

    var _tracksTextTrackListConverterJs = _dereq_('./tracks/text-track-list-converter.js');

    var _tracksTextTrackListConverterJs2 = _interopRequireDefault(_tracksTextTrackListConverterJs);

    var _tracksAudioTrackListJs = _dereq_('./tracks/audio-track-list.js');

    var _tracksAudioTrackListJs2 = _interopRequireDefault(_tracksAudioTrackListJs);

    var _tracksVideoTrackListJs = _dereq_('./tracks/video-track-list.js');

    var _tracksVideoTrackListJs2 = _interopRequireDefault(_tracksVideoTrackListJs);

// Include required child components (importing also registers them)

    var _techLoaderJs = _dereq_('./tech/loader.js');

    var _techLoaderJs2 = _interopRequireDefault(_techLoaderJs);

    var _posterImageJs = _dereq_('./poster-image.js');

    var _posterImageJs2 = _interopRequireDefault(_posterImageJs);

    var _tracksTextTrackDisplayJs = _dereq_('./tracks/text-track-display.js');

    var _tracksTextTrackDisplayJs2 = _interopRequireDefault(_tracksTextTrackDisplayJs);

    var _loadingSpinnerJs = _dereq_('./loading-spinner.js');

    var _loadingSpinnerJs2 = _interopRequireDefault(_loadingSpinnerJs);

    var _bigPlayButtonJs = _dereq_('./big-play-button.js');

    var _bigPlayButtonJs2 = _interopRequireDefault(_bigPlayButtonJs);

    var _controlBarControlBarJs = _dereq_('./control-bar/control-bar.js');

    var _controlBarControlBarJs2 = _interopRequireDefault(_controlBarControlBarJs);

    var _errorDisplayJs = _dereq_('./error-display.js');

    var _errorDisplayJs2 = _interopRequireDefault(_errorDisplayJs);

    var _tracksTextTrackSettingsJs = _dereq_('./tracks/text-track-settings.js');

    var _tracksTextTrackSettingsJs2 = _interopRequireDefault(_tracksTextTrackSettingsJs);

    var _modalDialog = _dereq_('./modal-dialog');

    var _modalDialog2 = _interopRequireDefault(_modalDialog);

// Require html5 tech, at least for disposing the original video tag

    var _techTechJs = _dereq_('./tech/tech.js');

    var _techTechJs2 = _interopRequireDefault(_techTechJs);

    var _techHtml5Js = _dereq_('./tech/html5.js');

    var _techHtml5Js2 = _interopRequireDefault(_techHtml5Js);

    /**
     * An instance of the `Player` class is created when any of the Video.js setup methods are used to initialize a video.
     * ```js
     * var myPlayer = videojs('example_video_1');
     * ```
     * In the following example, the `data-setup` attribute tells the Video.js library to create a player instance when the library is ready.
     * ```html
     * <video id="example_video_1" data-setup='{}' controls>
     *   <source src="my-source.mp4" type="video/mp4">
     * </video>
     * ```
     * After an instance has been created it can be accessed globally using `Video('example_video_1')`.
     *
     * @param {Element} tag        The original video tag used for configuring options
     * @param {Object=} options    Object of option names and values
     * @param {Function=} ready    Ready callback function
     * @extends Component
     * @class Player
     */

    var Player = (function (_Component) {
        _inherits(Player, _Component);

        /**
         * player's constructor function
         *
         * @constructs
         * @method init
         * @param {Element} tag        The original video tag used for configuring options
         * @param {Object=} options    Player options
         * @param {Function=} ready    Ready callback function
         */

        function Player(tag, options, ready) {
            var _this = this;

            _classCallCheck(this, Player);

            // Make sure tag ID exists
            tag.id = tag.id || 'vjs_video_' + Guid.newGUID();

            // Set Options
            // The options argument overrides options set in the video tag
            // which overrides globally set options.
            // This latter part coincides with the load order
            // (tag must exist before Player)
            options = _objectAssign2['default'](Player.getTagSettings(tag), options);

            // Delay the initialization of children because we need to set up
            // player properties first, and can't use `this` before `super()`
            options.initChildren = false;

            // Same with creating the element
            options.createEl = false;

            // we don't want the player to report touch activity on itself
            // see enableTouchActivity in Component
            options.reportTouchActivity = false;

            // If language is not set, get the closest lang attribute
            if (!options.language) {
                if (typeof tag.closest === 'function') {
                    var closest = tag.closest('[lang]');
                    if (closest) {
                        options.language = closest.getAttribute('lang');
                    }
                } else {
                    var element = tag;
                    while (element && element.nodeType === 1) {
                        if (Dom.getElAttributes(element).hasOwnProperty('lang')) {
                            options.language = element.getAttribute('lang');
                            break;
                        }
                        element = element.parentNode;
                    }
                }
            }

            // Run base component initializing with new options
            _Component.call(this, null, options, ready);

            // if the global option object was accidentally blown away by
            // someone, bail early with an informative error
            if (!this.options_ || !this.options_.techOrder || !this.options_.techOrder.length) {
                throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
            }

            this.tag = tag; // Store the original tag used to set options

            // Store the tag attributes used to restore html5 element
            this.tagAttributes = tag && Dom.getElAttributes(tag);

            // Update current language
            this.language(this.options_.language);

            // Update Supported Languages
            if (options.languages) {
                (function () {
                    // Normalise player option languages to lowercase
                    var languagesToLower = {};

                    Object.getOwnPropertyNames(options.languages).forEach(function (name) {
                        languagesToLower[name.toLowerCase()] = options.languages[name];
                    });
                    _this.languages_ = languagesToLower;
                })();
            } else {
                this.languages_ = Player.prototype.options_.languages;
            }

            // Cache for video property values.
            this.cache_ = {};

            // Set poster
            this.poster_ = options.poster || '';

            // Set controls
            this.controls_ = !!options.controls;

            // Original tag settings stored in options
            // now remove immediately so native controls don't flash.
            // May be turned back on by HTML5 tech if nativeControlsForTouch is true
            tag.controls = false;

            /*
             * Store the internal state of scrubbing
             *
             * @private
             * @return {Boolean} True if the user is scrubbing
             */
            this.scrubbing_ = false;

            this.el_ = this.createEl();

            // We also want to pass the original player options to each component and plugin
            // as well so they don't need to reach back into the player for options later.
            // We also need to do another copy of this.options_ so we don't end up with
            // an infinite loop.
            var playerOptionsCopy = _utilsMergeOptionsJs2['default'](this.options_);

            // Load plugins
            if (options.plugins) {
                (function () {
                    var plugins = options.plugins;

                    Object.getOwnPropertyNames(plugins).forEach(function (name) {
                        if (typeof this[name] === 'function') {
                            this[name](plugins[name]);
                        } else {
                            _utilsLogJs2['default'].error('Unable to find plugin:', name);
                        }
                    }, _this);
                })();
            }

            this.options_.playerOptions = playerOptionsCopy;

            this.initChildren();

            // Set isAudio based on whether or not an audio tag was used
            this.isAudio(tag.nodeName.toLowerCase() === 'audio');

            // Update controls className. Can't do this when the controls are initially
            // set because the element doesn't exist yet.
            if (this.controls()) {
                this.addClass('vjs-controls-enabled');
            } else {
                this.addClass('vjs-controls-disabled');
            }

            // Set ARIA label and region role depending on player type
            this.el_.setAttribute('role', 'region');
            if (this.isAudio()) {
                this.el_.setAttribute('aria-label', 'audio player');
            } else {
                this.el_.setAttribute('aria-label', 'video player');
            }

            if (this.isAudio()) {
                this.addClass('vjs-audio');
            }

            if (this.flexNotSupported_()) {
                this.addClass('vjs-no-flex');
            }

            // TODO: Make this smarter. Toggle user state between touching/mousing
            // using events, since devices can have both touch and mouse events.
            // if (browser.TOUCH_ENABLED) {
            //   this.addClass('vjs-touch-enabled');
            // }

            // iOS Safari has broken hover handling
            if (!browser.IS_IOS) {
                this.addClass('vjs-workinghover');
            }

            // Make player easily findable by ID
            Player.players[this.id_] = this;

            // When the player is first initialized, trigger activity so components
            // like the control bar show themselves if needed
            this.userActive(true);
            this.reportUserActivity();
            this.listenForUserActivity_();

            this.on('fullscreenchange', this.handleFullscreenChange_);
            this.on('stageclick', this.handleStageClick_);
        }

        /*
         * Global player list
         *
         * @type {Object}
         */

        /**
         * Destroys the video player and does any necessary cleanup
         * ```js
         *     myPlayer.dispose();
         * ```
         * This is especially helpful if you are dynamically adding and removing videos
         * to/from the DOM.
         *
         * @method dispose
         */

        Player.prototype.dispose = function dispose() {
            this.trigger('dispose');
            // prevent dispose from being called twice
            this.off('dispose');

            if (this.styleEl_ && this.styleEl_.parentNode) {
                this.styleEl_.parentNode.removeChild(this.styleEl_);
            }

            // Kill reference to this player
            Player.players[this.id_] = null;
            if (this.tag && this.tag.player) {
                this.tag.player = null;
            }
            if (this.el_ && this.el_.player) {
                this.el_.player = null;
            }

            if (this.tech_) {
                this.tech_.dispose();
            }

            _Component.prototype.dispose.call(this);
        };

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        Player.prototype.createEl = function createEl() {
            var el = this.el_ = _Component.prototype.createEl.call(this, 'div');
            var tag = this.tag;

            // Remove width/height attrs from tag so CSS can make it 100% width/height
            tag.removeAttribute('width');
            tag.removeAttribute('height');

            // Copy over all the attributes from the tag, including ID and class
            // ID will now reference player box, not the video tag
            var attrs = Dom.getElAttributes(tag);

            Object.getOwnPropertyNames(attrs).forEach(function (attr) {
                // workaround so we don't totally break IE7
                // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7
                if (attr === 'class') {
                    el.className = attrs[attr];
                } else {
                    el.setAttribute(attr, attrs[attr]);
                }
            });

            // Update tag id/class for use as HTML5 playback tech
            // Might think we should do this after embedding in container so .vjs-tech class
            // doesn't flash 100% width/height, but class only applies with .video-js parent
            tag.playerId = tag.id;
            tag.id += '_html5_api';
            tag.className = 'vjs-tech';

            // Make player findable on elements
            tag.player = el.player = this;
            // Default state of video is paused
            this.addClass('vjs-paused');

            // Add a style element in the player that we'll use to set the width/height
            // of the player in a way that's still overrideable by CSS, just like the
            // video element
            if (_globalWindow2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {
                this.styleEl_ = stylesheet.createStyleElement('vjs-styles-dimensions');
                var defaultsStyleEl = Dom.$('.vjs-styles-defaults');
                var head = Dom.$('head');
                head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
            }

            // Pass in the width/height/aspectRatio options which will update the style el
            this.width(this.options_.width);
            this.height(this.options_.height);
            this.fluid(this.options_.fluid);
            this.aspectRatio(this.options_.aspectRatio);

            // Hide any links within the video/audio tag, because IE doesn't hide them completely.
            var links = tag.getElementsByTagName('a');
            for (var i = 0; i < links.length; i++) {
                var linkEl = links.item(i);
                Dom.addElClass(linkEl, 'vjs-hidden');
                linkEl.setAttribute('hidden', 'hidden');
            }

            // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
            // keep track of the original for later so we can know if the source originally failed
            tag.initNetworkState_ = tag.networkState;

            // Wrap video tag in div (el/box) container
            if (tag.parentNode) {
                tag.parentNode.insertBefore(el, tag);
            }

            // insert the tag as the first child of the player element
            // then manually add it to the children array so that this.addChild
            // will work properly for other components
            Dom.insertElFirst(tag, el); // Breaks iPhone, fixed in HTML5 setup.
            this.children_.unshift(tag);

            this.el_ = el;

            return el;
        };

        /**
         * Get/set player width
         *
         * @param {Number=} value Value for width
         * @return {Number} Width when getting
         * @method width
         */

        Player.prototype.width = function width(value) {
            return this.dimension('width', value);
        };

        /**
         * Get/set player height
         *
         * @param {Number=} value Value for height
         * @return {Number} Height when getting
         * @method height
         */

        Player.prototype.height = function height(value) {
            return this.dimension('height', value);
        };

        /**
         * Get/set dimension for player
         *
         * @param {String} dimension Either width or height
         * @param {Number=} value Value for dimension
         * @return {Component}
         * @method dimension
         */

        Player.prototype.dimension = function dimension(_dimension, value) {
            var privDimension = _dimension + '_';

            if (value === undefined) {
                return this[privDimension] || 0;
            }

            if (value === '') {
                // If an empty string is given, reset the dimension to be automatic
                this[privDimension] = undefined;
            } else {
                var parsedVal = parseFloat(value);

                if (isNaN(parsedVal)) {
                    _utilsLogJs2['default'].error('Improper value "' + value + '" supplied for for ' + _dimension);
                    return this;
                }

                this[privDimension] = parsedVal;
            }

            this.updateStyleEl_();
            return this;
        };

        /**
         * Add/remove the vjs-fluid class
         *
         * @param {Boolean} bool Value of true adds the class, value of false removes the class
         * @method fluid
         */

        Player.prototype.fluid = function fluid(bool) {
            if (bool === undefined) {
                return !!this.fluid_;
            }

            this.fluid_ = !!bool;

            if (bool) {
                this.addClass('vjs-fluid');
            } else {
                this.removeClass('vjs-fluid');
            }
        };

        /**
         * Get/Set the aspect ratio
         *
         * @param {String=} ratio Aspect ratio for player
         * @return aspectRatio
         * @method aspectRatio
         */

        Player.prototype.aspectRatio = function aspectRatio(ratio) {
            if (ratio === undefined) {
                return this.aspectRatio_;
            }

            // Check for width:height format
            if (!/^\d+\:\d+$/.test(ratio)) {
                throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');
            }
            this.aspectRatio_ = ratio;

            // We're assuming if you set an aspect ratio you want fluid mode,
            // because in fixed mode you could calculate width and height yourself.
            this.fluid(true);

            this.updateStyleEl_();
        };

        /**
         * Update styles of the player element (height, width and aspect ratio)
         *
         * @method updateStyleEl_
         */

        Player.prototype.updateStyleEl_ = function updateStyleEl_() {
            if (_globalWindow2['default'].VIDEOJS_NO_DYNAMIC_STYLE === true) {
                var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;
                var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;
                var techEl = this.tech_ && this.tech_.el();

                if (techEl) {
                    if (_width >= 0) {
                        techEl.width = _width;
                    }
                    if (_height >= 0) {
                        techEl.height = _height;
                    }
                }

                return;
            }

            var width = undefined;
            var height = undefined;
            var aspectRatio = undefined;
            var idClass = undefined;

            // The aspect ratio is either used directly or to calculate width and height.
            if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
                // Use any aspectRatio that's been specifically set
                aspectRatio = this.aspectRatio_;
            } else if (this.videoWidth()) {
                // Otherwise try to get the aspect ratio from the video metadata
                aspectRatio = this.videoWidth() + ':' + this.videoHeight();
            } else {
                // Or use a default. The video element's is 2:1, but 16:9 is more common.
                aspectRatio = '16:9';
            }

            // Get the ratio as a decimal we can use to calculate dimensions
            var ratioParts = aspectRatio.split(':');
            var ratioMultiplier = ratioParts[1] / ratioParts[0];

            if (this.width_ !== undefined) {
                // Use any width that's been specifically set
                width = this.width_;
            } else if (this.height_ !== undefined) {
                // Or calulate the width from the aspect ratio if a height has been set
                width = this.height_ / ratioMultiplier;
            } else {
                // Or use the video's metadata, or use the video el's default of 300
                width = this.videoWidth() || 300;
            }

            if (this.height_ !== undefined) {
                // Use any height that's been specifically set
                height = this.height_;
            } else {
                // Otherwise calculate the height from the ratio and the width
                height = width * ratioMultiplier;
            }

            // Ensure the CSS class is valid by starting with an alpha character
            if (/^[^a-zA-Z]/.test(this.id())) {
                idClass = 'dimensions-' + this.id();
            } else {
                idClass = this.id() + '-dimensions';
            }

            // Ensure the right class is still on the player for the style element
            this.addClass(idClass);

            stylesheet.setTextContent(this.styleEl_, '\n      .' + idClass + ' {\n        width: ' + width + 'px;\n        height: ' + height + 'px;\n      }\n\n      .' + idClass + '.vjs-fluid {\n        padding-top: ' + ratioMultiplier * 100 + '%;\n      }\n    ');
        };

        /**
         * Load the Media Playback Technology (tech)
         * Load/Create an instance of playback technology including element and API methods
         * And append playback element in player div.
         *
         * @param {String} techName Name of the playback technology
         * @param {String} source Video source
         * @method loadTech_
         * @private
         */

        Player.prototype.loadTech_ = function loadTech_(techName, source) {

            // Pause and remove current playback technology
            if (this.tech_) {
                this.unloadTech_();
            }

            // get rid of the HTML5 video tag as soon as we are using another tech
            if (techName !== 'Html5' && this.tag) {
                _techTechJs2['default'].getTech('Html5').disposeMediaElement(this.tag);
                this.tag.player = null;
                this.tag = null;
            }

            this.techName_ = techName;

            // Turn off API access because we're loading a new tech that might load asynchronously
            this.isReady_ = false;

            // Grab tech-specific options from player options and add source and parent element to use.
            var techOptions = _objectAssign2['default']({
                'nativeControlsForTouch': this.options_.nativeControlsForTouch,
                'source': source,
                'playerId': this.id(),
                'techId': this.id() + '_' + techName + '_api',
                'videoTracks': this.videoTracks_,
                'textTracks': this.textTracks_,
                'audioTracks': this.audioTracks_,
                'autoplay': this.options_.autoplay,
                'preload': this.options_.preload,
                'loop': this.options_.loop,
                'muted': this.options_.muted,
                'poster': this.poster(),
                'language': this.language(),
                'vtt.js': this.options_['vtt.js']
            }, this.options_[techName.toLowerCase()]);

            if (this.tag) {
                techOptions.tag = this.tag;
            }

            if (source) {
                this.currentType_ = source.type;
                if (source.src === this.cache_.src && this.cache_.currentTime > 0) {
                    techOptions.startTime = this.cache_.currentTime;
                }

                this.cache_.src = source.src;
            }

            // Initialize tech instance
            var techComponent = _techTechJs2['default'].getTech(techName);
            // Support old behavior of techs being registered as components.
            // Remove once that deprecated behavior is removed.
            if (!techComponent) {
                techComponent = _componentJs2['default'].getComponent(techName);
            }
            this.tech_ = new techComponent(techOptions);

            // player.triggerReady is always async, so don't need this to be async
            this.tech_.ready(Fn.bind(this, this.handleTechReady_), true);

            _tracksTextTrackListConverterJs2['default'].jsonToTextTracks(this.textTracksJson_ || [], this.tech_);

            // Listen to all HTML5-defined events and trigger them on the player
            this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);
            this.on(this.tech_, 'waiting', this.handleTechWaiting_);
            this.on(this.tech_, 'canplay', this.handleTechCanPlay_);
            this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);
            this.on(this.tech_, 'playing', this.handleTechPlaying_);
            this.on(this.tech_, 'ended', this.handleTechEnded_);
            this.on(this.tech_, 'seeking', this.handleTechSeeking_);
            this.on(this.tech_, 'seeked', this.handleTechSeeked_);
            this.on(this.tech_, 'play', this.handleTechPlay_);
            this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);
            this.on(this.tech_, 'pause', this.handleTechPause_);
            this.on(this.tech_, 'progress', this.handleTechProgress_);
            this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);
            this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);
            this.on(this.tech_, 'error', this.handleTechError_);
            this.on(this.tech_, 'suspend', this.handleTechSuspend_);
            this.on(this.tech_, 'abort', this.handleTechAbort_);
            this.on(this.tech_, 'emptied', this.handleTechEmptied_);
            this.on(this.tech_, 'stalled', this.handleTechStalled_);
            this.on(this.tech_, 'loadedmetadata', this.handleTechLoadedMetaData_);
            this.on(this.tech_, 'loadeddata', this.handleTechLoadedData_);
            this.on(this.tech_, 'timeupdate', this.handleTechTimeUpdate_);
            this.on(this.tech_, 'ratechange', this.handleTechRateChange_);
            this.on(this.tech_, 'volumechange', this.handleTechVolumeChange_);
            this.on(this.tech_, 'texttrackchange', this.handleTechTextTrackChange_);
            this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);
            this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);
            this.on(this.tech_, 'textdata', this.handleTechTextData_);

            this.usingNativeControls(this.techGet_('controls'));

            if (this.controls() && !this.usingNativeControls()) {
                this.addTechControlsListeners_();
            }

            // Add the tech element in the DOM if it was not already there
            // Make sure to not insert the original video element if using Html5
            if (this.tech_.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {
                Dom.insertElFirst(this.tech_.el(), this.el());
            }

            // Get rid of the original video tag reference after the first tech is loaded
            if (this.tag) {
                this.tag.player = null;
                this.tag = null;
            }
        };

        /**
         * Unload playback technology
         *
         * @method unloadTech_
         * @private
         */

        Player.prototype.unloadTech_ = function unloadTech_() {
            // Save the current text tracks so that we can reuse the same text tracks with the next tech
            this.videoTracks_ = this.videoTracks();
            this.textTracks_ = this.textTracks();
            this.audioTracks_ = this.audioTracks();
            this.textTracksJson_ = _tracksTextTrackListConverterJs2['default'].textTracksToJson(this.tech_);

            this.isReady_ = false;

            this.tech_.dispose();

            this.tech_ = false;
        };

        /**
         * Return a reference to the current tech.
         * It will only return a reference to the tech if given an object with the
         * `IWillNotUseThisInPlugins` property on it. This is try and prevent misuse
         * of techs by plugins.
         *
         * @param {Object}
         * @return {Object} The Tech
         * @method tech
         */

        Player.prototype.tech = function tech(safety) {
            if (safety && safety.IWillNotUseThisInPlugins) {
                return this.tech_;
            }
            var errorText = '\n      Please make sure that you are not using this inside of a plugin.\n      To disable this alert and error, please pass in an object with\n      `IWillNotUseThisInPlugins` to the `tech` method. See\n      https://github.com/videojs/video.js/issues/2617 for more info.\n    ';
            _globalWindow2['default'].alert(errorText);
            throw new Error(errorText);
        };

        /**
         * Set up click and touch listeners for the playback element
         *
         * On desktops, a click on the video itself will toggle playback,
         * on a mobile device a click on the video toggles controls.
         * (toggling controls is done by toggling the user state between active and
         * inactive)
         * A tap can signal that a user has become active, or has become inactive
         * e.g. a quick tap on an iPhone movie should reveal the controls. Another
         * quick tap should hide them again (signaling the user is in an inactive
         * viewing state)
         * In addition to this, we still want the user to be considered inactive after
         * a few seconds of inactivity.
         * Note: the only part of iOS interaction we can't mimic with this setup
         * is a touch and hold on the video element counting as activity in order to
         * keep the controls showing, but that shouldn't be an issue. A touch and hold
         * on any controls will still keep the user active
         *
         * @private
         * @method addTechControlsListeners_
         */

        Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {
            // Make sure to remove all the previous listeners in case we are called multiple times.
            this.removeTechControlsListeners_();

            // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
            // trigger mousedown/up.
            // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
            // Any touch events are set to block the mousedown event from happening
            this.on(this.tech_, 'mousedown', this.handleTechClick_);

            // If the controls were hidden we don't want that to change without a tap event
            // so we'll check if the controls were already showing before reporting user
            // activity
            this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);
            this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);
            this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);

            // The tap listener needs to come after the touchend listener because the tap
            // listener cancels out any reportedUserActivity when setting userActive(false)
            this.on(this.tech_, 'tap', this.handleTechTap_);
        };

        /**
         * Remove the listeners used for click and tap controls. This is needed for
         * toggling to controls disabled, where a tap/touch should do nothing.
         *
         * @method removeTechControlsListeners_
         * @private
         */

        Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {
            // We don't want to just use `this.off()` because there might be other needed
            // listeners added by techs that extend this.
            this.off(this.tech_, 'tap', this.handleTechTap_);
            this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);
            this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);
            this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);
            this.off(this.tech_, 'mousedown', this.handleTechClick_);
        };

        /**
         * Player waits for the tech to be ready
         *
         * @method handleTechReady_
         * @private
         */

        Player.prototype.handleTechReady_ = function handleTechReady_() {
            this.triggerReady();

            // Keep the same volume as before
            if (this.cache_.volume) {
                this.techCall_('setVolume', this.cache_.volume);
            }

            // Look if the tech found a higher resolution poster while loading
            this.handleTechPosterChange_();

            // Update the duration if available
            this.handleTechDurationChange_();

            // Chrome and Safari both have issues with autoplay.
            // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
            // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
            // This fixes both issues. Need to wait for API, so it updates displays correctly
            if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {
                try {
                    delete this.tag.poster; // Chrome Fix. Fixed in Chrome v16.
                } catch (e) {
                    _utilsLogJs2['default']('deleting tag.poster throws in some browsers', e);
                }
                this.play();
            }
        };

        /**
         * Fired when the user agent begins looking for media data
         *
         * @private
         * @method handleTechLoadStart_
         */

        Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {
            // TODO: Update to use `emptied` event instead. See #1277.

            this.removeClass('vjs-ended');

            // reset the error state
            this.error(null);

            // If it's already playing we want to trigger a firstplay event now.
            // The firstplay event relies on both the play and loadstart events
            // which can happen in any order for a new source
            if (!this.paused()) {
                this.trigger('loadstart');
                this.trigger('firstplay');
            } else {
                // reset the hasStarted state
                this.hasStarted(false);
                this.trigger('loadstart');
            }
        };

        /**
         * Add/remove the vjs-has-started class
         *
         * @param {Boolean} hasStarted The value of true adds the class the value of false remove the class
         * @return {Boolean} Boolean value if has started
         * @private
         * @method hasStarted
         */

        Player.prototype.hasStarted = function hasStarted(_hasStarted) {
            if (_hasStarted !== undefined) {
                // only update if this is a new value
                if (this.hasStarted_ !== _hasStarted) {
                    this.hasStarted_ = _hasStarted;
                    if (_hasStarted) {
                        this.addClass('vjs-has-started');
                        // trigger the firstplay event if this newly has played
                        this.trigger('firstplay');
                    } else {
                        this.removeClass('vjs-has-started');
                    }
                }
                return this;
            }
            return !!this.hasStarted_;
        };

        /**
         * Fired whenever the media begins or resumes playback
         *
         * @private
         * @method handleTechPlay_
         */

        Player.prototype.handleTechPlay_ = function handleTechPlay_() {
            this.removeClass('vjs-ended');
            this.removeClass('vjs-paused');
            this.addClass('vjs-playing');

            // hide the poster when the user hits play
            // https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play
            this.hasStarted(true);

            this.trigger('play');
        };

        /**
         * Fired whenever the media begins waiting
         *
         * @private
         * @method handleTechWaiting_
         */

        Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {
            var _this2 = this;

            this.addClass('vjs-waiting');
            this.trigger('waiting');
            this.one('timeupdate', function () {
                return _this2.removeClass('vjs-waiting');
            });
        };

        /**
         * A handler for events that signal that waiting has ended
         * which is not consistent between browsers. See #1351
         *
         * @private
         * @method handleTechCanPlay_
         */

        Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {
            this.removeClass('vjs-waiting');
            this.trigger('canplay');
        };

        /**
         * A handler for events that signal that waiting has ended
         * which is not consistent between browsers. See #1351
         *
         * @private
         * @method handleTechCanPlayThrough_
         */

        Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
            this.removeClass('vjs-waiting');
            this.trigger('canplaythrough');
        };

        /**
         * A handler for events that signal that waiting has ended
         * which is not consistent between browsers. See #1351
         *
         * @private
         * @method handleTechPlaying_
         */

        Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {
            this.removeClass('vjs-waiting');
            this.trigger('playing');
        };

        /**
         * Fired whenever the player is jumping to a new time
         *
         * @private
         * @method handleTechSeeking_
         */

        Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {
            this.addClass('vjs-seeking');
            this.trigger('seeking');
        };

        /**
         * Fired when the player has finished jumping to a new time
         *
         * @private
         * @method handleTechSeeked_
         */

        Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {
            this.removeClass('vjs-seeking');
            this.trigger('seeked');
        };

        /**
         * Fired the first time a video is played
         * Not part of the HLS spec, and we're not sure if this is the best
         * implementation yet, so use sparingly. If you don't have a reason to
         * prevent playback, use `myPlayer.one('play');` instead.
         *
         * @private
         * @method handleTechFirstPlay_
         */

        Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {
            //If the first starttime attribute is specified
            //then we will start at the given offset in seconds
            if (this.options_.starttime) {
                this.currentTime(this.options_.starttime);
            }

            this.addClass('vjs-has-started');
            this.trigger('firstplay');
        };

        /**
         * Fired whenever the media has been paused
         *
         * @private
         * @method handleTechPause_
         */

        Player.prototype.handleTechPause_ = function handleTechPause_() {
            this.removeClass('vjs-playing');
            this.addClass('vjs-paused');
            this.trigger('pause');
        };

        /**
         * Fired while the user agent is downloading media data
         *
         * @private
         * @method handleTechProgress_
         */

        Player.prototype.handleTechProgress_ = function handleTechProgress_() {
            this.trigger('progress');
        };

        /**
         * Fired when the end of the media resource is reached (currentTime == duration)
         *
         * @private
         * @method handleTechEnded_
         */

        Player.prototype.handleTechEnded_ = function handleTechEnded_() {
            this.addClass('vjs-ended');
            if (this.options_.loop) {
                this.currentTime(0);
                this.play();
            } else if (!this.paused()) {
                this.pause();
            }

            this.trigger('ended');
        };

        /**
         * Fired when the duration of the media resource is first known or changed
         *
         * @private
         * @method handleTechDurationChange_
         */

        Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {
            this.duration(this.techGet_('duration'));
        };

        /**
         * Handle a click on the media element to play/pause
         *
         * @param {Object=} event Event object
         * @private
         * @method handleTechClick_
         */

        Player.prototype.handleTechClick_ = function handleTechClick_(event) {
            // We're using mousedown to detect clicks thanks to Flash, but mousedown
            // will also be triggered with right-clicks, so we need to prevent that
            if (event.button !== 0) return;

            // When controls are disabled a click should not toggle playback because
            // the click is considered a control
            if (this.controls()) {
                if (this.paused()) {
                    this.play();
                } else {
                    this.pause();
                }
            }
        };

        /**
         * Handle a tap on the media element. It will toggle the user
         * activity state, which hides and shows the controls.
         *
         * @private
         * @method handleTechTap_
         */

        Player.prototype.handleTechTap_ = function handleTechTap_() {
            this.userActive(!this.userActive());
        };

        /**
         * Handle touch to start
         *
         * @private
         * @method handleTechTouchStart_
         */

        Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {
            this.userWasActive = this.userActive();
        };

        /**
         * Handle touch to move
         *
         * @private
         * @method handleTechTouchMove_
         */

        Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {
            if (this.userWasActive) {
                this.reportUserActivity();
            }
        };

        /**
         * Handle touch to end
         *
         * @private
         * @method handleTechTouchEnd_
         */

        Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
            // Stop the mouse events from also happening
            event.preventDefault();
        };

        /**
         * Fired when the player switches in or out of fullscreen mode
         *
         * @private
         * @method handleFullscreenChange_
         */

        Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {
            if (this.isFullscreen()) {
                this.addClass('vjs-fullscreen');
            } else {
                this.removeClass('vjs-fullscreen');
            }
        };

        /**
         * native click events on the SWF aren't triggered on IE11, Win8.1RT
         * use stageclick events triggered from inside the SWF instead
         *
         * @private
         * @method handleStageClick_
         */

        Player.prototype.handleStageClick_ = function handleStageClick_() {
            this.reportUserActivity();
        };

        /**
         * Handle Tech Fullscreen Change
         *
         * @private
         * @method handleTechFullscreenChange_
         */

        Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
            if (data) {
                this.isFullscreen(data.isFullscreen);
            }
            this.trigger('fullscreenchange');
        };

        /**
         * Fires when an error occurred during the loading of an audio/video
         *
         * @private
         * @method handleTechError_
         */

        Player.prototype.handleTechError_ = function handleTechError_() {
            var error = this.tech_.error();
            this.error(error);
        };

        /**
         * Fires when the browser is intentionally not getting media data
         *
         * @private
         * @method handleTechSuspend_
         */

        Player.prototype.handleTechSuspend_ = function handleTechSuspend_() {
            this.trigger('suspend');
        };

        /**
         * Fires when the loading of an audio/video is aborted
         *
         * @private
         * @method handleTechAbort_
         */

        Player.prototype.handleTechAbort_ = function handleTechAbort_() {
            this.trigger('abort');
        };

        /**
         * Fires when the current playlist is empty
         *
         * @private
         * @method handleTechEmptied_
         */

        Player.prototype.handleTechEmptied_ = function handleTechEmptied_() {
            this.trigger('emptied');
        };

        /**
         * Fires when the browser is trying to get media data, but data is not available
         *
         * @private
         * @method handleTechStalled_
         */

        Player.prototype.handleTechStalled_ = function handleTechStalled_() {
            this.trigger('stalled');
        };

        /**
         * Fires when the browser has loaded meta data for the audio/video
         *
         * @private
         * @method handleTechLoadedMetaData_
         */

        Player.prototype.handleTechLoadedMetaData_ = function handleTechLoadedMetaData_() {
            this.trigger('loadedmetadata');
        };

        Player.prototype.handleTechTextData_ = function handleTechTextData_() {
            var data = null;
            if (arguments.length > 1) {
                data = arguments[1];
            }
            this.trigger('textdata', data);
        };

        /**
         * Fires when the browser has loaded the current frame of the audio/video
         *
         * @private
         * @method handleTechLoadedData_
         */

        Player.prototype.handleTechLoadedData_ = function handleTechLoadedData_() {
            this.trigger('loadeddata');
        };

        /**
         * Fires when the current playback position has changed
         *
         * @private
         * @method handleTechTimeUpdate_
         */

        Player.prototype.handleTechTimeUpdate_ = function handleTechTimeUpdate_() {
            this.trigger('timeupdate');
        };

        /**
         * Fires when the playing speed of the audio/video is changed
         *
         * @private
         * @method handleTechRateChange_
         */

        Player.prototype.handleTechRateChange_ = function handleTechRateChange_() {
            this.trigger('ratechange');
        };

        /**
         * Fires when the volume has been changed
         *
         * @private
         * @method handleTechVolumeChange_
         */

        Player.prototype.handleTechVolumeChange_ = function handleTechVolumeChange_() {
            this.trigger('volumechange');
        };

        /**
         * Fires when the text track has been changed
         *
         * @private
         * @method handleTechTextTrackChange_
         */

        Player.prototype.handleTechTextTrackChange_ = function handleTechTextTrackChange_() {
            this.trigger('texttrackchange');
        };

        /**
         * Get object for cached values.
         *
         * @return {Object}
         * @method getCache
         */

        Player.prototype.getCache = function getCache() {
            return this.cache_;
        };

        /**
         * Pass values to the playback tech
         *
         * @param {String=} method Method
         * @param {Object=} arg Argument
         * @private
         * @method techCall_
         */

        Player.prototype.techCall_ = function techCall_(method, arg) {
            // If it's not ready yet, call method when it is
            if (this.tech_ && !this.tech_.isReady_) {
                this.tech_.ready(function () {
                    this[method](arg);
                }, true);

                // Otherwise call method now
            } else {
                try {
                    this.tech_ && this.tech_[method](arg);
                } catch (e) {
                    _utilsLogJs2['default'](e);
                    throw e;
                }
            }
        };

        /**
         * Get calls can't wait for the tech, and sometimes don't need to.
         *
         * @param {String} method Tech method
         * @return {Method}
         * @private
         * @method techGet_
         */

        Player.prototype.techGet_ = function techGet_(method) {
            if (this.tech_ && this.tech_.isReady_) {

                // Flash likes to die and reload when you hide or reposition it.
                // In these cases the object methods go away and we get errors.
                // When that happens we'll catch the errors and inform tech that it's not ready any more.
                try {
                    return this.tech_[method]();
                } catch (e) {
                    // When building additional tech libs, an expected method may not be defined yet
                    if (this.tech_[method] === undefined) {
                        _utilsLogJs2['default']('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);
                    } else {
                        // When a method isn't available on the object it throws a TypeError
                        if (e.name === 'TypeError') {
                            _utilsLogJs2['default']('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);
                            this.tech_.isReady_ = false;
                        } else {
                            _utilsLogJs2['default'](e);
                        }
                    }
                    throw e;
                }
            }

            return;
        };

        /**
         * start media playback
         * ```js
         *     myPlayer.play();
         * ```
         *
         * @return {Player} self
         * @method play
         */

        Player.prototype.play = function play() {
            // Only calls the tech's play if we already have a src loaded
            if (this.src() || this.currentSrc()) {
                this.techCall_('play');
            } else {
                this.tech_.one('loadstart', function () {
                    this.play();
                });
            }

            return this;
        };

        /**
         * Pause the video playback
         * ```js
         *     myPlayer.pause();
         * ```
         *
         * @return {Player} self
         * @method pause
         */

        Player.prototype.pause = function pause() {
            this.techCall_('pause');
            return this;
        };

        /**
         * Check if the player is paused
         * ```js
         *     var isPaused = myPlayer.paused();
         *     var isPlaying = !myPlayer.paused();
         * ```
         *
         * @return {Boolean} false if the media is currently playing, or true otherwise
         * @method paused
         */

        Player.prototype.paused = function paused() {
            // The initial state of paused should be true (in Safari it's actually false)
            return this.techGet_('paused') === false ? false : true;
        };

        /**
         * Returns whether or not the user is "scrubbing". Scrubbing is when the user
         * has clicked the progress bar handle and is dragging it along the progress bar.
         *
         * @param  {Boolean} isScrubbing   True/false the user is scrubbing
         * @return {Boolean}               The scrubbing status when getting
         * @return {Object}                The player when setting
         * @method scrubbing
         */

        Player.prototype.scrubbing = function scrubbing(isScrubbing) {
            if (isScrubbing !== undefined) {
                this.scrubbing_ = !!isScrubbing;

                if (isScrubbing) {
                    this.addClass('vjs-scrubbing');
                } else {
                    this.removeClass('vjs-scrubbing');
                }

                return this;
            }

            return this.scrubbing_;
        };

        /**
         * Get or set the current time (in seconds)
         * ```js
         *     // get
         *     var whereYouAt = myPlayer.currentTime();
         *     // set
         *     myPlayer.currentTime(120); // 2 minutes into the video
         * ```
         *
         * @param  {Number|String=} seconds The time to seek to
         * @return {Number}        The time in seconds, when not setting
         * @return {Player}    self, when the current time is set
         * @method currentTime
         */

        Player.prototype.currentTime = function currentTime(seconds) {
            if (seconds !== undefined) {

                this.techCall_('setCurrentTime', seconds);

                return this;
            }

            // cache last currentTime and return. default to 0 seconds
            //
            // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
            // currentTime when scrubbing, but may not provide much performance benefit afterall.
            // Should be tested. Also something has to read the actual current time or the cache will
            // never get updated.
            return this.cache_.currentTime = this.techGet_('currentTime') || 0;
        };

        /**
         * Normally gets the length in time of the video in seconds;
         * in all but the rarest use cases an argument will NOT be passed to the method
         * ```js
         *     var lengthOfVideo = myPlayer.duration();
         * ```
         * **NOTE**: The video must have started loading before the duration can be
         * known, and in the case of Flash, may not be known until the video starts
         * playing.
         *
         * @param {Number} seconds Duration when setting
         * @return {Number} The duration of the video in seconds when getting
         * @method duration
         */

        Player.prototype.duration = function duration(seconds) {
            if (seconds === undefined) {
                return this.cache_.duration || 0;
            }

            seconds = parseFloat(seconds) || 0;

            // Standardize on Inifity for signaling video is live
            if (seconds < 0) {
                seconds = Infinity;
            }

            if (seconds !== this.cache_.duration) {
                // Cache the last set value for optimized scrubbing (esp. Flash)
                this.cache_.duration = seconds;

                if (seconds === Infinity) {
                    this.addClass('vjs-live');
                } else {
                    this.removeClass('vjs-live');
                }

                this.trigger('durationchange');
            }

            return this;
        };

        /**
         * Calculates how much time is left.
         * ```js
         *     var timeLeft = myPlayer.remainingTime();
         * ```
         * Not a native video element function, but useful
         *
         * @return {Number} The time remaining in seconds
         * @method remainingTime
         */

        Player.prototype.remainingTime = function remainingTime() {
            return this.duration() - this.currentTime();
        };

        // http://dev.w3.org/html5/spec/video.html#dom-media-buffered
        // Buffered returns a timerange object.
        // Kind of like an array of portions of the video that have been downloaded.

        /**
         * Get a TimeRange object with the times of the video that have been downloaded
         * If you just want the percent of the video that's been downloaded,
         * use bufferedPercent.
         * ```js
         *     // Number of different ranges of time have been buffered. Usually 1.
         *     numberOfRanges = bufferedTimeRange.length,
         *     // Time in seconds when the first range starts. Usually 0.
         *     firstRangeStart = bufferedTimeRange.start(0),
         *     // Time in seconds when the first range ends
         *     firstRangeEnd = bufferedTimeRange.end(0),
         *     // Length in seconds of the first time range
         *     firstRangeLength = firstRangeEnd - firstRangeStart;
         * ```
         *
         * @return {Object} A mock TimeRange object (following HTML spec)
         * @method buffered
         */

        Player.prototype.buffered = function buffered() {
            var buffered = this.techGet_('buffered');

            if (!buffered || !buffered.length) {
                buffered = _utilsTimeRangesJs.createTimeRange(0, 0);
            }

            return buffered;
        };

        /**
         * Get the percent (as a decimal) of the video that's been downloaded
         * ```js
         *     var howMuchIsDownloaded = myPlayer.bufferedPercent();
         * ```
         * 0 means none, 1 means all.
         * (This method isn't in the HTML5 spec, but it's very convenient)
         *
         * @return {Number} A decimal between 0 and 1 representing the percent
         * @method bufferedPercent
         */

        Player.prototype.bufferedPercent = function bufferedPercent() {
            return _utilsBufferJs.bufferedPercent(this.buffered(), this.duration());
        };

        /**
         * Get the ending time of the last buffered time range
         * This is used in the progress bar to encapsulate all time ranges.
         *
         * @return {Number} The end of the last buffered time range
         * @method bufferedEnd
         */

        Player.prototype.bufferedEnd = function bufferedEnd() {
            var buffered = this.buffered(),
                duration = this.duration(),
                end = buffered.end(buffered.length - 1);

            if (end > duration) {
                end = duration;
            }

            return end;
        };

        /**
         * Get or set the current volume of the media
         * ```js
         *     // get
         *     var howLoudIsIt = myPlayer.volume();
         *     // set
         *     myPlayer.volume(0.5); // Set volume to half
         * ```
         * 0 is off (muted), 1.0 is all the way up, 0.5 is half way.
         *
         * @param  {Number} percentAsDecimal The new volume as a decimal percent
         * @return {Number}              The current volume when getting
         * @return {Player}              self when setting
         * @method volume
         */

        Player.prototype.volume = function volume(percentAsDecimal) {
            var vol = undefined;

            if (percentAsDecimal !== undefined) {
                vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal))); // Force value to between 0 and 1
                this.cache_.volume = vol;
                this.techCall_('setVolume', vol);

                return this;
            }

            // Default to 1 when returning current volume.
            vol = parseFloat(this.techGet_('volume'));
            return isNaN(vol) ? 1 : vol;
        };

        /**
         * Get the current muted state, or turn mute on or off
         * ```js
         *     // get
         *     var isVolumeMuted = myPlayer.muted();
         *     // set
         *     myPlayer.muted(true); // mute the volume
         * ```
         *
         * @param  {Boolean=} muted True to mute, false to unmute
         * @return {Boolean} True if mute is on, false if not when getting
         * @return {Player} self when setting mute
         * @method muted
         */

        Player.prototype.muted = function muted(_muted) {
            if (_muted !== undefined) {
                this.techCall_('setMuted', _muted);
                return this;
            }
            return this.techGet_('muted') || false; // Default to false
        };

        // Check if current tech can support native fullscreen
        // (e.g. with built in controls like iOS, so not our flash swf)
        /**
         * Check to see if fullscreen is supported
         *
         * @return {Boolean}
         * @method supportsFullScreen
         */

        Player.prototype.supportsFullScreen = function supportsFullScreen() {
            return this.techGet_('supportsFullScreen') || false;
        };

        /**
         * Check if the player is in fullscreen mode
         * ```js
         *     // get
         *     var fullscreenOrNot = myPlayer.isFullscreen();
         *     // set
         *     myPlayer.isFullscreen(true); // tell the player it's in fullscreen
         * ```
         * NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
         * property and instead document.fullscreenElement is used. But isFullscreen is
         * still a valuable property for internal player workings.
         *
         * @param  {Boolean=} isFS Update the player's fullscreen state
         * @return {Boolean} true if fullscreen false if not when getting
         * @return {Player} self when setting
         * @method isFullscreen
         */

        Player.prototype.isFullscreen = function isFullscreen(isFS) {
            if (isFS !== undefined) {
                this.isFullscreen_ = !!isFS;
                return this;
            }
            return !!this.isFullscreen_;
        };

        /**
         * Increase the size of the video to full screen
         * ```js
         *     myPlayer.requestFullscreen();
         * ```
         * In some browsers, full screen is not supported natively, so it enters
         * "full window mode", where the video fills the browser window.
         * In browsers and devices that support native full screen, sometimes the
         * browser's default controls will be shown, and not the Video.js custom skin.
         * This includes most mobile devices (iOS, Android) and older versions of
         * Safari.
         *
         * @return {Player} self
         * @method requestFullscreen
         */

        Player.prototype.requestFullscreen = function requestFullscreen() {
            var fsApi = _fullscreenApiJs2['default'];

            this.isFullscreen(true);

            if (fsApi.requestFullscreen) {
                // the browser supports going fullscreen at the element level so we can
                // take the controls fullscreen as well as the video

                // Trigger fullscreenchange event after change
                // We have to specifically add this each time, and remove
                // when canceling fullscreen. Otherwise if there's multiple
                // players on a page, they would all be reacting to the same fullscreen
                // events
                Events.on(_globalDocument2['default'], fsApi.fullscreenchange, Fn.bind(this, function documentFullscreenChange(e) {
                    this.isFullscreen(_globalDocument2['default'][fsApi.fullscreenElement]);

                    // If cancelling fullscreen, remove event listener.
                    if (this.isFullscreen() === false) {
                        Events.off(_globalDocument2['default'], fsApi.fullscreenchange, documentFullscreenChange);
                    }

                    this.trigger('fullscreenchange');
                }));

                this.el_[fsApi.requestFullscreen]();
            } else if (this.tech_.supportsFullScreen()) {
                // we can't take the video.js controls fullscreen but we can go fullscreen
                // with native controls
                this.techCall_('enterFullScreen');
            } else {
                // fullscreen isn't supported so we'll just stretch the video element to
                // fill the viewport
                this.enterFullWindow();
                this.trigger('fullscreenchange');
            }

            return this;
        };

        /**
         * Return the video to its normal size after having been in full screen mode
         * ```js
         *     myPlayer.exitFullscreen();
         * ```
         *
         * @return {Player} self
         * @method exitFullscreen
         */

        Player.prototype.exitFullscreen = function exitFullscreen() {
            var fsApi = _fullscreenApiJs2['default'];
            this.isFullscreen(false);

            // Check for browser element fullscreen support
            if (fsApi.requestFullscreen) {
                _globalDocument2['default'][fsApi.exitFullscreen]();
            } else if (this.tech_.supportsFullScreen()) {
                this.techCall_('exitFullScreen');
            } else {
                this.exitFullWindow();
                this.trigger('fullscreenchange');
            }

            return this;
        };

        /**
         * When fullscreen isn't supported we can stretch the video container to as wide as the browser will let us.
         *
         * @method enterFullWindow
         */

        Player.prototype.enterFullWindow = function enterFullWindow() {
            this.isFullWindow = true;

            // Storing original doc overflow value to return to when fullscreen is off
            this.docOrigOverflow = _globalDocument2['default'].documentElement.style.overflow;

            // Add listener for esc key to exit fullscreen
            Events.on(_globalDocument2['default'], 'keydown', Fn.bind(this, this.fullWindowOnEscKey));

            // Hide any scroll bars
            _globalDocument2['default'].documentElement.style.overflow = 'hidden';

            // Apply fullscreen styles
            Dom.addElClass(_globalDocument2['default'].body, 'vjs-full-window');

            this.trigger('enterFullWindow');
        };

        /**
         * Check for call to either exit full window or full screen on ESC key
         *
         * @param {String} event Event to check for key press
         * @method fullWindowOnEscKey
         */

        Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
            if (event.keyCode === 27) {
                if (this.isFullscreen() === true) {
                    this.exitFullscreen();
                } else {
                    this.exitFullWindow();
                }
            }
        };

        /**
         * Exit full window
         *
         * @method exitFullWindow
         */

        Player.prototype.exitFullWindow = function exitFullWindow() {
            this.isFullWindow = false;
            Events.off(_globalDocument2['default'], 'keydown', this.fullWindowOnEscKey);

            // Unhide scroll bars.
            _globalDocument2['default'].documentElement.style.overflow = this.docOrigOverflow;

            // Remove fullscreen styles
            Dom.removeElClass(_globalDocument2['default'].body, 'vjs-full-window');

            // Resize the box, controller, and poster to original sizes
            // this.positionAll();
            this.trigger('exitFullWindow');
        };

        /**
         * Check whether the player can play a given mimetype
         *
         * @param {String} type The mimetype to check
         * @return {String} 'probably', 'maybe', or '' (empty string)
         * @method canPlayType
         */

        Player.prototype.canPlayType = function canPlayType(type) {
            var can = undefined;

            // Loop through each playback technology in the options order
            for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
                var techName = _utilsToTitleCaseJs2['default'](j[i]);
                var tech = _techTechJs2['default'].getTech(techName);

                // Support old behavior of techs being registered as components.
                // Remove once that deprecated behavior is removed.
                if (!tech) {
                    tech = _componentJs2['default'].getComponent(techName);
                }

                // Check if the current tech is defined before continuing
                if (!tech) {
                    _utilsLogJs2['default'].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
                    continue;
                }

                // Check if the browser supports this technology
                if (tech.isSupported()) {
                    can = tech.canPlayType(type);

                    if (can) {
                        return can;
                    }
                }
            }

            return '';
        };

        /**
         * Select source based on tech-order or source-order
         * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
         * defaults to tech-order selection
         *
         * @param {Array} sources The sources for a media asset
         * @return {Object|Boolean} Object of source and tech order, otherwise false
         * @method selectSource
         */

        Player.prototype.selectSource = function selectSource(sources) {
            var _this3 = this;

            // Get only the techs specified in `techOrder` that exist and are supported by the
            // current platform
            var techs = this.options_.techOrder.map(_utilsToTitleCaseJs2['default']).map(function (techName) {
                // `Component.getComponent(...)` is for support of old behavior of techs
                // being registered as components.
                // Remove once that deprecated behavior is removed.
                return [techName, _techTechJs2['default'].getTech(techName) || _componentJs2['default'].getComponent(techName)];
            }).filter(function (_ref) {
                var techName = _ref[0];
                var tech = _ref[1];

                // Check if the current tech is defined before continuing
                if (tech) {
                    // Check if the browser supports this technology
                    return tech.isSupported();
                }

                _utilsLogJs2['default'].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
                return false;
            });

            // Iterate over each `innerArray` element once per `outerArray` element and execute
            // `tester` with both. If `tester` returns a non-falsy value, exit early and return
            // that value.
            var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {
                var found = undefined;

                outerArray.some(function (outerChoice) {
                    return innerArray.some(function (innerChoice) {
                        found = tester(outerChoice, innerChoice);

                        if (found) {
                            return true;
                        }
                    });
                });

                return found;
            };

            var foundSourceAndTech = undefined;
            var flip = function flip(fn) {
                return function (a, b) {
                    return fn(b, a);
                };
            };
            var finder = function finder(_ref2, source) {
                var techName = _ref2[0];
                var tech = _ref2[1];

                if (tech.canPlaySource(source, _this3.options_[techName.toLowerCase()])) {
                    return { source: source, tech: techName };
                }
            };

            // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
            // to select from them based on their priority.
            if (this.options_.sourceOrder) {
                // Source-first ordering
                foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
            } else {
                // Tech-first ordering
                foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
            }

            return foundSourceAndTech || false;
        };

        /**
         * The source function updates the video source
         * There are three types of variables you can pass as the argument.
         * **URL String**: A URL to the the video file. Use this method if you are sure
         * the current playback technology (HTML5/Flash) can support the source you
         * provide. Currently only MP4 files can be used in both HTML5 and Flash.
         * ```js
         *     myPlayer.src("http://www.example.com/path/to/video.mp4");
         * ```
         * **Source Object (or element):* * A javascript object containing information
         * about the source file. Use this method if you want the player to determine if
         * it can support the file using the type information.
         * ```js
         *     myPlayer.src({ type: "video/mp4", src: "http://www.example.com/path/to/video.mp4" });
         * ```
         * **Array of Source Objects:* * To provide multiple versions of the source so
         * that it can be played using HTML5 across browsers you can use an array of
         * source objects. Video.js will detect which version is supported and load that
         * file.
         * ```js
         *     myPlayer.src([
         *       { type: "video/mp4", src: "http://www.example.com/path/to/video.mp4" },
         *       { type: "video/webm", src: "http://www.example.com/path/to/video.webm" },
         *       { type: "video/ogg", src: "http://www.example.com/path/to/video.ogv" }
         *     ]);
         * ```
         *
         * @param  {String|Object|Array=} source The source URL, object, or array of sources
         * @return {String} The current video source when getting
         * @return {String} The player when setting
         * @method src
         */

        Player.prototype.src = function src(source) {
            if (source === undefined) {
                return this.techGet_('src');
            }

            var currentTech = _techTechJs2['default'].getTech(this.techName_);
            // Support old behavior of techs being registered as components.
            // Remove once that deprecated behavior is removed.
            if (!currentTech) {
                currentTech = _componentJs2['default'].getComponent(this.techName_);
            }

            // case: Array of source objects to choose from and pick the best to play
            if (Array.isArray(source)) {
                this.sourceList_(source);

                // case: URL String (http://myvideo...)
            } else if (typeof source === 'string') {
                // create a source object from the string
                this.src({ src: source });

                // case: Source object { src: '', type: '' ... }
            } else if (source instanceof Object) {
                // check if the source has a type and the loaded tech cannot play the source
                // if there's no type we'll just try the current tech
                if (source.type && !currentTech.canPlaySource(source, this.options_[this.techName_.toLowerCase()])) {
                    // create a source list with the current source and send through
                    // the tech loop to check for a compatible technology
                    this.sourceList_([source]);
                } else {
                    this.cache_.src = source.src;
                    this.currentType_ = source.type || '';

                    // wait until the tech is ready to set the source
                    this.ready(function () {

                        // The setSource tech method was added with source handlers
                        // so older techs won't support it
                        // We need to check the direct prototype for the case where subclasses
                        // of the tech do not support source handlers
                        if (currentTech.prototype.hasOwnProperty('setSource')) {
                            this.techCall_('setSource', source);
                        } else {
                            this.techCall_('src', source.src);
                        }

                        if (this.options_.preload === 'auto') {
                            this.load();
                        }

                        if (this.options_.autoplay) {
                            this.play();
                        }

                        // Set the source synchronously if possible (#2326)
                    }, true);
                }
            }

            return this;
        };

        /**
         * Handle an array of source objects
         *
         * @param  {Array} sources Array of source objects
         * @private
         * @method sourceList_
         */

        Player.prototype.sourceList_ = function sourceList_(sources) {
            var sourceTech = this.selectSource(sources);

            if (sourceTech) {
                if (sourceTech.tech === this.techName_) {
                    // if this technology is already loaded, set the source
                    this.src(sourceTech.source);
                } else {
                    // load this technology with the chosen source
                    this.loadTech_(sourceTech.tech, sourceTech.source);
                }
            } else {
                // We need to wrap this in a timeout to give folks a chance to add error event handlers
                this.setTimeout(function () {
                    this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
                }, 0);

                // we could not find an appropriate tech, but let's still notify the delegate that this is it
                // this needs a better comment about why this is needed
                this.triggerReady();
            }
        };

        /**
         * Begin loading the src data.
         *
         * @return {Player} Returns the player
         * @method load
         */

        Player.prototype.load = function load() {
            this.techCall_('load');
            return this;
        };

        /**
         * Reset the player. Loads the first tech in the techOrder,
         * and calls `reset` on the tech`.
         *
         * @return {Player} Returns the player
         * @method reset
         */

        Player.prototype.reset = function reset() {
            this.loadTech_(_utilsToTitleCaseJs2['default'](this.options_.techOrder[0]), null);
            this.techCall_('reset');
            return this;
        };

        /**
         * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
         * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.
         *
         * @return {String} The current source
         * @method currentSrc
         */

        Player.prototype.currentSrc = function currentSrc() {
            return this.techGet_('currentSrc') || this.cache_.src || '';
        };

        /**
         * Get the current source type e.g. video/mp4
         * This can allow you rebuild the current source object so that you could load the same
         * source and tech later
         *
         * @return {String} The source MIME type
         * @method currentType
         */

        Player.prototype.currentType = function currentType() {
            return this.currentType_ || '';
        };

        /**
         * Get or set the preload attribute
         *
         * @param {Boolean} value Boolean to determine if preload should be used
         * @return {String} The preload attribute value when getting
         * @return {Player} Returns the player when setting
         * @method preload
         */

        Player.prototype.preload = function preload(value) {
            if (value !== undefined) {
                this.techCall_('setPreload', value);
                this.options_.preload = value;
                return this;
            }
            return this.techGet_('preload');
        };

        /**
         * Get or set the autoplay attribute.
         *
         * @param {Boolean} value Boolean to determine if video should autoplay
         * @return {String} The autoplay attribute value when getting
         * @return {Player} Returns the player when setting
         * @method autoplay
         */

        Player.prototype.autoplay = function autoplay(value) {
            if (value !== undefined) {
                this.techCall_('setAutoplay', value);
                this.options_.autoplay = value;
                return this;
            }
            return this.techGet_('autoplay', value);
        };

        /**
         * Get or set the loop attribute on the video element.
         *
         * @param {Boolean} value Boolean to determine if video should loop
         * @return {String} The loop attribute value when getting
         * @return {Player} Returns the player when setting
         * @method loop
         */

        Player.prototype.loop = function loop(value) {
            if (value !== undefined) {
                this.techCall_('setLoop', value);
                this.options_['loop'] = value;
                return this;
            }
            return this.techGet_('loop');
        };

        /**
         * Get or set the poster image source url
         *
         * ##### EXAMPLE:
         * ```js
         *     // get
         *     var currentPoster = myPlayer.poster();
         *     // set
         *     myPlayer.poster('http://example.com/myImage.jpg');
         * ```
         *
         * @param  {String=} src Poster image source URL
         * @return {String} poster URL when getting
         * @return {Player} self when setting
         * @method poster
         */

        Player.prototype.poster = function poster(src) {
            if (src === undefined) {
                return this.poster_;
            }

            // The correct way to remove a poster is to set as an empty string
            // other falsey values will throw errors
            if (!src) {
                src = '';
            }

            // update the internal poster variable
            this.poster_ = src;

            // update the tech's poster
            this.techCall_('setPoster', src);

            // alert components that the poster has been set
            this.trigger('posterchange');

            return this;
        };

        /**
         * Some techs (e.g. YouTube) can provide a poster source in an
         * asynchronous way. We want the poster component to use this
         * poster source so that it covers up the tech's controls.
         * (YouTube's play button). However we only want to use this
         * soruce if the player user hasn't set a poster through
         * the normal APIs.
         *
         * @private
         * @method handleTechPosterChange_
         */

        Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {
            if (!this.poster_ && this.tech_ && this.tech_.poster) {
                this.poster_ = this.tech_.poster() || '';

                // Let components know the poster has changed
                this.trigger('posterchange');
            }
        };

        /**
         * Get or set whether or not the controls are showing.
         *
         * @param  {Boolean} bool Set controls to showing or not
         * @return {Boolean}    Controls are showing
         * @method controls
         */

        Player.prototype.controls = function controls(bool) {
            if (bool !== undefined) {
                bool = !!bool; // force boolean
                // Don't trigger a change event unless it actually changed
                if (this.controls_ !== bool) {
                    this.controls_ = bool;

                    if (this.usingNativeControls()) {
                        this.techCall_('setControls', bool);
                    }

                    if (bool) {
                        this.removeClass('vjs-controls-disabled');
                        this.addClass('vjs-controls-enabled');
                        this.trigger('controlsenabled');

                        if (!this.usingNativeControls()) {
                            this.addTechControlsListeners_();
                        }
                    } else {
                        this.removeClass('vjs-controls-enabled');
                        this.addClass('vjs-controls-disabled');
                        this.trigger('controlsdisabled');

                        if (!this.usingNativeControls()) {
                            this.removeTechControlsListeners_();
                        }
                    }
                }
                return this;
            }
            return !!this.controls_;
        };

        /**
         * Toggle native controls on/off. Native controls are the controls built into
         * devices (e.g. default iPhone controls), Flash, or other techs
         * (e.g. Vimeo Controls)
         * **This should only be set by the current tech, because only the tech knows
         * if it can support native controls**
         *
         * @param  {Boolean} bool    True signals that native controls are on
         * @return {Player}      Returns the player
         * @private
         * @method usingNativeControls
         */

        Player.prototype.usingNativeControls = function usingNativeControls(bool) {
            if (bool !== undefined) {
                bool = !!bool; // force boolean
                // Don't trigger a change event unless it actually changed
                if (this.usingNativeControls_ !== bool) {
                    this.usingNativeControls_ = bool;
                    if (bool) {
                        this.addClass('vjs-using-native-controls');

                        /**
                         * player is using the native device controls
                         *
                         * @event usingnativecontrols
                         * @memberof Player
                         * @instance
                         * @private
                         */
                        this.trigger('usingnativecontrols');
                    } else {
                        this.removeClass('vjs-using-native-controls');

                        /**
                         * player is using the custom HTML controls
                         *
                         * @event usingcustomcontrols
                         * @memberof Player
                         * @instance
                         * @private
                         */
                        this.trigger('usingcustomcontrols');
                    }
                }
                return this;
            }
            return !!this.usingNativeControls_;
        };

        /**
         * Set or get the current MediaError
         *
         * @param  {*} err A MediaError or a String/Number to be turned into a MediaError
         * @return {MediaError|null}     when getting
         * @return {Player}              when setting
         * @method error
         */

        Player.prototype.error = function error(err) {
            if (err === undefined) {
                return this.error_ || null;
            }

            // restoring to default
            if (err === null) {
                this.error_ = err;
                this.removeClass('vjs-error');
                if (this.errorDisplay) {
                    this.errorDisplay.close();
                }
                return this;
            }

            this.error_ = new _mediaErrorJs2['default'](err);

            // add the vjs-error classname to the player
            this.addClass('vjs-error');

            // log the name of the error type and any message
            // ie8 just logs "[object object]" if you just log the error object
            _utilsLogJs2['default'].error('(CODE:' + this.error_.code + ' ' + _mediaErrorJs2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);

            // fire an error event on the player
            this.trigger('error');

            return this;
        };

        /**
         * Returns whether or not the player is in the "ended" state.
         *
         * @return {Boolean} True if the player is in the ended state, false if not.
         * @method ended
         */

        Player.prototype.ended = function ended() {
            return this.techGet_('ended');
        };

        /**
         * Returns whether or not the player is in the "seeking" state.
         *
         * @return {Boolean} True if the player is in the seeking state, false if not.
         * @method seeking
         */

        Player.prototype.seeking = function seeking() {
            return this.techGet_('seeking');
        };

        /**
         * Returns the TimeRanges of the media that are currently available
         * for seeking to.
         *
         * @return {TimeRanges} the seekable intervals of the media timeline
         * @method seekable
         */

        Player.prototype.seekable = function seekable() {
            return this.techGet_('seekable');
        };

        /**
         * Report user activity
         *
         * @param {Object} event Event object
         * @method reportUserActivity
         */

        Player.prototype.reportUserActivity = function reportUserActivity(event) {
            this.userActivity_ = true;
        };

        /**
         * Get/set if user is active
         *
         * @param {Boolean} bool Value when setting
         * @return {Boolean} Value if user is active user when getting
         * @method userActive
         */

        Player.prototype.userActive = function userActive(bool) {
            if (bool !== undefined) {
                bool = !!bool;
                if (bool !== this.userActive_) {
                    this.userActive_ = bool;
                    if (bool) {
                        // If the user was inactive and is now active we want to reset the
                        // inactivity timer
                        this.userActivity_ = true;
                        this.removeClass('vjs-user-inactive');
                        this.addClass('vjs-user-active');
                        this.trigger('useractive');
                    } else {
                        // We're switching the state to inactive manually, so erase any other
                        // activity
                        this.userActivity_ = false;

                        // Chrome/Safari/IE have bugs where when you change the cursor it can
                        // trigger a mousemove event. This causes an issue when you're hiding
                        // the cursor when the user is inactive, and a mousemove signals user
                        // activity. Making it impossible to go into inactive mode. Specifically
                        // this happens in fullscreen when we really need to hide the cursor.
                        //
                        // When this gets resolved in ALL browsers it can be removed
                        // https://code.google.com/p/chromium/issues/detail?id=103041
                        if (this.tech_) {
                            this.tech_.one('mousemove', function (e) {
                                e.stopPropagation();
                                e.preventDefault();
                            });
                        }

                        this.removeClass('vjs-user-active');
                        this.addClass('vjs-user-inactive');
                        this.trigger('userinactive');
                    }
                }
                return this;
            }
            return this.userActive_;
        };

        /**
         * Listen for user activity based on timeout value
         *
         * @private
         * @method listenForUserActivity_
         */

        Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {
            var mouseInProgress = undefined,
                lastMoveX = undefined,
                lastMoveY = undefined;

            var handleActivity = Fn.bind(this, this.reportUserActivity);

            var handleMouseMove = function handleMouseMove(e) {
                // #1068 - Prevent mousemove spamming
                // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
                if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
                    lastMoveX = e.screenX;
                    lastMoveY = e.screenY;
                    handleActivity();
                }
            };

            var handleMouseDown = function handleMouseDown() {
                handleActivity();
                // For as long as the they are touching the device or have their mouse down,
                // we consider them active even if they're not moving their finger or mouse.
                // So we want to continue to update that they are active
                this.clearInterval(mouseInProgress);
                // Setting userActivity=true now and setting the interval to the same time
                // as the activityCheck interval (250) should ensure we never miss the
                // next activityCheck
                mouseInProgress = this.setInterval(handleActivity, 250);
            };

            var handleMouseUp = function handleMouseUp(event) {
                handleActivity();
                // Stop the interval that maintains activity if the mouse/touch is down
                this.clearInterval(mouseInProgress);
            };

            // Any mouse movement will be considered user activity
            this.on('mousedown', handleMouseDown);
            this.on('mousemove', handleMouseMove);
            this.on('mouseup', handleMouseUp);

            // Listen for keyboard navigation
            // Shouldn't need to use inProgress interval because of key repeat
            this.on('keydown', handleActivity);
            this.on('keyup', handleActivity);

            // Run an interval every 250 milliseconds instead of stuffing everything into
            // the mousemove/touchmove function itself, to prevent performance degradation.
            // `this.reportUserActivity` simply sets this.userActivity_ to true, which
            // then gets picked up by this loop
            // http://ejohn.org/blog/learning-from-twitter/
            var inactivityTimeout = undefined;
            var activityCheck = this.setInterval(function () {
                // Check to see if mouse/touch activity has happened
                if (this.userActivity_) {
                    // Reset the activity tracker
                    this.userActivity_ = false;

                    // If the user state was inactive, set the state to active
                    this.userActive(true);

                    // Clear any existing inactivity timeout to start the timer over
                    this.clearTimeout(inactivityTimeout);

                    var timeout = this.options_['inactivityTimeout'];
                    if (timeout > 0) {
                        // In <timeout> milliseconds, if no more activity has occurred the
                        // user will be considered inactive
                        inactivityTimeout = this.setTimeout(function () {
                            // Protect against the case where the inactivityTimeout can trigger just
                            // before the next user activity is picked up by the activityCheck loop
                            // causing a flicker
                            if (!this.userActivity_) {
                                this.userActive(false);
                            }
                        }, timeout);
                    }
                }
            }, 250);
        };

        /**
         * Gets or sets the current playback rate.  A playback rate of
         * 1.0 represents normal speed and 0.5 would indicate half-speed
         * playback, for instance.
         * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
         *
         * @param  {Number} rate    New playback rate to set.
         * @return {Number}         Returns the new playback rate when setting
         * @return {Number}         Returns the current playback rate when getting
         * @method playbackRate
         */

        Player.prototype.playbackRate = function playbackRate(rate) {
            if (rate !== undefined) {
                this.techCall_('setPlaybackRate', rate);
                return this;
            }

            if (this.tech_ && this.tech_['featuresPlaybackRate']) {
                return this.techGet_('playbackRate');
            } else {
                return 1.0;
            }
        };

        /**
         * Gets or sets the audio flag
         *
         * @param  {Boolean} bool    True signals that this is an audio player.
         * @return {Boolean}         Returns true if player is audio, false if not when getting
         * @return {Player}      Returns the player if setting
         * @private
         * @method isAudio
         */

        Player.prototype.isAudio = function isAudio(bool) {
            if (bool !== undefined) {
                this.isAudio_ = !!bool;
                return this;
            }

            return !!this.isAudio_;
        };

        /**
         * Returns the current state of network activity for the element, from
         * the codes in the list below.
         * - NETWORK_EMPTY (numeric value 0)
         *   The element has not yet been initialised. All attributes are in
         *   their initial states.
         * - NETWORK_IDLE (numeric value 1)
         *   The element's resource selection algorithm is active and has
         *   selected a resource, but it is not actually using the network at
         *   this time.
         * - NETWORK_LOADING (numeric value 2)
         *   The user agent is actively trying to download data.
         * - NETWORK_NO_SOURCE (numeric value 3)
         *   The element's resource selection algorithm is active, but it has
         *   not yet found a resource to use.
         *
         * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
         * @return {Number} the current network activity state
         * @method networkState
         */

        Player.prototype.networkState = function networkState() {
            return this.techGet_('networkState');
        };

        /**
         * Returns a value that expresses the current state of the element
         * with respect to rendering the current playback position, from the
         * codes in the list below.
         * - HAVE_NOTHING (numeric value 0)
         *   No information regarding the media resource is available.
         * - HAVE_METADATA (numeric value 1)
         *   Enough of the resource has been obtained that the duration of the
         *   resource is available.
         * - HAVE_CURRENT_DATA (numeric value 2)
         *   Data for the immediate current playback position is available.
         * - HAVE_FUTURE_DATA (numeric value 3)
         *   Data for the immediate current playback position is available, as
         *   well as enough data for the user agent to advance the current
         *   playback position in the direction of playback.
         * - HAVE_ENOUGH_DATA (numeric value 4)
         *   The user agent estimates that enough data is available for
         *   playback to proceed uninterrupted.
         *
         * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
         * @return {Number} the current playback rendering state
         * @method readyState
         */

        Player.prototype.readyState = function readyState() {
            return this.techGet_('readyState');
        };

        /**
         * Get a video track list
         * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
         *
         * @return {VideoTrackList} thes current video track list
         * @method videoTracks
         */

        Player.prototype.videoTracks = function videoTracks() {
            // if we have not yet loadTech_, we create videoTracks_
            // these will be passed to the tech during loading
            if (!this.tech_) {
                this.videoTracks_ = this.videoTracks_ || new _tracksVideoTrackListJs2['default']();
                return this.videoTracks_;
            }

            return this.tech_.videoTracks();
        };

        /**
         * Get an audio track list
         * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
         *
         * @return {AudioTrackList} thes current audio track list
         * @method audioTracks
         */

        Player.prototype.audioTracks = function audioTracks() {
            // if we have not yet loadTech_, we create videoTracks_
            // these will be passed to the tech during loading
            if (!this.tech_) {
                this.audioTracks_ = this.audioTracks_ || new _tracksAudioTrackListJs2['default']();
                return this.audioTracks_;
            }

            return this.tech_.audioTracks();
        };

        /*
         * Text tracks are tracks of timed text events.
         * Captions - text displayed over the video for the hearing impaired
         * Subtitles - text displayed over the video for those who don't understand language in the video
         * Chapters - text displayed in a menu allowing the user to jump to particular points (chapters) in the video
         * Descriptions (not supported yet) - audio descriptions that are read back to the user by a screen reading device
         */

        /**
         * Get an array of associated text tracks. captions, subtitles, chapters, descriptions
         * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
         *
         * @return {Array}           Array of track objects
         * @method textTracks
         */

        Player.prototype.textTracks = function textTracks() {
            // cannot use techGet_ directly because it checks to see whether the tech is ready.
            // Flash is unlikely to be ready in time but textTracks should still work.
            return this.tech_ && this.tech_['textTracks']();
        };

        /**
         * Get an array of remote text tracks
         *
         * @return {Array}
         * @method remoteTextTracks
         */

        Player.prototype.remoteTextTracks = function remoteTextTracks() {
            return this.tech_ && this.tech_['remoteTextTracks']();
        };

        /**
         * Get an array of remote html track elements
         *
         * @return {HTMLTrackElement[]}
         * @method remoteTextTrackEls
         */

        Player.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
            return this.tech_ && this.tech_['remoteTextTrackEls']();
        };

        /**
         * Add a text track
         * In addition to the W3C settings we allow adding additional info through options.
         * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
         *
         * @param {String}  kind        Captions, subtitles, chapters, descriptions, or metadata
         * @param {String=} label       Optional label
         * @param {String=} language    Optional language
         * @method addTextTrack
         */

        Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {
            return this.tech_ && this.tech_['addTextTrack'](kind, label, language);
        };

        /**
         * Add a remote text track
         *
         * @param {Object} options    Options for remote text track
         * @method addRemoteTextTrack
         */

        Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options) {
            return this.tech_ && this.tech_['addRemoteTextTrack'](options);
        };

        /**
         * Remove a remote text track
         *
         * @param {Object} track    Remote text track to remove
         * @method removeRemoteTextTrack
         */
            // destructure the input into an object with a track argument, defaulting to arguments[0]
            // default the whole argument to an empty object if nothing was passed in

        Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {
            var _ref3 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            var _ref3$track = _ref3.track;
            var track = _ref3$track === undefined ? arguments[0] : _ref3$track;
            // jshint ignore:line
            this.tech_ && this.tech_['removeRemoteTextTrack'](track);
        };

        /**
         * Get video width
         *
         * @return {Number} Video width
         * @method videoWidth
         */

        Player.prototype.videoWidth = function videoWidth() {
            return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
        };

        /**
         * Get video height
         *
         * @return {Number} Video height
         * @method videoHeight
         */

        Player.prototype.videoHeight = function videoHeight() {
            return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
        };

        // Methods to add support for
        // initialTime: function(){ return this.techCall_('initialTime'); },
        // startOffsetTime: function(){ return this.techCall_('startOffsetTime'); },
        // played: function(){ return this.techCall_('played'); },
        // defaultPlaybackRate: function(){ return this.techCall_('defaultPlaybackRate'); },
        // defaultMuted: function(){ return this.techCall_('defaultMuted'); }

        /**
         * The player's language code
         * NOTE: The language should be set in the player options if you want the
         * the controls to be built with a specific language. Changing the lanugage
         * later will not update controls text.
         *
         * @param {String} code  The locale string
         * @return {String}      The locale string when getting
         * @return {Player}      self when setting
         * @method language
         */

        Player.prototype.language = function language(code) {
            if (code === undefined) {
                return this.language_;
            }

            this.language_ = ('' + code).toLowerCase();
            return this;
        };

        /**
         * Get the player's language dictionary
         * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
         * Languages specified directly in the player options have precedence
         *
         * @return {Array} Array of languages
         * @method languages
         */

        Player.prototype.languages = function languages() {
            return _utilsMergeOptionsJs2['default'](Player.prototype.options_.languages, this.languages_);
        };

        /**
         * Converts track info to JSON
         *
         * @return {Object} JSON object of options
         * @method toJSON
         */

        Player.prototype.toJSON = function toJSON() {
            var options = _utilsMergeOptionsJs2['default'](this.options_);
            var tracks = options.tracks;

            options.tracks = [];

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];

                // deep merge tracks and null out player so no circular references
                track = _utilsMergeOptionsJs2['default'](track);
                track.player = undefined;
                options.tracks[i] = track;
            }

            return options;
        };

        /**
         * Creates a simple modal dialog (an instance of the `ModalDialog`
         * component) that immediately overlays the player with arbitrary
         * content and removes itself when closed.
         *
         * @param {String|Function|Element|Array|Null} content
         *        Same as `ModalDialog#content`'s param of the same name.
         *
         *        The most straight-forward usage is to provide a string or DOM
         *        element.
         *
         * @param {Object} [options]
         *        Extra options which will be passed on to the `ModalDialog`.
         *
         * @return {ModalDialog}
         */

        Player.prototype.createModal = function createModal(content, options) {
            var player = this;

            options = options || {};
            options.content = content || '';

            var modal = new _modalDialog2['default'](player, options);

            player.addChild(modal);
            modal.on('dispose', function () {
                player.removeChild(modal);
            });

            return modal.open();
        };

        /**
         * Gets tag settings
         *
         * @param {Element} tag The player tag
         * @return {Array} An array of sources and track objects
         * @static
         * @method getTagSettings
         */

        Player.getTagSettings = function getTagSettings(tag) {
            var baseOptions = {
                'sources': [],
                'tracks': []
            };

            var tagOptions = Dom.getElAttributes(tag);
            var dataSetup = tagOptions['data-setup'];

            // Check if data-setup attr exists.
            if (dataSetup !== null) {
                // Parse options JSON

                var _safeParseTuple = _safeJsonParseTuple2['default'](dataSetup || '{}');

                var err = _safeParseTuple[0];
                var data = _safeParseTuple[1];

                if (err) {
                    _utilsLogJs2['default'].error(err);
                }
                _objectAssign2['default'](tagOptions, data);
            }

            _objectAssign2['default'](baseOptions, tagOptions);

            // Get tag children settings
            if (tag.hasChildNodes()) {
                var children = tag.childNodes;

                for (var i = 0, j = children.length; i < j; i++) {
                    var child = children[i];
                    // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
                    var childName = child.nodeName.toLowerCase();
                    if (childName === 'source') {
                        baseOptions.sources.push(Dom.getElAttributes(child));
                    } else if (childName === 'track') {
                        baseOptions.tracks.push(Dom.getElAttributes(child));
                    }
                }
            }

            return baseOptions;
        };

        return Player;
    })(_componentJs2['default']);

    Player.players = {};

    var navigator = _globalWindow2['default'].navigator;
    /*
     * Player instance options, surfaced using options
     * options = Player.prototype.options_
     * Make changes in options, not here.
     *
     * @type {Object}
     * @private
     */
    Player.prototype.options_ = {
        // Default order of fallback technology
        techOrder: ['html5', 'flash'],
        // techOrder: ['flash','html5'],

        html5: {},
        flash: {},

        // defaultVolume: 0.85,
        defaultVolume: 0.00, // The freakin seaguls are driving me crazy!

        // default inactivity timeout
        inactivityTimeout: 2000,

        // default playback rates
        playbackRates: [],
        // Add playback rate selection by adding rates
        // 'playbackRates': [0.5, 1, 1.5, 2],

        // Included control sets
        children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],

        language: navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language || 'en',

        // locales and their language translations
        languages: {},

        // Default message to show when a video cannot be played.
        notSupportedMessage: 'No compatible source was found for this media.'
    };

    /**
     * Fired when the user agent begins looking for media data
     *
     * @event loadstart
     */
    Player.prototype.handleTechLoadStart_;

    /**
     * Fired when the player has initial duration and dimension information
     *
     * @event loadedmetadata
     */
    Player.prototype.handleLoadedMetaData_;

    /**
     * Fired when the player receives text data
     *
     * @event textdata
     */
    Player.prototype.handleTextData_;

    /**
     * Fired when the player has downloaded data at the current playback position
     *
     * @event loadeddata
     */
    Player.prototype.handleLoadedData_;

    /**
     * Fired when the user is active, e.g. moves the mouse over the player
     *
     * @event useractive
     */
    Player.prototype.handleUserActive_;

    /**
     * Fired when the user is inactive, e.g. a short delay after the last mouse move or control interaction
     *
     * @event userinactive
     */
    Player.prototype.handleUserInactive_;

    /**
     * Fired when the current playback position has changed *
     * During playback this is fired every 15-250 milliseconds, depending on the
     * playback technology in use.
     *
     * @event timeupdate
     */
    Player.prototype.handleTimeUpdate_;

    /**
     * Fired when video playback ends
     *
     * @event ended
     */
    Player.prototype.handleTechEnded_;

    /**
     * Fired when the volume changes
     *
     * @event volumechange
     */
    Player.prototype.handleVolumeChange_;

    /**
     * Fired when an error occurs
     *
     * @event error
     */
    Player.prototype.handleError_;

    Player.prototype.flexNotSupported_ = function () {
        var elem = _globalDocument2['default'].createElement('i');

        // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
        // common flex features that we can rely on when checking for flex support.
        return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style || 'msFlexOrder' in elem.style) /* IE10-specific (2012 flex spec)  */;
    };

    _componentJs2['default'].registerComponent('Player', Player);
    exports['default'] = Player;
    module.exports = exports['default'];
// If empty string, make it a parsable json object.

},{"./big-play-button.js":63,"./component.js":67,"./control-bar/control-bar.js":70,"./error-display.js":103,"./fullscreen-api.js":106,"./loading-spinner.js":107,"./media-error.js":108,"./modal-dialog":112,"./poster-image.js":117,"./tech/html5.js":122,"./tech/loader.js":123,"./tech/tech.js":124,"./tracks/audio-track-list.js":125,"./tracks/text-track-display.js":130,"./tracks/text-track-list-converter.js":131,"./tracks/text-track-settings.js":133,"./tracks/video-track-list.js":138,"./utils/browser.js":140,"./utils/buffer.js":141,"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/guid.js":146,"./utils/log.js":147,"./utils/merge-options.js":148,"./utils/stylesheet.js":149,"./utils/time-ranges.js":150,"./utils/to-title-case.js":151,"global/document":1,"global/window":2,"object.assign":45,"safe-json-parse/tuple":54}],114:[function(_dereq_,module,exports){
    /**
     * @file plugins.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _playerJs = _dereq_('./player.js');

    var _playerJs2 = _interopRequireDefault(_playerJs);

    /**
     * The method for registering a video.js plugin
     *
     * @param  {String} name The name of the plugin
     * @param  {Function} init The function that is run when the player inits
     * @method plugin
     */
    var plugin = function plugin(name, init) {
        _playerJs2['default'].prototype[name] = init;
    };

    exports['default'] = plugin;
    module.exports = exports['default'];

},{"./player.js":113}],115:[function(_dereq_,module,exports){
    /**
     * @file popup-button.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _clickableComponentJs = _dereq_('../clickable-component.js');

    var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

    var _componentJs = _dereq_('../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _popupJs = _dereq_('./popup.js');

    var _popupJs2 = _interopRequireDefault(_popupJs);

    var _utilsDomJs = _dereq_('../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');

    var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

    /**
     * A button class with a popup control
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends ClickableComponent
     * @class PopupButton
     */

    var PopupButton = (function (_ClickableComponent) {
        _inherits(PopupButton, _ClickableComponent);

        function PopupButton(player) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            _classCallCheck(this, PopupButton);

            _ClickableComponent.call(this, player, options);

            this.update();
        }

        /**
         * Update popup
         *
         * @method update
         */

        PopupButton.prototype.update = function update() {
            var popup = this.createPopup();

            if (this.popup) {
                this.removeChild(this.popup);
            }

            this.popup = popup;
            this.addChild(popup);

            if (this.items && this.items.length === 0) {
                this.hide();
            } else if (this.items && this.items.length > 1) {
                this.show();
            }
        };

        /**
         * Create popup - Override with specific functionality for component
         *
         * @return {Popup} The constructed popup
         * @method createPopup
         */

        PopupButton.prototype.createPopup = function createPopup() {};

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        PopupButton.prototype.createEl = function createEl() {
            return _ClickableComponent.prototype.createEl.call(this, 'div', {
                className: this.buildCSSClass()
            });
        };

        /**
         * Allow sub components to stack CSS class names
         *
         * @return {String} The constructed class name
         * @method buildCSSClass
         */

        PopupButton.prototype.buildCSSClass = function buildCSSClass() {
            var menuButtonClass = 'vjs-menu-button';

            // If the inline option is passed, we want to use different styles altogether.
            if (this.options_.inline === true) {
                menuButtonClass += '-inline';
            } else {
                menuButtonClass += '-popup';
            }

            return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);
        };

        return PopupButton;
    })(_clickableComponentJs2['default']);

    _componentJs2['default'].registerComponent('PopupButton', PopupButton);
    exports['default'] = PopupButton;
    module.exports = exports['default'];

},{"../clickable-component.js":65,"../component.js":67,"../utils/dom.js":142,"../utils/fn.js":144,"../utils/to-title-case.js":151,"./popup.js":116}],116:[function(_dereq_,module,exports){
    /**
     * @file popup.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsDomJs = _dereq_('../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsEventsJs = _dereq_('../utils/events.js');

    var Events = _interopRequireWildcard(_utilsEventsJs);

    /**
     * The Popup component is used to build pop up controls.
     *
     * @extends Component
     * @class Popup
     */

    var Popup = (function (_Component) {
        _inherits(Popup, _Component);

        function Popup() {
            _classCallCheck(this, Popup);

            _Component.apply(this, arguments);
        }

        /**
         * Add a popup item to the popup
         *
         * @param {Object|String} component Component or component type to add
         * @method addItem
         */

        Popup.prototype.addItem = function addItem(component) {
            this.addChild(component);
            component.on('click', Fn.bind(this, function () {
                this.unlockShowing();
            }));
        };

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        Popup.prototype.createEl = function createEl() {
            var contentElType = this.options_.contentElType || 'ul';
            this.contentEl_ = Dom.createEl(contentElType, {
                className: 'vjs-menu-content'
            });
            var el = _Component.prototype.createEl.call(this, 'div', {
                append: this.contentEl_,
                className: 'vjs-menu'
            });
            el.appendChild(this.contentEl_);

            // Prevent clicks from bubbling up. Needed for Popup Buttons,
            // where a click on the parent is significant
            Events.on(el, 'click', function (event) {
                event.preventDefault();
                event.stopImmediatePropagation();
            });

            return el;
        };

        return Popup;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('Popup', Popup);
    exports['default'] = Popup;
    module.exports = exports['default'];

},{"../component.js":67,"../utils/dom.js":142,"../utils/events.js":143,"../utils/fn.js":144}],117:[function(_dereq_,module,exports){
    /**
     * @file poster-image.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _clickableComponentJs = _dereq_('./clickable-component.js');

    var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

    var _componentJs = _dereq_('./component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsFnJs = _dereq_('./utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsDomJs = _dereq_('./utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsBrowserJs = _dereq_('./utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    /**
     * The component that handles showing the poster image.
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Button
     * @class PosterImage
     */

    var PosterImage = (function (_ClickableComponent) {
        _inherits(PosterImage, _ClickableComponent);

        function PosterImage(player, options) {
            _classCallCheck(this, PosterImage);

            _ClickableComponent.call(this, player, options);

            this.update();
            player.on('posterchange', Fn.bind(this, this.update));
        }

        /**
         * Clean up the poster image
         *
         * @method dispose
         */

        PosterImage.prototype.dispose = function dispose() {
            this.player().off('posterchange', this.update);
            _ClickableComponent.prototype.dispose.call(this);
        };

        /**
         * Create the poster's image element
         *
         * @return {Element}
         * @method createEl
         */

        PosterImage.prototype.createEl = function createEl() {
            var el = Dom.createEl('div', {
                className: 'vjs-poster',

                // Don't want poster to be tabbable.
                tabIndex: -1
            });

            // To ensure the poster image resizes while maintaining its original aspect
            // ratio, use a div with `background-size` when available. For browsers that
            // do not support `background-size` (e.g. IE8), fall back on using a regular
            // img element.
            if (!browser.BACKGROUND_SIZE_SUPPORTED) {
                this.fallbackImg_ = Dom.createEl('img');
                el.appendChild(this.fallbackImg_);
            }

            return el;
        };

        /**
         * Event handler for updates to the player's poster source
         *
         * @method update
         */

        PosterImage.prototype.update = function update() {
            var url = this.player().poster();

            this.setSrc(url);

            // If there's no poster source we should display:none on this component
            // so it's not still clickable or right-clickable
            if (url) {
                this.show();
            } else {
                this.hide();
            }
        };

        /**
         * Set the poster source depending on the display method
         *
         * @param {String} url The URL to the poster source
         * @method setSrc
         */

        PosterImage.prototype.setSrc = function setSrc(url) {
            if (this.fallbackImg_) {
                this.fallbackImg_.src = url;
            } else {
                var backgroundImage = '';
                // Any falsey values should stay as an empty string, otherwise
                // this will throw an extra error
                if (url) {
                    backgroundImage = 'url("' + url + '")';
                }

                this.el_.style.backgroundImage = backgroundImage;
            }
        };

        /**
         * Event handler for clicks on the poster image
         *
         * @method handleClick
         */

        PosterImage.prototype.handleClick = function handleClick() {
            // We don't want a click to trigger playback when controls are disabled
            // but CSS should be hiding the poster to prevent that from happening
            if (this.player_.paused()) {
                this.player_.play();
            } else {
                this.player_.pause();
            }
        };

        return PosterImage;
    })(_clickableComponentJs2['default']);

    _componentJs2['default'].registerComponent('PosterImage', PosterImage);
    exports['default'] = PosterImage;
    module.exports = exports['default'];

},{"./clickable-component.js":65,"./component.js":67,"./utils/browser.js":140,"./utils/dom.js":142,"./utils/fn.js":144}],118:[function(_dereq_,module,exports){
    /**
     * @file setup.js
     *
     * Functions for automatically setting up a player
     * based on the data-setup attribute of the video tag
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    var _utilsEventsJs = _dereq_('./utils/events.js');

    var Events = _interopRequireWildcard(_utilsEventsJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _windowLoaded = false;
    var videojs = undefined;

// Automatically set up any tags that have a data-setup attribute
    var autoSetup = function autoSetup() {
        // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*
        // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
        // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
        // var mediaEls = vids.concat(audios);

        // Because IE8 doesn't support calling slice on a node list, we need to loop through each list of elements
        // to build up a new, combined list of elements.
        var vids = _globalDocument2['default'].getElementsByTagName('video');
        var audios = _globalDocument2['default'].getElementsByTagName('audio');
        var mediaEls = [];
        if (vids && vids.length > 0) {
            for (var i = 0, e = vids.length; i < e; i++) {
                mediaEls.push(vids[i]);
            }
        }
        if (audios && audios.length > 0) {
            for (var i = 0, e = audios.length; i < e; i++) {
                mediaEls.push(audios[i]);
            }
        }

        // Check if any media elements exist
        if (mediaEls && mediaEls.length > 0) {

            for (var i = 0, e = mediaEls.length; i < e; i++) {
                var mediaEl = mediaEls[i];

                // Check if element exists, has getAttribute func.
                // IE seems to consider typeof el.getAttribute == 'object' instead of 'function' like expected, at least when loading the player immediately.
                if (mediaEl && mediaEl.getAttribute) {

                    // Make sure this player hasn't already been set up.
                    if (mediaEl['player'] === undefined) {
                        var options = mediaEl.getAttribute('data-setup');

                        // Check if data-setup attr exists.
                        // We only auto-setup if they've added the data-setup attr.
                        if (options !== null) {
                            // Create new video.js instance.
                            var player = videojs(mediaEl);
                        }
                    }

                    // If getAttribute isn't defined, we need to wait for the DOM.
                } else {
                    autoSetupTimeout(1);
                    break;
                }
            }

            // No videos were found, so keep looping unless page is finished loading.
        } else if (!_windowLoaded) {
            autoSetupTimeout(1);
        }
    };

// Pause to let the DOM keep processing
    var autoSetupTimeout = function autoSetupTimeout(wait, vjs) {
        if (vjs) {
            videojs = vjs;
        }

        setTimeout(autoSetup, wait);
    };

    if (_globalDocument2['default'].readyState === 'complete') {
        _windowLoaded = true;
    } else {
        Events.one(_globalWindow2['default'], 'load', function () {
            _windowLoaded = true;
        });
    }

    var hasLoaded = function hasLoaded() {
        return _windowLoaded;
    };

    exports.autoSetup = autoSetup;
    exports.autoSetupTimeout = autoSetupTimeout;
    exports.hasLoaded = hasLoaded;

},{"./utils/events.js":143,"global/document":1,"global/window":2}],119:[function(_dereq_,module,exports){
    /**
     * @file slider.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _utilsDomJs = _dereq_('../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _objectAssign = _dereq_('object.assign');

    var _objectAssign2 = _interopRequireDefault(_objectAssign);

    /**
     * The base functionality for sliders like the volume bar and seek bar
     *
     * @param {Player|Object} player
     * @param {Object=} options
     * @extends Component
     * @class Slider
     */

    var Slider = (function (_Component) {
        _inherits(Slider, _Component);

        function Slider(player, options) {
            _classCallCheck(this, Slider);

            _Component.call(this, player, options);

            // Set property names to bar to match with the child Slider class is looking for
            this.bar = this.getChild(this.options_.barName);

            // Set a horizontal or vertical class on the slider depending on the slider type
            this.vertical(!!this.options_.vertical);

            this.on('mousedown', this.handleMouseDown);
            this.on('touchstart', this.handleMouseDown);
            this.on('focus', this.handleFocus);
            this.on('blur', this.handleBlur);
            this.on('click', this.handleClick);

            this.on(player, 'controlsvisible', this.update);
            this.on(player, this.playerEvent, this.update);
        }

        /**
         * Create the component's DOM element
         *
         * @param {String} type Type of element to create
         * @param {Object=} props List of properties in Object form
         * @return {Element}
         * @method createEl
         */

        Slider.prototype.createEl = function createEl(type) {
            var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            // Add the slider element class to all sub classes
            props.className = props.className + ' vjs-slider';
            props = _objectAssign2['default']({
                tabIndex: 0
            }, props);

            attributes = _objectAssign2['default']({
                'role': 'slider',
                'aria-valuenow': 0,
                'aria-valuemin': 0,
                'aria-valuemax': 100,
                tabIndex: 0
            }, attributes);

            return _Component.prototype.createEl.call(this, type, props, attributes);
        };

        /**
         * Handle mouse down on slider
         *
         * @param {Object} event Mouse down event object
         * @method handleMouseDown
         */

        Slider.prototype.handleMouseDown = function handleMouseDown(event) {
            var doc = this.bar.el_.ownerDocument;

            event.preventDefault();
            Dom.blockTextSelection();

            this.addClass('vjs-sliding');
            this.trigger('slideractive');

            this.on(doc, 'mousemove', this.handleMouseMove);
            this.on(doc, 'mouseup', this.handleMouseUp);
            this.on(doc, 'touchmove', this.handleMouseMove);
            this.on(doc, 'touchend', this.handleMouseUp);

            this.handleMouseMove(event);
        };

        /**
         * To be overridden by a subclass
         *
         * @method handleMouseMove
         */

        Slider.prototype.handleMouseMove = function handleMouseMove() {};

        /**
         * Handle mouse up on Slider
         *
         * @method handleMouseUp
         */

        Slider.prototype.handleMouseUp = function handleMouseUp() {
            var doc = this.bar.el_.ownerDocument;

            Dom.unblockTextSelection();

            this.removeClass('vjs-sliding');
            this.trigger('sliderinactive');

            this.off(doc, 'mousemove', this.handleMouseMove);
            this.off(doc, 'mouseup', this.handleMouseUp);
            this.off(doc, 'touchmove', this.handleMouseMove);
            this.off(doc, 'touchend', this.handleMouseUp);

            this.update();
        };

        /**
         * Update slider
         *
         * @method update
         */

        Slider.prototype.update = function update() {
            // In VolumeBar init we have a setTimeout for update that pops and update to the end of the
            // execution stack. The player is destroyed before then update will cause an error
            if (!this.el_) return;

            // If scrubbing, we could use a cached value to make the handle keep up with the user's mouse.
            // On HTML5 browsers scrubbing is really smooth, but some flash players are slow, so we might want to utilize this later.
            // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
            var progress = this.getPercent();
            var bar = this.bar;

            // If there's no bar...
            if (!bar) return;

            // Protect against no duration and other division issues
            if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
                progress = 0;
            }

            // Convert to a percentage for setting
            var percentage = (progress * 100).toFixed(2) + '%';

            // Set the new bar width or height
            if (this.vertical()) {
                bar.el().style.height = percentage;
            } else {
                bar.el().style.width = percentage;
            }
        };

        /**
         * Calculate distance for slider
         *
         * @param {Object} event Event object
         * @method calculateDistance
         */

        Slider.prototype.calculateDistance = function calculateDistance(event) {
            var position = Dom.getPointerPosition(this.el_, event);
            if (this.vertical()) {
                return position.y;
            }
            return position.x;
        };

        /**
         * Handle on focus for slider
         *
         * @method handleFocus
         */

        Slider.prototype.handleFocus = function handleFocus() {
            this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
        };

        /**
         * Handle key press for slider
         *
         * @param {Object} event Event object
         * @method handleKeyPress
         */

        Slider.prototype.handleKeyPress = function handleKeyPress(event) {
            if (event.which === 37 || event.which === 40) {
                // Left and Down Arrows
                event.preventDefault();
                this.stepBack();
            } else if (event.which === 38 || event.which === 39) {
                // Up and Right Arrows
                event.preventDefault();
                this.stepForward();
            }
        };

        /**
         * Handle on blur for slider
         *
         * @method handleBlur
         */

        Slider.prototype.handleBlur = function handleBlur() {
            this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
        };

        /**
         * Listener for click events on slider, used to prevent clicks
         *   from bubbling up to parent elements like button menus.
         *
         * @param {Object} event Event object
         * @method handleClick
         */

        Slider.prototype.handleClick = function handleClick(event) {
            event.stopImmediatePropagation();
            event.preventDefault();
        };

        /**
         * Get/set if slider is horizontal for vertical
         *
         * @param {Boolean} bool True if slider is vertical, false is horizontal
         * @return {Boolean} True if slider is vertical, false is horizontal
         * @method vertical
         */

        Slider.prototype.vertical = function vertical(bool) {
            if (bool === undefined) {
                return this.vertical_ || false;
            }

            this.vertical_ = !!bool;

            if (this.vertical_) {
                this.addClass('vjs-slider-vertical');
            } else {
                this.addClass('vjs-slider-horizontal');
            }

            return this;
        };

        return Slider;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('Slider', Slider);
    exports['default'] = Slider;
    module.exports = exports['default'];

},{"../component.js":67,"../utils/dom.js":142,"object.assign":45}],120:[function(_dereq_,module,exports){
    /**
     * @file flash-rtmp.js
     */
    'use strict';

    exports.__esModule = true;
    function FlashRtmpDecorator(Flash) {
        Flash.streamingFormats = {
            'rtmp/mp4': 'MP4',
            'rtmp/flv': 'FLV'
        };

        Flash.streamFromParts = function (connection, stream) {
            return connection + '&' + stream;
        };

        Flash.streamToParts = function (src) {
            var parts = {
                connection: '',
                stream: ''
            };

            if (!src) return parts;

            // Look for the normal URL separator we expect, '&'.
            // If found, we split the URL into two pieces around the
            // first '&'.
            var connEnd = src.search(/&(?!\w+=)/);
            var streamBegin = undefined;
            if (connEnd !== -1) {
                streamBegin = connEnd + 1;
            } else {
                // If there's not a '&', we use the last '/' as the delimiter.
                connEnd = streamBegin = src.lastIndexOf('/') + 1;
                if (connEnd === 0) {
                    // really, there's not a '/'?
                    connEnd = streamBegin = src.length;
                }
            }
            parts.connection = src.substring(0, connEnd);
            parts.stream = src.substring(streamBegin, src.length);

            return parts;
        };

        Flash.isStreamingType = function (srcType) {
            return srcType in Flash.streamingFormats;
        };

        // RTMP has four variations, any string starting
        // with one of these protocols should be valid
        Flash.RTMP_RE = /^rtmp[set]?:\/\//i;

        Flash.isStreamingSrc = function (src) {
            return Flash.RTMP_RE.test(src);
        };

        /**
         * A source handler for RTMP urls
         * @type {Object}
         */
        Flash.rtmpSourceHandler = {};

        /**
         * Check if Flash can play the given videotype
         * @param  {String} type    The mimetype to check
         * @return {String}         'probably', 'maybe', or '' (empty string)
         */
        Flash.rtmpSourceHandler.canPlayType = function (type) {
            if (Flash.isStreamingType(type)) {
                return 'maybe';
            }

            return '';
        };

        /**
         * Check if Flash can handle the source natively
         * @param  {Object} source  The source object
         * @param  {Object} options The options passed to the tech
         * @return {String}         'probably', 'maybe', or '' (empty string)
         */
        Flash.rtmpSourceHandler.canHandleSource = function (source, options) {
            var can = Flash.rtmpSourceHandler.canPlayType(source.type);

            if (can) {
                return can;
            }

            if (Flash.isStreamingSrc(source.src)) {
                return 'maybe';
            }

            return '';
        };

        /**
         * Pass the source to the flash object
         * Adaptive source handlers will have more complicated workflows before passing
         * video data to the video element
         * @param  {Object} source   The source object
         * @param  {Flash}  tech     The instance of the Flash tech
         * @param  {Object} options  The options to pass to the source
         */
        Flash.rtmpSourceHandler.handleSource = function (source, tech, options) {
            var srcParts = Flash.streamToParts(source.src);

            tech['setRtmpConnection'](srcParts.connection);
            tech['setRtmpStream'](srcParts.stream);
        };

        // Register the native source handler
        Flash.registerSourceHandler(Flash.rtmpSourceHandler);

        return Flash;
    }

    exports['default'] = FlashRtmpDecorator;
    module.exports = exports['default'];

},{}],121:[function(_dereq_,module,exports){
    /**
     * @file flash.js
     * VideoJS-SWF - Custom Flash Player with HTML5-ish API
     * https://github.com/zencoder/video-js-swf
     * Not using setupTriggers. Using global onEvent func to distribute events
     */

    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _tech = _dereq_('./tech');

    var _tech2 = _interopRequireDefault(_tech);

    var _utilsDomJs = _dereq_('../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsUrlJs = _dereq_('../utils/url.js');

    var Url = _interopRequireWildcard(_utilsUrlJs);

    var _utilsTimeRangesJs = _dereq_('../utils/time-ranges.js');

    var _flashRtmp = _dereq_('./flash-rtmp');

    var _flashRtmp2 = _interopRequireDefault(_flashRtmp);

    var _component = _dereq_('../component');

    var _component2 = _interopRequireDefault(_component);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _objectAssign = _dereq_('object.assign');

    var _objectAssign2 = _interopRequireDefault(_objectAssign);

    var navigator = _globalWindow2['default'].navigator;
    /**
     * Flash Media Controller - Wrapper for fallback SWF API
     *
     * @param {Object=} options Object of option names and values
     * @param {Function=} ready Ready callback function
     * @extends Tech
     * @class Flash
     */

    var Flash = (function (_Tech) {
        _inherits(Flash, _Tech);

        function Flash(options, ready) {
            _classCallCheck(this, Flash);

            _Tech.call(this, options, ready);

            // Set the source when ready
            if (options.source) {
                this.ready(function () {
                    this.setSource(options.source);
                }, true);
            }

            // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers
            // This allows resetting the playhead when we catch the reload
            if (options.startTime) {
                this.ready(function () {
                    this.load();
                    this.play();
                    this.currentTime(options.startTime);
                }, true);
            }

            // Add global window functions that the swf expects
            // A 4.x workflow we weren't able to solve for in 5.0
            // because of the need to hard code these functions
            // into the swf for security reasons
            _globalWindow2['default'].videojs = _globalWindow2['default'].videojs || {};
            _globalWindow2['default'].videojs.Flash = _globalWindow2['default'].videojs.Flash || {};
            _globalWindow2['default'].videojs.Flash.onReady = Flash.onReady;
            _globalWindow2['default'].videojs.Flash.onEvent = Flash.onEvent;
            _globalWindow2['default'].videojs.Flash.onError = Flash.onError;

            this.on('seeked', function () {
                this.lastSeekTarget_ = undefined;
            });
        }

        // Create setters and getters for attributes

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        Flash.prototype.createEl = function createEl() {
            var options = this.options_;

            // If video.js is hosted locally you should also set the location
            // for the hosted swf, which should be relative to the page (not video.js)
            // Otherwise this adds a CDN url.
            // The CDN also auto-adds a swf URL for that specific version.
            if (!options.swf) {
                options.swf = '//vjs.zencdn.net/swf/5.1.0/video-js.swf';
            }

            // Generate ID for swf object
            var objId = options.techId;

            // Merge default flashvars with ones passed in to init
            var flashVars = _objectAssign2['default']({

                // SWF Callback Functions
                'readyFunction': 'videojs.Flash.onReady',
                'eventProxyFunction': 'videojs.Flash.onEvent',
                'errorEventProxyFunction': 'videojs.Flash.onError',

                // Player Settings
                'autoplay': options.autoplay,
                'preload': options.preload,
                'loop': options.loop,
                'muted': options.muted

            }, options.flashVars);

            // Merge default parames with ones passed in
            var params = _objectAssign2['default']({
                'wmode': 'opaque', // Opaque is needed to overlay controls, but can affect playback performance
                'bgcolor': '#000000' // Using bgcolor prevents a white flash when the object is loading
            }, options.params);

            // Merge default attributes with ones passed in
            var attributes = _objectAssign2['default']({
                'id': objId,
                'name': objId, // Both ID and Name needed or swf to identify itself
                'class': 'vjs-tech'
            }, options.attributes);

            this.el_ = Flash.embed(options.swf, flashVars, params, attributes);
            this.el_.tech = this;

            return this.el_;
        };

        /**
         * Play for flash tech
         *
         * @method play
         */

        Flash.prototype.play = function play() {
            if (this.ended()) {
                this.setCurrentTime(0);
            }
            this.el_.vjs_play();
        };

        /**
         * Pause for flash tech
         *
         * @method pause
         */

        Flash.prototype.pause = function pause() {
            this.el_.vjs_pause();
        };

        /**
         * Get/set video
         *
         * @param {Object=} src Source object
         * @return {Object}
         * @method src
         */

        Flash.prototype.src = function src(_src) {
            if (_src === undefined) {
                return this.currentSrc();
            }

            // Setting src through `src` not `setSrc` will be deprecated
            return this.setSrc(_src);
        };

        /**
         * Set video
         *
         * @param {Object=} src Source object
         * @deprecated
         * @method setSrc
         */

        Flash.prototype.setSrc = function setSrc(src) {
            // Make sure source URL is absolute.
            src = Url.getAbsoluteURL(src);
            this.el_.vjs_src(src);

            // Currently the SWF doesn't autoplay if you load a source later.
            // e.g. Load player w/ no source, wait 2s, set src.
            if (this.autoplay()) {
                var tech = this;
                this.setTimeout(function () {
                    tech.play();
                }, 0);
            }
        };

        /**
         * Returns true if the tech is currently seeking.
         * @return {boolean} true if seeking
         */

        Flash.prototype.seeking = function seeking() {
            return this.lastSeekTarget_ !== undefined;
        };

        /**
         * Set current time
         *
         * @param {Number} time Current time of video
         * @method setCurrentTime
         */

        Flash.prototype.setCurrentTime = function setCurrentTime(time) {
            var seekable = this.seekable();
            if (seekable.length) {
                // clamp to the current seekable range
                time = time > seekable.start(0) ? time : seekable.start(0);
                time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);

                this.lastSeekTarget_ = time;
                this.trigger('seeking');
                this.el_.vjs_setProperty('currentTime', time);
                _Tech.prototype.setCurrentTime.call(this);
            }
        };

        /**
         * Get current time
         *
         * @param {Number=} time Current time of video
         * @return {Number} Current time
         * @method currentTime
         */

        Flash.prototype.currentTime = function currentTime(time) {
            // when seeking make the reported time keep up with the requested time
            // by reading the time we're seeking to
            if (this.seeking()) {
                return this.lastSeekTarget_ || 0;
            }
            return this.el_.vjs_getProperty('currentTime');
        };

        /**
         * Get current source
         *
         * @method currentSrc
         */

        Flash.prototype.currentSrc = function currentSrc() {
            if (this.currentSource_) {
                return this.currentSource_.src;
            } else {
                return this.el_.vjs_getProperty('currentSrc');
            }
        };

        /**
         * Get media duration
         *
         * @returns {Number} Media duration
         */

        Flash.prototype.duration = function duration() {
            if (this.readyState() === 0) {
                return NaN;
            } else {
                var duration = this.el_.vjs_getProperty('duration');
                return duration >= 0 ? duration : Infinity;
            }
        };

        /**
         * Load media into player
         *
         * @method load
         */

        Flash.prototype.load = function load() {
            this.el_.vjs_load();
        };

        /**
         * Get poster
         *
         * @method poster
         */

        Flash.prototype.poster = function poster() {
            this.el_.vjs_getProperty('poster');
        };

        /**
         * Poster images are not handled by the Flash tech so make this a no-op
         *
         * @method setPoster
         */

        Flash.prototype.setPoster = function setPoster() {};

        /**
         * Determine if can seek in media
         *
         * @return {TimeRangeObject}
         * @method seekable
         */

        Flash.prototype.seekable = function seekable() {
            var duration = this.duration();
            if (duration === 0) {
                return _utilsTimeRangesJs.createTimeRange();
            }
            return _utilsTimeRangesJs.createTimeRange(0, duration);
        };

        /**
         * Get buffered time range
         *
         * @return {TimeRangeObject}
         * @method buffered
         */

        Flash.prototype.buffered = function buffered() {
            var ranges = this.el_.vjs_getProperty('buffered');
            if (ranges.length === 0) {
                return _utilsTimeRangesJs.createTimeRange();
            }
            return _utilsTimeRangesJs.createTimeRange(ranges[0][0], ranges[0][1]);
        };

        /**
         * Get fullscreen support -
         * Flash does not allow fullscreen through javascript
         * so always returns false
         *
         * @return {Boolean} false
         * @method supportsFullScreen
         */

        Flash.prototype.supportsFullScreen = function supportsFullScreen() {
            return false; // Flash does not allow fullscreen through javascript
        };

        /**
         * Request to enter fullscreen
         * Flash does not allow fullscreen through javascript
         * so always returns false
         *
         * @return {Boolean} false
         * @method enterFullScreen
         */

        Flash.prototype.enterFullScreen = function enterFullScreen() {
            return false;
        };

        return Flash;
    })(_tech2['default']);

    var _api = Flash.prototype;
    var _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');
    var _readOnly = 'networkState,readyState,initialTime,startOffsetTime,paused,ended,videoWidth,videoHeight'.split(',');

    function _createSetter(attr) {
        var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);
        _api['set' + attrUpper] = function (val) {
            return this.el_.vjs_setProperty(attr, val);
        };
    }
    function _createGetter(attr) {
        _api[attr] = function () {
            return this.el_.vjs_getProperty(attr);
        };
    }

// Create getter and setters for all read/write attributes
    for (var i = 0; i < _readWrite.length; i++) {
        _createGetter(_readWrite[i]);
        _createSetter(_readWrite[i]);
    }

// Create getters for read-only attributes
    for (var i = 0; i < _readOnly.length; i++) {
        _createGetter(_readOnly[i]);
    }

    /* Flash Support Testing -------------------------------------------------------- */

    Flash.isSupported = function () {
        return Flash.version()[0] >= 10;
        // return swfobject.hasFlashPlayerVersion('10');
    };

// Add Source Handler pattern functions to this tech
    _tech2['default'].withSourceHandlers(Flash);

    /*
     * The default native source handler.
     * This simply passes the source to the video element. Nothing fancy.
     *
     * @param  {Object} source   The source object
     * @param  {Flash} tech  The instance of the Flash tech
     */
    Flash.nativeSourceHandler = {};

    /**
     * Check if Flash can play the given videotype
     * @param  {String} type    The mimetype to check
     * @return {String}         'probably', 'maybe', or '' (empty string)
     */
    Flash.nativeSourceHandler.canPlayType = function (type) {
        if (type in Flash.formats) {
            return 'maybe';
        }

        return '';
    };

    /*
     * Check Flash can handle the source natively
     *
     * @param  {Object} source  The source object
     * @param  {Object} options The options passed to the tech
     * @return {String}         'probably', 'maybe', or '' (empty string)
     */
    Flash.nativeSourceHandler.canHandleSource = function (source, options) {
        var type;

        function guessMimeType(src) {
            var ext = Url.getFileExtension(src);
            if (ext) {
                return 'video/' + ext;
            }
            return '';
        }

        if (!source.type) {
            type = guessMimeType(source.src);
        } else {
            // Strip code information from the type because we don't get that specific
            type = source.type.replace(/;.*/, '').toLowerCase();
        }

        return Flash.nativeSourceHandler.canPlayType(type);
    };

    /*
     * Pass the source to the flash object
     * Adaptive source handlers will have more complicated workflows before passing
     * video data to the video element
     *
     * @param  {Object} source   The source object
     * @param  {Flash}  tech     The instance of the Flash tech
     * @param  {Object} options  The options to pass to the source
     */
    Flash.nativeSourceHandler.handleSource = function (source, tech, options) {
        tech.setSrc(source.src);
    };

    /*
     * Clean up the source handler when disposing the player or switching sources..
     * (no cleanup is needed when supporting the format natively)
     */
    Flash.nativeSourceHandler.dispose = function () {};

// Register the native source handler
    Flash.registerSourceHandler(Flash.nativeSourceHandler);

    Flash.formats = {
        'video/flv': 'FLV',
        'video/x-flv': 'FLV',
        'video/mp4': 'MP4',
        'video/m4v': 'MP4'
    };

    Flash.onReady = function (currSwf) {
        var el = Dom.getEl(currSwf);
        var tech = el && el.tech;

        // if there is no el then the tech has been disposed
        // and the tech element was removed from the player div
        if (tech && tech.el()) {
            // check that the flash object is really ready
            Flash.checkReady(tech);
        }
    };

// The SWF isn't always ready when it says it is. Sometimes the API functions still need to be added to the object.
// If it's not ready, we set a timeout to check again shortly.
    Flash.checkReady = function (tech) {
        // stop worrying if the tech has been disposed
        if (!tech.el()) {
            return;
        }

        // check if API property exists
        if (tech.el().vjs_getProperty) {
            // tell tech it's ready
            tech.triggerReady();
        } else {
            // wait longer
            this.setTimeout(function () {
                Flash['checkReady'](tech);
            }, 50);
        }
    };

// Trigger events from the swf on the player
    Flash.onEvent = function (swfID, eventName) {
        var tech = Dom.getEl(swfID).tech;
        tech.trigger(eventName, Array.prototype.slice.call(arguments, 2));
    };

// Log errors from the swf
    Flash.onError = function (swfID, err) {
        var tech = Dom.getEl(swfID).tech;

        // trigger MEDIA_ERR_SRC_NOT_SUPPORTED
        if (err === 'srcnotfound') {
            return tech.error(4);
        }

        // trigger a custom error
        tech.error('FLASH: ' + err);
    };

// Flash Version Check
    Flash.version = function () {
        var version = '0,0,0';

        // IE
        try {
            version = new _globalWindow2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];

            // other browsers
        } catch (e) {
            try {
                if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
                    version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
                }
            } catch (err) {}
        }
        return version.split(',');
    };

// Flash embedding method. Only used in non-iframe mode
    Flash.embed = function (swf, flashVars, params, attributes) {
        var code = Flash.getEmbedCode(swf, flashVars, params, attributes);

        // Get element by embedding code and retrieving created element
        var obj = Dom.createEl('div', { innerHTML: code }).childNodes[0];

        return obj;
    };

    Flash.getEmbedCode = function (swf, flashVars, params, attributes) {
        var objTag = '<object type="application/x-shockwave-flash" ';
        var flashVarsString = '';
        var paramsString = '';
        var attrsString = '';

        // Convert flash vars to string
        if (flashVars) {
            Object.getOwnPropertyNames(flashVars).forEach(function (key) {
                flashVarsString += key + '=' + flashVars[key] + '&amp;';
            });
        }

        // Add swf, flashVars, and other default params
        params = _objectAssign2['default']({
            'movie': swf,
            'flashvars': flashVarsString,
            'allowScriptAccess': 'always', // Required to talk to swf
            'allowNetworking': 'all' // All should be default, but having security issues.
        }, params);

        // Create param tags string
        Object.getOwnPropertyNames(params).forEach(function (key) {
            paramsString += '<param name="' + key + '" value="' + params[key] + '" />';
        });

        attributes = _objectAssign2['default']({
            // Add swf to attributes (need both for IE and Others to work)
            'data': swf,

            // Default to 100% width/height
            'width': '100%',
            'height': '100%'

        }, attributes);

        // Create Attributes string
        Object.getOwnPropertyNames(attributes).forEach(function (key) {
            attrsString += key + '="' + attributes[key] + '" ';
        });

        return '' + objTag + attrsString + '>' + paramsString + '</object>';
    };

// Run Flash through the RTMP decorator
    _flashRtmp2['default'](Flash);

    _component2['default'].registerComponent('Flash', Flash);
    _tech2['default'].registerTech('Flash', Flash);
    exports['default'] = Flash;
    module.exports = exports['default'];

},{"../component":67,"../utils/dom.js":142,"../utils/time-ranges.js":150,"../utils/url.js":152,"./flash-rtmp":120,"./tech":124,"global/window":2,"object.assign":45}],122:[function(_dereq_,module,exports){
    /**
     * @file html5.js
     * HTML5 Media Controller - Wrapper for HTML5 Media API
     */

    'use strict';

    exports.__esModule = true;

    var _templateObject = _taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used. \n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used. \n            This may prevent text tracks from loading.']);

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

    var _techJs = _dereq_('./tech.js');

    var _techJs2 = _interopRequireDefault(_techJs);

    var _component = _dereq_('../component');

    var _component2 = _interopRequireDefault(_component);

    var _utilsDomJs = _dereq_('../utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsUrlJs = _dereq_('../utils/url.js');

    var Url = _interopRequireWildcard(_utilsUrlJs);

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsLogJs = _dereq_('../utils/log.js');

    var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

    var _tsml = _dereq_('tsml');

    var _tsml2 = _interopRequireDefault(_tsml);

    var _srcJsTracksTextTrackJs = _dereq_('../../../src/js/tracks/text-track.js');

    var _srcJsTracksTextTrackJs2 = _interopRequireDefault(_srcJsTracksTextTrackJs);

    var _utilsBrowserJs = _dereq_('../utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _objectAssign = _dereq_('object.assign');

    var _objectAssign2 = _interopRequireDefault(_objectAssign);

    var _utilsMergeOptionsJs = _dereq_('../utils/merge-options.js');

    var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);

    var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');

    var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

    /**
     * HTML5 Media Controller - Wrapper for HTML5 Media API
     *
     * @param {Object=} options Object of option names and values
     * @param {Function=} ready Ready callback function
     * @extends Tech
     * @class Html5
     */

    var Html5 = (function (_Tech) {
        _inherits(Html5, _Tech);

        function Html5(options, ready) {
            var _this = this;

            _classCallCheck(this, Html5);

            _Tech.call(this, options, ready);

            var source = options.source;
            var crossoriginTracks = false;

            // Set the source if one is provided
            // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
            // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
            // anyway so the error gets fired.
            if (source && (this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
                this.setSource(source);
            } else {
                this.handleLateInit_(this.el_);
            }

            if (this.el_.hasChildNodes()) {

                var nodes = this.el_.childNodes;
                var nodesLength = nodes.length;
                var removeNodes = [];

                while (nodesLength--) {
                    var node = nodes[nodesLength];
                    var nodeName = node.nodeName.toLowerCase();

                    if (nodeName === 'track') {
                        if (!this.featuresNativeTextTracks) {
                            // Empty video tag tracks so the built-in player doesn't use them also.
                            // This may not be fast enough to stop HTML5 browsers from reading the tags
                            // so we'll need to turn off any default tracks if we're manually doing
                            // captions and subtitles. videoElement.textTracks
                            removeNodes.push(node);
                        } else {
                            // store HTMLTrackElement and TextTrack to remote list
                            this.remoteTextTrackEls().addTrackElement_(node);
                            this.remoteTextTracks().addTrack_(node.track);
                            if (!crossoriginTracks && !this.el_.hasAttribute('crossorigin') && Url.isCrossOrigin(node.src)) {
                                crossoriginTracks = true;
                            }
                        }
                    }
                }

                for (var i = 0; i < removeNodes.length; i++) {
                    this.el_.removeChild(removeNodes[i]);
                }
            }

            var trackTypes = ['audio', 'video'];

            // ProxyNativeTextTracks
            trackTypes.forEach(function (type) {
                var capitalType = _utilsToTitleCaseJs2['default'](type);

                if (!_this['featuresNative' + capitalType + 'Tracks']) {
                    return;
                }
                var tl = _this.el()[type + 'Tracks'];

                if (tl && tl.addEventListener) {
                    tl.addEventListener('change', Fn.bind(_this, _this['handle' + capitalType + 'TrackChange_']));
                    tl.addEventListener('addtrack', Fn.bind(_this, _this['handle' + capitalType + 'TrackAdd_']));
                    tl.addEventListener('removetrack', Fn.bind(_this, _this['handle' + capitalType + 'TrackRemove_']));

                    // Remove (native) trackts that are not used anymore
                    _this.on('loadstart', _this['removeOld' + capitalType + 'Tracks_']);
                }
            });

            if (this.featuresNativeTextTracks) {
                if (crossoriginTracks) {
                    _utilsLogJs2['default'].warn(_tsml2['default'](_templateObject));
                }

                this.handleTextTrackChange_ = Fn.bind(this, this.handleTextTrackChange);
                this.handleTextTrackAdd_ = Fn.bind(this, this.handleTextTrackAdd);
                this.handleTextTrackRemove_ = Fn.bind(this, this.handleTextTrackRemove);
                this.proxyNativeTextTracks_();
            }

            // Determine if native controls should be used
            // Our goal should be to get the custom controls on mobile solid everywhere
            // so we can remove this all together. Right now this will block custom
            // controls on touch enabled laptops like the Chrome Pixel
            if ((browser.TOUCH_ENABLED || browser.IS_IPHONE || browser.IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {
                this.setControls(true);
            }

            this.triggerReady();
        }

        /* HTML5 Support Testing ---------------------------------------------------- */

        /*
         * Element for testing browser HTML5 video capabilities
         *
         * @type {Element}
         * @constant
         * @private
         */

        /**
         * Dispose of html5 media element
         *
         * @method dispose
         */

        Html5.prototype.dispose = function dispose() {
            var _this2 = this;

            // Un-ProxyNativeTracks
            ['audio', 'video', 'text'].forEach(function (type) {
                var capitalType = _utilsToTitleCaseJs2['default'](type);
                var tl = _this2.el_[type + 'Tracks'];

                if (tl && tl.removeEventListener) {
                    tl.removeEventListener('change', _this2['handle' + capitalType + 'TrackChange_']);
                    tl.removeEventListener('addtrack', _this2['handle' + capitalType + 'TrackAdd_']);
                    tl.removeEventListener('removetrack', _this2['handle' + capitalType + 'TrackRemove_']);
                }

                // Stop removing old text tracks
                if (tl) {
                    _this2.off('loadstart', _this2['removeOld' + capitalType + 'Tracks_']);
                }
            });

            Html5.disposeMediaElement(this.el_);
            // tech will handle clearing of the emulated track list
            _Tech.prototype.dispose.call(this);
        };

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        Html5.prototype.createEl = function createEl() {
            var el = this.options_.tag;

            // Check if this browser supports moving the element into the box.
            // On the iPhone video will break if you move the element,
            // So we have to create a brand new element.
            if (!el || this['movingMediaElementInDOM'] === false) {

                // If the original tag is still there, clone and remove it.
                if (el) {
                    var clone = el.cloneNode(true);
                    el.parentNode.insertBefore(clone, el);
                    Html5.disposeMediaElement(el);
                    el = clone;
                } else {
                    el = _globalDocument2['default'].createElement('video');

                    // determine if native controls should be used
                    var tagAttributes = this.options_.tag && Dom.getElAttributes(this.options_.tag);
                    var attributes = _utilsMergeOptionsJs2['default']({}, tagAttributes);
                    if (!browser.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
                        delete attributes.controls;
                    }

                    Dom.setElAttributes(el, _objectAssign2['default'](attributes, {
                        id: this.options_.techId,
                        'class': 'vjs-tech'
                    }));
                }
            }

            // Update specific tag settings, in case they were overridden
            var settingsAttrs = ['autoplay', 'preload', 'loop', 'muted'];
            for (var i = settingsAttrs.length - 1; i >= 0; i--) {
                var attr = settingsAttrs[i];
                var overwriteAttrs = {};
                if (typeof this.options_[attr] !== 'undefined') {
                    overwriteAttrs[attr] = this.options_[attr];
                }
                Dom.setElAttributes(el, overwriteAttrs);
            }

            return el;
            // jenniisawesome = true;
        };

        // If we're loading the playback object after it has started loading
        // or playing the video (often with autoplay on) then the loadstart event
        // has already fired and we need to fire it manually because many things
        // rely on it.

        Html5.prototype.handleLateInit_ = function handleLateInit_(el) {
            var _this3 = this;

            if (el.networkState === 0 || el.networkState === 3) {
                // The video element hasn't started loading the source yet
                // or didn't find a source
                return;
            }

            if (el.readyState === 0) {
                var _ret = (function () {
                    // NetworkState is set synchronously BUT loadstart is fired at the
                    // end of the current stack, usually before setInterval(fn, 0).
                    // So at this point we know loadstart may have already fired or is
                    // about to fire, and either way the player hasn't seen it yet.
                    // We don't want to fire loadstart prematurely here and cause a
                    // double loadstart so we'll wait and see if it happens between now
                    // and the next loop, and fire it if not.
                    // HOWEVER, we also want to make sure it fires before loadedmetadata
                    // which could also happen between now and the next loop, so we'll
                    // watch for that also.
                    var loadstartFired = false;
                    var setLoadstartFired = function setLoadstartFired() {
                        loadstartFired = true;
                    };
                    _this3.on('loadstart', setLoadstartFired);

                    var triggerLoadstart = function triggerLoadstart() {
                        // We did miss the original loadstart. Make sure the player
                        // sees loadstart before loadedmetadata
                        if (!loadstartFired) {
                            this.trigger('loadstart');
                        }
                    };
                    _this3.on('loadedmetadata', triggerLoadstart);

                    _this3.ready(function () {
                        this.off('loadstart', setLoadstartFired);
                        this.off('loadedmetadata', triggerLoadstart);

                        if (!loadstartFired) {
                            // We did miss the original native loadstart. Fire it now.
                            this.trigger('loadstart');
                        }
                    });

                    return {
                        v: undefined
                    };
                })();

                if (typeof _ret === 'object') return _ret.v;
            }

            // From here on we know that loadstart already fired and we missed it.
            // The other readyState events aren't as much of a problem if we double
            // them, so not going to go to as much trouble as loadstart to prevent
            // that unless we find reason to.
            var eventsToTrigger = ['loadstart'];

            // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
            eventsToTrigger.push('loadedmetadata');

            // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
            if (el.readyState >= 2) {
                eventsToTrigger.push('loadeddata');
            }

            // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
            if (el.readyState >= 3) {
                eventsToTrigger.push('canplay');
            }

            // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
            if (el.readyState >= 4) {
                eventsToTrigger.push('canplaythrough');
            }

            // We still need to give the player time to add event listeners
            this.ready(function () {
                eventsToTrigger.forEach(function (type) {
                    this.trigger(type);
                }, this);
            });
        };

        Html5.prototype.proxyNativeTextTracks_ = function proxyNativeTextTracks_() {
            var tt = this.el().textTracks;

            if (tt) {
                // Add tracks - if player is initialised after DOM loaded, textTracks
                // will not trigger addtrack
                for (var i = 0; i < tt.length; i++) {
                    this.textTracks().addTrack_(tt[i]);
                }

                if (tt.addEventListener) {
                    tt.addEventListener('change', this.handleTextTrackChange_);
                    tt.addEventListener('addtrack', this.handleTextTrackAdd_);
                    tt.addEventListener('removetrack', this.handleTextTrackRemove_);
                }

                // Remove (native) texttracks that are not used anymore
                this.on('loadstart', this.removeOldTextTracks_);
            }
        };

        Html5.prototype.handleTextTrackChange = function handleTextTrackChange(e) {
            var tt = this.textTracks();
            this.textTracks().trigger({
                type: 'change',
                target: tt,
                currentTarget: tt,
                srcElement: tt
            });
        };

        Html5.prototype.handleTextTrackAdd = function handleTextTrackAdd(e) {
            this.textTracks().addTrack_(e.track);
        };

        Html5.prototype.handleTextTrackRemove = function handleTextTrackRemove(e) {
            this.textTracks().removeTrack_(e.track);
        };

        Html5.prototype.handleVideoTrackChange_ = function handleVideoTrackChange_(e) {
            var vt = this.videoTracks();
            this.videoTracks().trigger({
                type: 'change',
                target: vt,
                currentTarget: vt,
                srcElement: vt
            });
        };

        Html5.prototype.handleVideoTrackAdd_ = function handleVideoTrackAdd_(e) {
            this.videoTracks().addTrack_(e.track);
        };

        Html5.prototype.handleVideoTrackRemove_ = function handleVideoTrackRemove_(e) {
            this.videoTracks().removeTrack_(e.track);
        };

        Html5.prototype.handleAudioTrackChange_ = function handleAudioTrackChange_(e) {
            var audioTrackList = this.audioTracks();
            this.audioTracks().trigger({
                type: 'change',
                target: audioTrackList,
                currentTarget: audioTrackList,
                srcElement: audioTrackList
            });
        };

        Html5.prototype.handleAudioTrackAdd_ = function handleAudioTrackAdd_(e) {
            this.audioTracks().addTrack_(e.track);
        };

        Html5.prototype.handleAudioTrackRemove_ = function handleAudioTrackRemove_(e) {
            this.audioTracks().removeTrack_(e.track);
        };

        /**
         * This is a helper function that is used in removeOldTextTracks_, removeOldAudioTracks_ and
         * removeOldVideoTracks_
         * @param {Track[]} techTracks Tracks for this tech
         * @param {Track[]} elTracks Tracks for the HTML5 video element
         * @private
         */

        Html5.prototype.removeOldTracks_ = function removeOldTracks_(techTracks, elTracks) {
            // This will loop over the techTracks and check if they are still used by the HTML5 video element
            // If not, they will be removed from the emulated list
            var removeTracks = [];
            if (!elTracks) {
                return;
            }

            for (var i = 0; i < techTracks.length; i++) {
                var techTrack = techTracks[i];

                var found = false;
                for (var j = 0; j < elTracks.length; j++) {
                    if (elTracks[j] === techTrack) {
                        found = true;
                        break;
                    }
                }

                if (!found) {
                    removeTracks.push(techTrack);
                }
            }

            for (var i = 0; i < removeTracks.length; i++) {
                var _track = removeTracks[i];
                techTracks.removeTrack_(_track);
            }
        };

        Html5.prototype.removeOldTextTracks_ = function removeOldTextTracks_() {
            var techTracks = this.textTracks();
            var elTracks = this.el().textTracks;
            this.removeOldTracks_(techTracks, elTracks);
        };

        Html5.prototype.removeOldAudioTracks_ = function removeOldAudioTracks_() {
            var techTracks = this.audioTracks();
            var elTracks = this.el().audioTracks;
            this.removeOldTracks_(techTracks, elTracks);
        };

        Html5.prototype.removeOldVideoTracks_ = function removeOldVideoTracks_() {
            var techTracks = this.videoTracks();
            var elTracks = this.el().videoTracks;
            this.removeOldTracks_(techTracks, elTracks);
        };

        /**
         * Play for html5 tech
         *
         * @method play
         */

        Html5.prototype.play = function play() {
            var playPromise = this.el_.play();

            // Catch/silence error when a pause interrupts a play request
            // on browsers which return a promise
            if (playPromise !== undefined && typeof playPromise.then === 'function') {
                playPromise.then(null, function (e) {});
            }
        };

        /**
         * Pause for html5 tech
         *
         * @method pause
         */

        Html5.prototype.pause = function pause() {
            this.el_.pause();
        };

        /**
         * Paused for html5 tech
         *
         * @return {Boolean}
         * @method paused
         */

        Html5.prototype.paused = function paused() {
            return this.el_.paused;
        };

        /**
         * Get current time
         *
         * @return {Number}
         * @method currentTime
         */

        Html5.prototype.currentTime = function currentTime() {
            return this.el_.currentTime;
        };

        /**
         * Set current time
         *
         * @param {Number} seconds Current time of video
         * @method setCurrentTime
         */

        Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {
            try {
                this.el_.currentTime = seconds;
            } catch (e) {
                _utilsLogJs2['default'](e, 'Video is not ready. (Video.js)');
                // this.warning(VideoJS.warnings.videoNotReady);
            }
        };

        /**
         * Get duration
         *
         * @return {Number}
         * @method duration
         */

        Html5.prototype.duration = function duration() {
            return this.el_.duration || 0;
        };

        /**
         * Get a TimeRange object that represents the intersection
         * of the time ranges for which the user agent has all
         * relevant media
         *
         * @return {TimeRangeObject}
         * @method buffered
         */

        Html5.prototype.buffered = function buffered() {
            return this.el_.buffered;
        };

        /**
         * Get volume level
         *
         * @return {Number}
         * @method volume
         */

        Html5.prototype.volume = function volume() {
            return this.el_.volume;
        };

        /**
         * Set volume level
         *
         * @param {Number} percentAsDecimal Volume percent as a decimal
         * @method setVolume
         */

        Html5.prototype.setVolume = function setVolume(percentAsDecimal) {
            this.el_.volume = percentAsDecimal;
        };

        /**
         * Get if muted
         *
         * @return {Boolean}
         * @method muted
         */

        Html5.prototype.muted = function muted() {
            return this.el_.muted;
        };

        /**
         * Set muted
         *
         * @param {Boolean} If player is to be muted or note
         * @method setMuted
         */

        Html5.prototype.setMuted = function setMuted(muted) {
            this.el_.muted = muted;
        };

        /**
         * Get player width
         *
         * @return {Number}
         * @method width
         */

        Html5.prototype.width = function width() {
            return this.el_.offsetWidth;
        };

        /**
         * Get player height
         *
         * @return {Number}
         * @method height
         */

        Html5.prototype.height = function height() {
            return this.el_.offsetHeight;
        };

        /**
         * Get if there is fullscreen support
         *
         * @return {Boolean}
         * @method supportsFullScreen
         */

        Html5.prototype.supportsFullScreen = function supportsFullScreen() {
            if (typeof this.el_.webkitEnterFullScreen === 'function') {
                var userAgent = _globalWindow2['default'].navigator.userAgent;
                // Seems to be broken in Chromium/Chrome && Safari in Leopard
                if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
                    return true;
                }
            }
            return false;
        };

        /**
         * Request to enter fullscreen
         *
         * @method enterFullScreen
         */

        Html5.prototype.enterFullScreen = function enterFullScreen() {
            var video = this.el_;

            if ('webkitDisplayingFullscreen' in video) {
                this.one('webkitbeginfullscreen', function () {
                    this.one('webkitendfullscreen', function () {
                        this.trigger('fullscreenchange', { isFullscreen: false });
                    });

                    this.trigger('fullscreenchange', { isFullscreen: true });
                });
            }

            if (video.paused && video.networkState <= video.HAVE_METADATA) {
                // attempt to prime the video element for programmatic access
                // this isn't necessary on the desktop but shouldn't hurt
                this.el_.play();

                // playing and pausing synchronously during the transition to fullscreen
                // can get iOS ~6.1 devices into a play/pause loop
                this.setTimeout(function () {
                    video.pause();
                    video.webkitEnterFullScreen();
                }, 0);
            } else {
                video.webkitEnterFullScreen();
            }
        };

        /**
         * Request to exit fullscreen
         *
         * @method exitFullScreen
         */

        Html5.prototype.exitFullScreen = function exitFullScreen() {
            this.el_.webkitExitFullScreen();
        };

        /**
         * Get/set video
         *
         * @param {Object=} src Source object
         * @return {Object}
         * @method src
         */

        Html5.prototype.src = function src(_src) {
            if (_src === undefined) {
                return this.el_.src;
            } else {
                // Setting src through `src` instead of `setSrc` will be deprecated
                this.setSrc(_src);
            }
        };

        /**
         * Set video
         *
         * @param {Object} src Source object
         * @deprecated
         * @method setSrc
         */

        Html5.prototype.setSrc = function setSrc(src) {
            this.el_.src = src;
        };

        /**
         * Load media into player
         *
         * @method load
         */

        Html5.prototype.load = function load() {
            this.el_.load();
        };

        /**
         * Reset the tech. Removes all sources and calls `load`.
         *
         * @method reset
         */

        Html5.prototype.reset = function reset() {
            Html5.resetMediaElement(this.el_);
        };

        /**
         * Get current source
         *
         * @return {Object}
         * @method currentSrc
         */

        Html5.prototype.currentSrc = function currentSrc() {
            if (this.currentSource_) {
                return this.currentSource_.src;
            } else {
                return this.el_.currentSrc;
            }
        };

        /**
         * Get poster
         *
         * @return {String}
         * @method poster
         */

        Html5.prototype.poster = function poster() {
            return this.el_.poster;
        };

        /**
         * Set poster
         *
         * @param {String} val URL to poster image
         * @method
         */

        Html5.prototype.setPoster = function setPoster(val) {
            this.el_.poster = val;
        };

        /**
         * Get preload attribute
         *
         * @return {String}
         * @method preload
         */

        Html5.prototype.preload = function preload() {
            return this.el_.preload;
        };

        /**
         * Set preload attribute
         *
         * @param {String} val Value for preload attribute
         * @method setPreload
         */

        Html5.prototype.setPreload = function setPreload(val) {
            this.el_.preload = val;
        };

        /**
         * Get autoplay attribute
         *
         * @return {String}
         * @method autoplay
         */

        Html5.prototype.autoplay = function autoplay() {
            return this.el_.autoplay;
        };

        /**
         * Set autoplay attribute
         *
         * @param {String} val Value for preload attribute
         * @method setAutoplay
         */

        Html5.prototype.setAutoplay = function setAutoplay(val) {
            this.el_.autoplay = val;
        };

        /**
         * Get controls attribute
         *
         * @return {String}
         * @method controls
         */

        Html5.prototype.controls = function controls() {
            return this.el_.controls;
        };

        /**
         * Set controls attribute
         *
         * @param {String} val Value for controls attribute
         * @method setControls
         */

        Html5.prototype.setControls = function setControls(val) {
            this.el_.controls = !!val;
        };

        /**
         * Get loop attribute
         *
         * @return {String}
         * @method loop
         */

        Html5.prototype.loop = function loop() {
            return this.el_.loop;
        };

        /**
         * Set loop attribute
         *
         * @param {String} val Value for loop attribute
         * @method setLoop
         */

        Html5.prototype.setLoop = function setLoop(val) {
            this.el_.loop = val;
        };

        /**
         * Get error value
         *
         * @return {String}
         * @method error
         */

        Html5.prototype.error = function error() {
            return this.el_.error;
        };

        /**
         * Get whether or not the player is in the "seeking" state
         *
         * @return {Boolean}
         * @method seeking
         */

        Html5.prototype.seeking = function seeking() {
            return this.el_.seeking;
        };

        /**
         * Get a TimeRanges object that represents the
         * ranges of the media resource to which it is possible
         * for the user agent to seek.
         *
         * @return {TimeRangeObject}
         * @method seekable
         */

        Html5.prototype.seekable = function seekable() {
            return this.el_.seekable;
        };

        /**
         * Get if video ended
         *
         * @return {Boolean}
         * @method ended
         */

        Html5.prototype.ended = function ended() {
            return this.el_.ended;
        };

        /**
         * Get the value of the muted content attribute
         * This attribute has no dynamic effect, it only
         * controls the default state of the element
         *
         * @return {Boolean}
         * @method defaultMuted
         */

        Html5.prototype.defaultMuted = function defaultMuted() {
            return this.el_.defaultMuted;
        };

        /**
         * Get desired speed at which the media resource is to play
         *
         * @return {Number}
         * @method playbackRate
         */

        Html5.prototype.playbackRate = function playbackRate() {
            return this.el_.playbackRate;
        };

        /**
         * Returns a TimeRanges object that represents the ranges of the
         * media resource that the user agent has played.
         * @return {TimeRangeObject} the range of points on the media
         * timeline that has been reached through normal playback
         * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-played
         */

        Html5.prototype.played = function played() {
            return this.el_.played;
        };

        /**
         * Set desired speed at which the media resource is to play
         *
         * @param {Number} val Speed at which the media resource is to play
         * @method setPlaybackRate
         */

        Html5.prototype.setPlaybackRate = function setPlaybackRate(val) {
            this.el_.playbackRate = val;
        };

        /**
         * Get the current state of network activity for the element, from
         * the list below
         * NETWORK_EMPTY (numeric value 0)
         * NETWORK_IDLE (numeric value 1)
         * NETWORK_LOADING (numeric value 2)
         * NETWORK_NO_SOURCE (numeric value 3)
         *
         * @return {Number}
         * @method networkState
         */

        Html5.prototype.networkState = function networkState() {
            return this.el_.networkState;
        };

        /**
         * Get a value that expresses the current state of the element
         * with respect to rendering the current playback position, from
         * the codes in the list below
         * HAVE_NOTHING (numeric value 0)
         * HAVE_METADATA (numeric value 1)
         * HAVE_CURRENT_DATA (numeric value 2)
         * HAVE_FUTURE_DATA (numeric value 3)
         * HAVE_ENOUGH_DATA (numeric value 4)
         *
         * @return {Number}
         * @method readyState
         */

        Html5.prototype.readyState = function readyState() {
            return this.el_.readyState;
        };

        /**
         * Get width of video
         *
         * @return {Number}
         * @method videoWidth
         */

        Html5.prototype.videoWidth = function videoWidth() {
            return this.el_.videoWidth;
        };

        /**
         * Get height of video
         *
         * @return {Number}
         * @method videoHeight
         */

        Html5.prototype.videoHeight = function videoHeight() {
            return this.el_.videoHeight;
        };

        /**
         * Get text tracks
         *
         * @return {TextTrackList}
         * @method textTracks
         */

        Html5.prototype.textTracks = function textTracks() {
            return _Tech.prototype.textTracks.call(this);
        };

        /**
         * Creates and returns a text track object
         *
         * @param {String} kind Text track kind (subtitles, captions, descriptions
         *                                       chapters and metadata)
         * @param {String=} label Label to identify the text track
         * @param {String=} language Two letter language abbreviation
         * @return {TextTrackObject}
         * @method addTextTrack
         */

        Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {
            if (!this['featuresNativeTextTracks']) {
                return _Tech.prototype.addTextTrack.call(this, kind, label, language);
            }

            return this.el_.addTextTrack(kind, label, language);
        };

        /**
         * Creates a remote text track object and returns a html track element
         *
         * @param {Object} options The object should contain values for
         * kind, language, label and src (location of the WebVTT file)
         * @return {HTMLTrackElement}
         * @method addRemoteTextTrack
         */

        Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            if (!this['featuresNativeTextTracks']) {
                return _Tech.prototype.addRemoteTextTrack.call(this, options);
            }

            var htmlTrackElement = _globalDocument2['default'].createElement('track');

            if (options.kind) {
                htmlTrackElement.kind = options.kind;
            }
            if (options.label) {
                htmlTrackElement.label = options.label;
            }
            if (options.language || options.srclang) {
                htmlTrackElement.srclang = options.language || options.srclang;
            }
            if (options['default']) {
                htmlTrackElement['default'] = options['default'];
            }
            if (options.id) {
                htmlTrackElement.id = options.id;
            }
            if (options.src) {
                htmlTrackElement.src = options.src;
            }

            this.el().appendChild(htmlTrackElement);

            // store HTMLTrackElement and TextTrack to remote list
            this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
            this.remoteTextTracks().addTrack_(htmlTrackElement.track);

            return htmlTrackElement;
        };

        /**
         * Remove remote text track from TextTrackList object
         *
         * @param {TextTrackObject} track Texttrack object to remove
         * @method removeRemoteTextTrack
         */

        Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
            if (!this['featuresNativeTextTracks']) {
                return _Tech.prototype.removeRemoteTextTrack.call(this, track);
            }

            var tracks = undefined,
                i = undefined;

            var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

            // remove HTMLTrackElement and TextTrack from remote list
            this.remoteTextTrackEls().removeTrackElement_(trackElement);
            this.remoteTextTracks().removeTrack_(track);

            tracks = this.$$('track');

            i = tracks.length;
            while (i--) {
                if (track === tracks[i] || track === tracks[i].track) {
                    this.el().removeChild(tracks[i]);
                }
            }
        };

        return Html5;
    })(_techJs2['default']);

    Html5.TEST_VID = _globalDocument2['default'].createElement('video');
    var track = _globalDocument2['default'].createElement('track');
    track.kind = 'captions';
    track.srclang = 'en';
    track.label = 'English';
    Html5.TEST_VID.appendChild(track);

    /*
     * Check if HTML5 video is supported by this browser/device
     *
     * @return {Boolean}
     */
    Html5.isSupported = function () {
        // IE9 with no Media Player is a LIAR! (#984)
        try {
            Html5.TEST_VID['volume'] = 0.5;
        } catch (e) {
            return false;
        }

        return !!Html5.TEST_VID.canPlayType;
    };

// Add Source Handler pattern functions to this tech
    _techJs2['default'].withSourceHandlers(Html5);

    /*
     * The default native source handler.
     * This simply passes the source to the video element. Nothing fancy.
     *
     * @param  {Object} source   The source object
     * @param  {Html5} tech  The instance of the HTML5 tech
     */
    Html5.nativeSourceHandler = {};

    /*
     * Check if the video element can play the given videotype
     *
     * @param  {String} type    The mimetype to check
     * @return {String}         'probably', 'maybe', or '' (empty string)
     */
    Html5.nativeSourceHandler.canPlayType = function (type) {
        // IE9 on Windows 7 without MediaPlayer throws an error here
        // https://github.com/videojs/video.js/issues/519
        try {
            return Html5.TEST_VID.canPlayType(type);
        } catch (e) {
            return '';
        }
    };

    /*
     * Check if the video element can handle the source natively
     *
     * @param  {Object} source  The source object
     * @param  {Object} options The options passed to the tech
     * @return {String}         'probably', 'maybe', or '' (empty string)
     */
    Html5.nativeSourceHandler.canHandleSource = function (source, options) {
        var match, ext;

        // If a type was provided we should rely on that
        if (source.type) {
            return Html5.nativeSourceHandler.canPlayType(source.type);
        } else if (source.src) {
            // If no type, fall back to checking 'video/[EXTENSION]'
            ext = Url.getFileExtension(source.src);

            return Html5.nativeSourceHandler.canPlayType('video/' + ext);
        }

        return '';
    };

    /*
     * Pass the source to the video element
     * Adaptive source handlers will have more complicated workflows before passing
     * video data to the video element
     *
     * @param  {Object} source   The source object
     * @param  {Html5}  tech     The instance of the Html5 tech
     * @param  {Object} options  The options to pass to the source
     */
    Html5.nativeSourceHandler.handleSource = function (source, tech, options) {
        tech.setSrc(source.src);
    };

    /*
     * Clean up the source handler when disposing the player or switching sources..
     * (no cleanup is needed when supporting the format natively)
     */
    Html5.nativeSourceHandler.dispose = function () {};

// Register the native source handler
    Html5.registerSourceHandler(Html5.nativeSourceHandler);

    /*
     * Check if the volume can be changed in this browser/device.
     * Volume cannot be changed in a lot of mobile devices.
     * Specifically, it can't be changed from 1 on iOS.
     *
     * @return {Boolean}
     */
    Html5.canControlVolume = function () {
        // IE will error if Windows Media Player not installed #3315
        try {
            var volume = Html5.TEST_VID.volume;
            Html5.TEST_VID.volume = volume / 2 + 0.1;
            return volume !== Html5.TEST_VID.volume;
        } catch (e) {
            return false;
        }
    };

    /*
     * Check if playbackRate is supported in this browser/device.
     *
     * @return {Boolean}
     */
    Html5.canControlPlaybackRate = function () {
        // Playback rate API is implemented in Android Chrome, but doesn't do anything
        // https://github.com/videojs/video.js/issues/3180
        if (browser.IS_ANDROID && browser.IS_CHROME) {
            return false;
        }
        // IE will error if Windows Media Player not installed #3315
        try {
            var playbackRate = Html5.TEST_VID.playbackRate;
            Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
            return playbackRate !== Html5.TEST_VID.playbackRate;
        } catch (e) {
            return false;
        }
    };

    /*
     * Check to see if native text tracks are supported by this browser/device
     *
     * @return {Boolean}
     */
    Html5.supportsNativeTextTracks = function () {
        var supportsTextTracks;

        // Figure out native text track support
        // If mode is a number, we cannot change it because it'll disappear from view.
        // Browsers with numeric modes include IE10 and older (<=2013) samsung android models.
        // Firefox isn't playing nice either with modifying the mode
        // TODO: Investigate firefox: https://github.com/videojs/video.js/issues/1862
        supportsTextTracks = !!Html5.TEST_VID.textTracks;
        if (supportsTextTracks && Html5.TEST_VID.textTracks.length > 0) {
            supportsTextTracks = typeof Html5.TEST_VID.textTracks[0]['mode'] !== 'number';
        }
        if (supportsTextTracks && browser.IS_FIREFOX) {
            supportsTextTracks = false;
        }
        if (supportsTextTracks && !('onremovetrack' in Html5.TEST_VID.textTracks)) {
            supportsTextTracks = false;
        }

        return supportsTextTracks;
    };

    /*
     * Check to see if native video tracks are supported by this browser/device
     *
     * @return {Boolean}
     */
    Html5.supportsNativeVideoTracks = function () {
        var supportsVideoTracks = !!Html5.TEST_VID.videoTracks;
        return supportsVideoTracks;
    };

    /*
     * Check to see if native audio tracks are supported by this browser/device
     *
     * @return {Boolean}
     */
    Html5.supportsNativeAudioTracks = function () {
        var supportsAudioTracks = !!Html5.TEST_VID.audioTracks;
        return supportsAudioTracks;
    };

    /**
     * An array of events available on the Html5 tech.
     *
     * @private
     * @type {Array}
     */
    Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'volumechange'];

    /*
     * Set the tech's volume control support status
     *
     * @type {Boolean}
     */
    Html5.prototype['featuresVolumeControl'] = Html5.canControlVolume();

    /*
     * Set the tech's playbackRate support status
     *
     * @type {Boolean}
     */
    Html5.prototype['featuresPlaybackRate'] = Html5.canControlPlaybackRate();

    /*
     * Set the tech's status on moving the video element.
     * In iOS, if you move a video element in the DOM, it breaks video playback.
     *
     * @type {Boolean}
     */
    Html5.prototype['movingMediaElementInDOM'] = !browser.IS_IOS;

    /*
     * Set the the tech's fullscreen resize support status.
     * HTML video is able to automatically resize when going to fullscreen.
     * (No longer appears to be used. Can probably be removed.)
     */
    Html5.prototype['featuresFullscreenResize'] = true;

    /*
     * Set the tech's progress event support status
     * (this disables the manual progress events of the Tech)
     */
    Html5.prototype['featuresProgressEvents'] = true;

    /*
     * Sets the tech's status on native text track support
     *
     * @type {Boolean}
     */
    Html5.prototype['featuresNativeTextTracks'] = Html5.supportsNativeTextTracks();

    /**
     * Sets the tech's status on native text track support
     *
     * @type {Boolean}
     */
    Html5.prototype['featuresNativeVideoTracks'] = Html5.supportsNativeVideoTracks();

    /**
     * Sets the tech's status on native audio track support
     *
     * @type {Boolean}
     */
    Html5.prototype['featuresNativeAudioTracks'] = Html5.supportsNativeAudioTracks();

// HTML5 Feature detection and Device Fixes --------------------------------- //
    var canPlayType = undefined;
    var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
    var mp4RE = /^video\/mp4/i;

    Html5.patchCanPlayType = function () {
        // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
        if (browser.ANDROID_VERSION >= 4.0) {
            if (!canPlayType) {
                canPlayType = Html5.TEST_VID.constructor.prototype.canPlayType;
            }

            Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
                if (type && mpegurlRE.test(type)) {
                    return 'maybe';
                }
                return canPlayType.call(this, type);
            };
        }

        // Override Android 2.2 and less canPlayType method which is broken
        if (browser.IS_OLD_ANDROID) {
            if (!canPlayType) {
                canPlayType = Html5.TEST_VID.constructor.prototype.canPlayType;
            }

            Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
                if (type && mp4RE.test(type)) {
                    return 'maybe';
                }
                return canPlayType.call(this, type);
            };
        }
    };

    Html5.unpatchCanPlayType = function () {
        var r = Html5.TEST_VID.constructor.prototype.canPlayType;
        Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
        canPlayType = null;
        return r;
    };

// by default, patch the video element
    Html5.patchCanPlayType();

    Html5.disposeMediaElement = function (el) {
        if (!el) {
            return;
        }

        if (el.parentNode) {
            el.parentNode.removeChild(el);
        }

        // remove any child track or source nodes to prevent their loading
        while (el.hasChildNodes()) {
            el.removeChild(el.firstChild);
        }

        // remove any src reference. not setting `src=''` because that causes a warning
        // in firefox
        el.removeAttribute('src');

        // force the media element to update its loading state by calling load()
        // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
        if (typeof el.load === 'function') {
            // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
            (function () {
                try {
                    el.load();
                } catch (e) {
                    // not supported
                }
            })();
        }
    };

    Html5.resetMediaElement = function (el) {
        if (!el) {
            return;
        }

        var sources = el.querySelectorAll('source');
        var i = sources.length;
        while (i--) {
            el.removeChild(sources[i]);
        }

        // remove any src reference.
        // not setting `src=''` because that throws an error
        el.removeAttribute('src');

        if (typeof el.load === 'function') {
            // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
            (function () {
                try {
                    el.load();
                } catch (e) {}
            })();
        }
    };

    _component2['default'].registerComponent('Html5', Html5);
    _techJs2['default'].registerTech('Html5', Html5);
    exports['default'] = Html5;
    module.exports = exports['default'];

},{"../../../src/js/tracks/text-track.js":134,"../component":67,"../utils/browser.js":140,"../utils/dom.js":142,"../utils/fn.js":144,"../utils/log.js":147,"../utils/merge-options.js":148,"../utils/to-title-case.js":151,"../utils/url.js":152,"./tech.js":124,"global/document":1,"global/window":2,"object.assign":45,"tsml":55}],123:[function(_dereq_,module,exports){
    /**
     * @file loader.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _componentJs = _dereq_('../component.js');

    var _componentJs2 = _interopRequireDefault(_componentJs);

    var _techJs = _dereq_('./tech.js');

    var _techJs2 = _interopRequireDefault(_techJs);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');

    var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

    /**
     * The Media Loader is the component that decides which playback technology to load
     * when the player is initialized.
     *
     * @param {Object} player  Main Player
     * @param {Object=} options Object of option names and values
     * @param {Function=} ready    Ready callback function
     * @extends Component
     * @class MediaLoader
     */

    var MediaLoader = (function (_Component) {
        _inherits(MediaLoader, _Component);

        function MediaLoader(player, options, ready) {
            _classCallCheck(this, MediaLoader);

            _Component.call(this, player, options, ready);

            // If there are no sources when the player is initialized,
            // load the first supported playback technology.

            if (!options.playerOptions['sources'] || options.playerOptions['sources'].length === 0) {
                for (var i = 0, j = options.playerOptions['techOrder']; i < j.length; i++) {
                    var techName = _utilsToTitleCaseJs2['default'](j[i]);
                    var tech = _techJs2['default'].getTech(techName);
                    // Support old behavior of techs being registered as components.
                    // Remove once that deprecated behavior is removed.
                    if (!techName) {
                        tech = _componentJs2['default'].getComponent(techName);
                    }

                    // Check if the browser supports this technology
                    if (tech && tech.isSupported()) {
                        player.loadTech_(techName);
                        break;
                    }
                }
            } else {
                // // Loop through playback technologies (HTML5, Flash) and check for support.
                // // Then load the best source.
                // // A few assumptions here:
                // //   All playback technologies respect preload false.
                player.src(options.playerOptions['sources']);
            }
        }

        return MediaLoader;
    })(_componentJs2['default']);

    _componentJs2['default'].registerComponent('MediaLoader', MediaLoader);
    exports['default'] = MediaLoader;
    module.exports = exports['default'];

},{"../component.js":67,"../utils/to-title-case.js":151,"./tech.js":124,"global/window":2}],124:[function(_dereq_,module,exports){
    /**
     * @file tech.js
     * Media Technology Controller - Base class for media playback
     * technology controllers like Flash and HTML5
     */

    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _component = _dereq_('../component');

    var _component2 = _interopRequireDefault(_component);

    var _tracksHtmlTrackElement = _dereq_('../tracks/html-track-element');

    var _tracksHtmlTrackElement2 = _interopRequireDefault(_tracksHtmlTrackElement);

    var _tracksHtmlTrackElementList = _dereq_('../tracks/html-track-element-list');

    var _tracksHtmlTrackElementList2 = _interopRequireDefault(_tracksHtmlTrackElementList);

    var _utilsMergeOptionsJs = _dereq_('../utils/merge-options.js');

    var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);

    var _tracksTextTrack = _dereq_('../tracks/text-track');

    var _tracksTextTrack2 = _interopRequireDefault(_tracksTextTrack);

    var _tracksTextTrackList = _dereq_('../tracks/text-track-list');

    var _tracksTextTrackList2 = _interopRequireDefault(_tracksTextTrackList);

    var _tracksVideoTrack = _dereq_('../tracks/video-track');

    var _tracksVideoTrack2 = _interopRequireDefault(_tracksVideoTrack);

    var _tracksVideoTrackList = _dereq_('../tracks/video-track-list');

    var _tracksVideoTrackList2 = _interopRequireDefault(_tracksVideoTrackList);

    var _tracksAudioTrackList = _dereq_('../tracks/audio-track-list');

    var _tracksAudioTrackList2 = _interopRequireDefault(_tracksAudioTrackList);

    var _tracksAudioTrack = _dereq_('../tracks/audio-track');

    var _tracksAudioTrack2 = _interopRequireDefault(_tracksAudioTrack);

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsLogJs = _dereq_('../utils/log.js');

    var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

    var _utilsTimeRangesJs = _dereq_('../utils/time-ranges.js');

    var _utilsBufferJs = _dereq_('../utils/buffer.js');

    var _mediaErrorJs = _dereq_('../media-error.js');

    var _mediaErrorJs2 = _interopRequireDefault(_mediaErrorJs);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    /**
     * Base class for media (HTML5 Video, Flash) controllers
     *
     * @param {Object=} options Options object
     * @param {Function=} ready Ready callback function
     * @extends Component
     * @class Tech
     */

    var Tech = (function (_Component) {
        _inherits(Tech, _Component);

        function Tech() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
            var ready = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];

            _classCallCheck(this, Tech);

            // we don't want the tech to report user activity automatically.
            // This is done manually in addControlsListeners
            options.reportTouchActivity = false;
            _Component.call(this, null, options, ready);

            // keep track of whether the current source has played at all to
            // implement a very limited played()
            this.hasStarted_ = false;
            this.on('playing', function () {
                this.hasStarted_ = true;
            });
            this.on('loadstart', function () {
                this.hasStarted_ = false;
            });

            this.textTracks_ = options.textTracks;
            this.videoTracks_ = options.videoTracks;
            this.audioTracks_ = options.audioTracks;

            // Manually track progress in cases where the browser/flash player doesn't report it.
            if (!this.featuresProgressEvents) {
                this.manualProgressOn();
            }

            // Manually track timeupdates in cases where the browser/flash player doesn't report it.
            if (!this.featuresTimeupdateEvents) {
                this.manualTimeUpdatesOn();
            }

            if (options.nativeCaptions === false || options.nativeTextTracks === false) {
                this.featuresNativeTextTracks = false;
            }

            if (!this.featuresNativeTextTracks) {
                this.on('ready', this.emulateTextTracks);
            }

            this.initTextTrackListeners();
            this.initTrackListeners();

            // Turn on component tap events
            this.emitTapEvents();
        }

        /**
         * List of associated text tracks
         *
         * @type {TextTrackList}
         * @private
         */

        /* Fallbacks for unsupported event types
         ================================================================================ */
        // Manually trigger progress events based on changes to the buffered amount
        // Many flash players and older HTML5 browsers don't send progress or progress-like events
        /**
         * Turn on progress events
         *
         * @method manualProgressOn
         */

        Tech.prototype.manualProgressOn = function manualProgressOn() {
            this.on('durationchange', this.onDurationChange);

            this.manualProgress = true;

            // Trigger progress watching when a source begins loading
            this.one('ready', this.trackProgress);
        };

        /**
         * Turn off progress events
         *
         * @method manualProgressOff
         */

        Tech.prototype.manualProgressOff = function manualProgressOff() {
            this.manualProgress = false;
            this.stopTrackingProgress();

            this.off('durationchange', this.onDurationChange);
        };

        /**
         * Track progress
         *
         * @method trackProgress
         */

        Tech.prototype.trackProgress = function trackProgress() {
            this.stopTrackingProgress();
            this.progressInterval = this.setInterval(Fn.bind(this, function () {
                // Don't trigger unless buffered amount is greater than last time

                var numBufferedPercent = this.bufferedPercent();

                if (this.bufferedPercent_ !== numBufferedPercent) {
                    this.trigger('progress');
                }

                this.bufferedPercent_ = numBufferedPercent;

                if (numBufferedPercent === 1) {
                    this.stopTrackingProgress();
                }
            }), 500);
        };

        /**
         * Update duration
         *
         * @method onDurationChange
         */

        Tech.prototype.onDurationChange = function onDurationChange() {
            this.duration_ = this.duration();
        };

        /**
         * Create and get TimeRange object for buffering
         *
         * @return {TimeRangeObject}
         * @method buffered
         */

        Tech.prototype.buffered = function buffered() {
            return _utilsTimeRangesJs.createTimeRange(0, 0);
        };

        /**
         * Get buffered percent
         *
         * @return {Number}
         * @method bufferedPercent
         */

        Tech.prototype.bufferedPercent = function bufferedPercent() {
            return _utilsBufferJs.bufferedPercent(this.buffered(), this.duration_);
        };

        /**
         * Stops tracking progress by clearing progress interval
         *
         * @method stopTrackingProgress
         */

        Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {
            this.clearInterval(this.progressInterval);
        };

        /*! Time Tracking -------------------------------------------------------------- */
        /**
         * Set event listeners for on play and pause and tracking current time
         *
         * @method manualTimeUpdatesOn
         */

        Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
            this.manualTimeUpdates = true;

            this.on('play', this.trackCurrentTime);
            this.on('pause', this.stopTrackingCurrentTime);
        };

        /**
         * Remove event listeners for on play and pause and tracking current time
         *
         * @method manualTimeUpdatesOff
         */

        Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
            this.manualTimeUpdates = false;
            this.stopTrackingCurrentTime();
            this.off('play', this.trackCurrentTime);
            this.off('pause', this.stopTrackingCurrentTime);
        };

        /**
         * Tracks current time
         *
         * @method trackCurrentTime
         */

        Tech.prototype.trackCurrentTime = function trackCurrentTime() {
            if (this.currentTimeInterval) {
                this.stopTrackingCurrentTime();
            }
            this.currentTimeInterval = this.setInterval(function () {
                this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
            }, 250); // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
        };

        /**
         * Turn off play progress tracking (when paused or dragging)
         *
         * @method stopTrackingCurrentTime
         */

        Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
            this.clearInterval(this.currentTimeInterval);

            // #1002 - if the video ends right before the next timeupdate would happen,
            // the progress bar won't make it all the way to the end
            this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
        };

        /**
         * Turn off any manual progress or timeupdate tracking
         *
         * @method dispose
         */

        Tech.prototype.dispose = function dispose() {

            // clear out all tracks because we can't reuse them between techs
            this.clearTracks(['audio', 'video', 'text']);

            // Turn off any manual progress or timeupdate tracking
            if (this.manualProgress) {
                this.manualProgressOff();
            }

            if (this.manualTimeUpdates) {
                this.manualTimeUpdatesOff();
            }

            _Component.prototype.dispose.call(this);
        };

        /**
         * clear out a track list, or multiple track lists
         *
         * Note: Techs without source handlers should call this between
         * sources for video & audio tracks, as usually you don't want
         * to use them between tracks and we have no automatic way to do
         * it for you
         *
         * @method clearTracks
         * @param {Array|String} types type(s) of track lists to empty
         */

        Tech.prototype.clearTracks = function clearTracks(types) {
            var _this = this;

            types = [].concat(types);
            // clear out all tracks because we can't reuse them between techs
            types.forEach(function (type) {
                var list = _this[type + 'Tracks']() || [];
                var i = list.length;
                while (i--) {
                    var track = list[i];
                    if (type === 'text') {
                        _this.removeRemoteTextTrack(track);
                    }
                    list.removeTrack_(track);
                }
            });
        };

        /**
         * Reset the tech. Removes all sources and resets readyState.
         *
         * @method reset
         */

        Tech.prototype.reset = function reset() {};

        /**
         * When invoked without an argument, returns a MediaError object
         * representing the current error state of the player or null if
         * there is no error. When invoked with an argument, set the current
         * error state of the player.
         * @param {MediaError=} err    Optional an error object
         * @return {MediaError}        the current error object or null
         * @method error
         */

        Tech.prototype.error = function error(err) {
            if (err !== undefined) {
                this.error_ = new _mediaErrorJs2['default'](err);
                this.trigger('error');
            }
            return this.error_;
        };

        /**
         * Return the time ranges that have been played through for the
         * current source. This implementation is incomplete. It does not
         * track the played time ranges, only whether the source has played
         * at all or not.
         * @return {TimeRangeObject} a single time range if this video has
         * played or an empty set of ranges if not.
         * @method played
         */

        Tech.prototype.played = function played() {
            if (this.hasStarted_) {
                return _utilsTimeRangesJs.createTimeRange(0, 0);
            }
            return _utilsTimeRangesJs.createTimeRange();
        };

        /**
         * Set current time
         *
         * @method setCurrentTime
         */

        Tech.prototype.setCurrentTime = function setCurrentTime() {
            // improve the accuracy of manual timeupdates
            if (this.manualTimeUpdates) {
                this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
            }
        };

        /**
         * Initialize texttrack listeners
         *
         * @method initTextTrackListeners
         */

        Tech.prototype.initTextTrackListeners = function initTextTrackListeners() {
            var textTrackListChanges = Fn.bind(this, function () {
                this.trigger('texttrackchange');
            });

            var tracks = this.textTracks();

            if (!tracks) return;

            tracks.addEventListener('removetrack', textTrackListChanges);
            tracks.addEventListener('addtrack', textTrackListChanges);

            this.on('dispose', Fn.bind(this, function () {
                tracks.removeEventListener('removetrack', textTrackListChanges);
                tracks.removeEventListener('addtrack', textTrackListChanges);
            }));
        };

        /**
         * Initialize audio and video track listeners
         *
         * @method initTrackListeners
         */

        Tech.prototype.initTrackListeners = function initTrackListeners() {
            var _this2 = this;

            var trackTypes = ['video', 'audio'];

            trackTypes.forEach(function (type) {
                var trackListChanges = function trackListChanges() {
                    _this2.trigger(type + 'trackchange');
                };

                var tracks = _this2[type + 'Tracks']();

                tracks.addEventListener('removetrack', trackListChanges);
                tracks.addEventListener('addtrack', trackListChanges);

                _this2.on('dispose', function () {
                    tracks.removeEventListener('removetrack', trackListChanges);
                    tracks.removeEventListener('addtrack', trackListChanges);
                });
            });
        };

        /**
         * Emulate texttracks
         *
         * @method emulateTextTracks
         */

        Tech.prototype.emulateTextTracks = function emulateTextTracks() {
            var _this3 = this;

            var tracks = this.textTracks();
            if (!tracks) {
                return;
            }

            if (!_globalWindow2['default']['WebVTT'] && this.el().parentNode != null) {
                (function () {
                    var script = _globalDocument2['default'].createElement('script');
                    script.src = _this3.options_['vtt.js'] || 'https://cdn.rawgit.com/gkatsev/vtt.js/vjs-v0.12.1/dist/vtt.min.js';
                    script.onload = function () {
                        _this3.trigger('vttjsloaded');
                    };
                    script.onerror = function () {
                        _this3.trigger('vttjserror');
                    };
                    _this3.on('dispose', function () {
                        script.onload = null;
                        script.onerror = null;
                    });
                    // but have not loaded yet and we set it to true before the inject so that
                    // we don't overwrite the injected window.WebVTT if it loads right away
                    _globalWindow2['default']['WebVTT'] = true;
                    _this3.el().parentNode.appendChild(script);
                })();
            }

            var updateDisplay = function updateDisplay() {
                return _this3.trigger('texttrackchange');
            };
            var textTracksChanges = function textTracksChanges() {
                updateDisplay();

                for (var i = 0; i < tracks.length; i++) {
                    var track = tracks[i];
                    track.removeEventListener('cuechange', updateDisplay);
                    if (track.mode === 'showing') {
                        track.addEventListener('cuechange', updateDisplay);
                    }
                }
            };

            textTracksChanges();
            tracks.addEventListener('change', textTracksChanges);

            this.on('dispose', function () {
                tracks.removeEventListener('change', textTracksChanges);
            });
        };

        /**
         * Get videotracks
         *
         * @returns {VideoTrackList}
         * @method videoTracks
         */

        Tech.prototype.videoTracks = function videoTracks() {
            this.videoTracks_ = this.videoTracks_ || new _tracksVideoTrackList2['default']();
            return this.videoTracks_;
        };

        /**
         * Get audiotracklist
         *
         * @returns {AudioTrackList}
         * @method audioTracks
         */

        Tech.prototype.audioTracks = function audioTracks() {
            this.audioTracks_ = this.audioTracks_ || new _tracksAudioTrackList2['default']();
            return this.audioTracks_;
        };

        /*
         * Provide default methods for text tracks.
         *
         * Html5 tech overrides these.
         */

        /**
         * Get texttracks
         *
         * @returns {TextTrackList}
         * @method textTracks
         */

        Tech.prototype.textTracks = function textTracks() {
            this.textTracks_ = this.textTracks_ || new _tracksTextTrackList2['default']();
            return this.textTracks_;
        };

        /**
         * Get remote texttracks
         *
         * @returns {TextTrackList}
         * @method remoteTextTracks
         */

        Tech.prototype.remoteTextTracks = function remoteTextTracks() {
            this.remoteTextTracks_ = this.remoteTextTracks_ || new _tracksTextTrackList2['default']();
            return this.remoteTextTracks_;
        };

        /**
         * Get remote htmltrackelements
         *
         * @returns {HTMLTrackElementList}
         * @method remoteTextTrackEls
         */

        Tech.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
            this.remoteTextTrackEls_ = this.remoteTextTrackEls_ || new _tracksHtmlTrackElementList2['default']();
            return this.remoteTextTrackEls_;
        };

        /**
         * Creates and returns a remote text track object
         *
         * @param {String} kind Text track kind (subtitles, captions, descriptions
         *                                       chapters and metadata)
         * @param {String=} label Label to identify the text track
         * @param {String=} language Two letter language abbreviation
         * @return {TextTrackObject}
         * @method addTextTrack
         */

        Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {
            if (!kind) {
                throw new Error('TextTrack kind is required but was not provided');
            }

            return createTrackHelper(this, kind, label, language);
        };

        /**
         * Creates a remote text track object and returns a emulated html track element
         *
         * @param {Object} options The object should contain values for
         * kind, language, label and src (location of the WebVTT file)
         * @return {HTMLTrackElement}
         * @method addRemoteTextTrack
         */

        Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack(options) {
            var track = _utilsMergeOptionsJs2['default'](options, {
                tech: this
            });

            var htmlTrackElement = new _tracksHtmlTrackElement2['default'](track);

            // store HTMLTrackElement and TextTrack to remote list
            this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
            this.remoteTextTracks().addTrack_(htmlTrackElement.track);

            // must come after remoteTextTracks()
            this.textTracks().addTrack_(htmlTrackElement.track);

            return htmlTrackElement;
        };

        /**
         * Remove remote texttrack
         *
         * @param {TextTrackObject} track Texttrack to remove
         * @method removeRemoteTextTrack
         */

        Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
            this.textTracks().removeTrack_(track);

            var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

            // remove HTMLTrackElement and TextTrack from remote list
            this.remoteTextTrackEls().removeTrackElement_(trackElement);
            this.remoteTextTracks().removeTrack_(track);
        };

        /**
         * Provide a default setPoster method for techs
         * Poster support for techs should be optional, so we don't want techs to
         * break if they don't have a way to set a poster.
         *
         * @method setPoster
         */

        Tech.prototype.setPoster = function setPoster() {};

        /*
         * Check if the tech can support the given type
         *
         * The base tech does not support any type, but source handlers might
         * overwrite this.
         *
         * @param  {String} type    The mimetype to check
         * @return {String}         'probably', 'maybe', or '' (empty string)
         */

        Tech.prototype.canPlayType = function canPlayType() {
            return '';
        };

        /*
         * Return whether the argument is a Tech or not.
         * Can be passed either a Class like `Html5` or a instance like `player.tech_`
         *
         * @param {Object} component An item to check
         * @return {Boolean}         Whether it is a tech or not
         */

        Tech.isTech = function isTech(component) {
            return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
        };

        /**
         * Registers a Tech
         *
         * @param {String} name Name of the Tech to register
         * @param {Object} tech The tech to register
         * @static
         * @method registerComponent
         */

        Tech.registerTech = function registerTech(name, tech) {
            if (!Tech.techs_) {
                Tech.techs_ = {};
            }

            if (!Tech.isTech(tech)) {
                throw new Error('Tech ' + name + ' must be a Tech');
            }

            Tech.techs_[name] = tech;
            return tech;
        };

        /**
         * Gets a component by name
         *
         * @param {String} name Name of the component to get
         * @return {Component}
         * @static
         * @method getComponent
         */

        Tech.getTech = function getTech(name) {
            if (Tech.techs_ && Tech.techs_[name]) {
                return Tech.techs_[name];
            }

            if (_globalWindow2['default'] && _globalWindow2['default'].videojs && _globalWindow2['default'].videojs[name]) {
                _utilsLogJs2['default'].warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');
                return _globalWindow2['default'].videojs[name];
            }
        };

        return Tech;
    })(_component2['default']);

    Tech.prototype.textTracks_;

    /**
     * List of associated audio tracks
     *
     * @type {AudioTrackList}
     * @private
     */
    Tech.prototype.audioTracks_;

    /**
     * List of associated video tracks
     *
     * @type {VideoTrackList}
     * @private
     */
    Tech.prototype.videoTracks_;

    var createTrackHelper = function createTrackHelper(self, kind, label, language) {
        var options = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];

        var tracks = self.textTracks();

        options.kind = kind;

        if (label) {
            options.label = label;
        }
        if (language) {
            options.language = language;
        }
        options.tech = self;

        var track = new _tracksTextTrack2['default'](options);
        tracks.addTrack_(track);

        return track;
    };

    Tech.prototype.featuresVolumeControl = true;

// Resizing plugins using request fullscreen reloads the plugin
    Tech.prototype.featuresFullscreenResize = false;
    Tech.prototype.featuresPlaybackRate = false;

// Optional events that we can manually mimic with timers
// currently not triggered by video-js-swf
    Tech.prototype.featuresProgressEvents = false;
    Tech.prototype.featuresTimeupdateEvents = false;

    Tech.prototype.featuresNativeTextTracks = false;

    /*
     * A functional mixin for techs that want to use the Source Handler pattern.
     *
     * ##### EXAMPLE:
     *
     *   Tech.withSourceHandlers.call(MyTech);
     *
     */
    Tech.withSourceHandlers = function (_Tech) {
        /*
         * Register a source handler
         * Source handlers are scripts for handling specific formats.
         * The source handler pattern is used for adaptive formats (HLS, DASH) that
         * manually load video data and feed it into a Source Buffer (Media Source Extensions)
         * @param  {Function} handler  The source handler
         * @param  {Boolean}  first    Register it before any existing handlers
         */
        _Tech.registerSourceHandler = function (handler, index) {
            var handlers = _Tech.sourceHandlers;

            if (!handlers) {
                handlers = _Tech.sourceHandlers = [];
            }

            if (index === undefined) {
                // add to the end of the list
                index = handlers.length;
            }

            handlers.splice(index, 0, handler);
        };

        /*
         * Check if the tech can support the given type
         * @param  {String} type    The mimetype to check
         * @return {String}         'probably', 'maybe', or '' (empty string)
         */
        _Tech.canPlayType = function (type) {
            var handlers = _Tech.sourceHandlers || [];
            var can = undefined;

            for (var i = 0; i < handlers.length; i++) {
                can = handlers[i].canPlayType(type);

                if (can) {
                    return can;
                }
            }

            return '';
        };

        /*
         * Return the first source handler that supports the source
         * TODO: Answer question: should 'probably' be prioritized over 'maybe'
         * @param  {Object} source  The source object
         * @param  {Object} options The options passed to the tech
         * @returns {Object}       The first source handler that supports the source
         * @returns {null}         Null if no source handler is found
         */
        _Tech.selectSourceHandler = function (source, options) {
            var handlers = _Tech.sourceHandlers || [];
            var can = undefined;

            for (var i = 0; i < handlers.length; i++) {
                can = handlers[i].canHandleSource(source, options);

                if (can) {
                    return handlers[i];
                }
            }

            return null;
        };

        /*
         * Check if the tech can support the given source
         * @param  {Object} srcObj  The source object
         * @param  {Object} options The options passed to the tech
         * @return {String}         'probably', 'maybe', or '' (empty string)
         */
        _Tech.canPlaySource = function (srcObj, options) {
            var sh = _Tech.selectSourceHandler(srcObj, options);

            if (sh) {
                return sh.canHandleSource(srcObj, options);
            }

            return '';
        };

        /*
         * When using a source handler, prefer its implementation of
         * any function normally provided by the tech.
         */
        var deferrable = ['seekable', 'duration'];

        deferrable.forEach(function (fnName) {
            var originalFn = this[fnName];

            if (typeof originalFn !== 'function') {
                return;
            }

            this[fnName] = function () {
                if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
                    return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
                }
                return originalFn.apply(this, arguments);
            };
        }, _Tech.prototype);

        /*
         * Create a function for setting the source using a source object
         * and source handlers.
         * Should never be called unless a source handler was found.
         * @param {Object} source  A source object with src and type keys
         * @return {Tech} self
         */
        _Tech.prototype.setSource = function (source) {
            var sh = _Tech.selectSourceHandler(source, this.options_);

            if (!sh) {
                // Fall back to a native source hander when unsupported sources are
                // deliberately set
                if (_Tech.nativeSourceHandler) {
                    sh = _Tech.nativeSourceHandler;
                } else {
                    _utilsLogJs2['default'].error('No source hander found for the current source.');
                }
            }

            // Dispose any existing source handler
            this.disposeSourceHandler();
            this.off('dispose', this.disposeSourceHandler);

            // if we have a source and get another one
            // then we are loading something new
            // than clear all of our current tracks
            if (this.currentSource_) {
                this.clearTracks(['audio', 'video']);

                this.currentSource_ = null;
            }

            if (sh !== _Tech.nativeSourceHandler) {

                this.currentSource_ = source;

                // Catch if someone replaced the src without calling setSource.
                // If they do, set currentSource_ to null and dispose our source handler.
                this.off(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
                this.off(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
                this.one(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
            }

            this.sourceHandler_ = sh.handleSource(source, this, this.options_);
            this.on('dispose', this.disposeSourceHandler);

            return this;
        };

        // On the first loadstart after setSource
        _Tech.prototype.firstLoadStartListener_ = function () {
            this.one(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
        };

        // On successive loadstarts when setSource has not been called again
        _Tech.prototype.successiveLoadStartListener_ = function () {
            this.currentSource_ = null;
            this.disposeSourceHandler();
            this.one(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
        };

        /*
         * Clean up any existing source handler
         */
        _Tech.prototype.disposeSourceHandler = function () {
            if (this.sourceHandler_ && this.sourceHandler_.dispose) {
                this.off(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
                this.off(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
                this.sourceHandler_.dispose();
                this.sourceHandler_ = null;
            }
        };
    };

    _component2['default'].registerComponent('Tech', Tech);
// Old name for Tech
    _component2['default'].registerComponent('MediaTechController', Tech);
    Tech.registerTech('Tech', Tech);
    exports['default'] = Tech;
    module.exports = exports['default'];

},{"../component":67,"../media-error.js":108,"../tracks/audio-track":126,"../tracks/audio-track-list":125,"../tracks/html-track-element":128,"../tracks/html-track-element-list":127,"../tracks/text-track":134,"../tracks/text-track-list":132,"../tracks/video-track":139,"../tracks/video-track-list":138,"../utils/buffer.js":141,"../utils/fn.js":144,"../utils/log.js":147,"../utils/merge-options.js":148,"../utils/time-ranges.js":150,"global/document":1,"global/window":2}],125:[function(_dereq_,module,exports){
    /**
     * @file audio-track-list.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _trackList = _dereq_('./track-list');

    var _trackList2 = _interopRequireDefault(_trackList);

    var _utilsBrowserJs = _dereq_('../utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    /**
     * anywhere we call this function we diverge from the spec
     * as we only support one enabled audiotrack at a time
     *
     * @param {Array|AudioTrackList} list list to work on
     * @param {AudioTrack} track the track to skip
     */
    var disableOthers = function disableOthers(list, track) {
        for (var i = 0; i < list.length; i++) {
            if (track.id === list[i].id) {
                continue;
            }
            // another audio track is enabled, disable it
            list[i].enabled = false;
        }
    };
    /**
     * A list of possible audio tracks. All functionality is in the
     * base class Tracklist and the spec for AudioTrackList is located at:
     * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
     *
     * interface AudioTrackList : EventTarget {
 *   readonly attribute unsigned long length;
 *   getter AudioTrack (unsigned long index);
 *   AudioTrack? getTrackById(DOMString id);
 *
 *   attribute EventHandler onchange;
 *   attribute EventHandler onaddtrack;
 *   attribute EventHandler onremovetrack;
 * };
     *
     * @param {AudioTrack[]} tracks a list of audio tracks to instantiate the list with
     * @extends TrackList
     * @class AudioTrackList
     */

    var AudioTrackList = (function (_TrackList) {
        _inherits(AudioTrackList, _TrackList);

        function AudioTrackList() {
            var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

            _classCallCheck(this, AudioTrackList);

            var list = undefined;

            // make sure only 1 track is enabled
            // sorted from last index to first index
            for (var i = tracks.length - 1; i >= 0; i--) {
                if (tracks[i].enabled) {
                    disableOthers(tracks, tracks[i]);
                    break;
                }
            }

            // IE8 forces us to implement inheritance ourselves
            // as it does not support Object.defineProperty properly
            if (browser.IS_IE8) {
                list = _globalDocument2['default'].createElement('custom');
                for (var prop in _trackList2['default'].prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = _trackList2['default'].prototype[prop];
                    }
                }
                for (var prop in AudioTrackList.prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = AudioTrackList.prototype[prop];
                    }
                }
            }

            list = _TrackList.call(this, tracks, list);
            list.changing_ = false;

            return list;
        }

        AudioTrackList.prototype.addTrack_ = function addTrack_(track) {
            var _this = this;

            if (track.enabled) {
                disableOthers(this, track);
            }

            _TrackList.prototype.addTrack_.call(this, track);
            // native tracks don't have this
            if (!track.addEventListener) {
                return;
            }

            track.addEventListener('enabledchange', function () {
                // when we are disabling other tracks (since we don't support
                // more than one track at a time) we will set changing_
                // to true so that we don't trigger additional change events
                if (_this.changing_) {
                    return;
                }
                _this.changing_ = true;
                disableOthers(_this, track);
                _this.changing_ = false;
                _this.trigger('change');
            });
        };

        AudioTrackList.prototype.addTrack = function addTrack(track) {
            this.addTrack_(track);
        };

        AudioTrackList.prototype.removeTrack = function removeTrack(track) {
            _TrackList.prototype.removeTrack_.call(this, track);
        };

        return AudioTrackList;
    })(_trackList2['default']);

    exports['default'] = AudioTrackList;
    module.exports = exports['default'];

},{"../utils/browser.js":140,"./track-list":136,"global/document":1}],126:[function(_dereq_,module,exports){
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _trackEnums = _dereq_('./track-enums');

    var _track = _dereq_('./track');

    var _track2 = _interopRequireDefault(_track);

    var _utilsMergeOptions = _dereq_('../utils/merge-options');

    var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);

    var _utilsBrowserJs = _dereq_('../utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    /**
     * A single audio text track as defined in:
     * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack
     *
     * interface AudioTrack {
 *   readonly attribute DOMString id;
 *   readonly attribute DOMString kind;
 *   readonly attribute DOMString label;
 *   readonly attribute DOMString language;
 *   attribute boolean enabled;
 * };
     *
     * @param {Object=} options Object of option names and values
     * @class AudioTrack
     */

    var AudioTrack = (function (_Track) {
        _inherits(AudioTrack, _Track);

        function AudioTrack() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            _classCallCheck(this, AudioTrack);

            var settings = _utilsMergeOptions2['default'](options, {
                kind: _trackEnums.AudioTrackKind[options.kind] || ''
            });
            // on IE8 this will be a document element
            // for every other browser this will be a normal object
            var track = _Track.call(this, settings);
            var enabled = false;

            if (browser.IS_IE8) {
                for (var prop in AudioTrack.prototype) {
                    if (prop !== 'constructor') {
                        track[prop] = AudioTrack.prototype[prop];
                    }
                }
            }

            Object.defineProperty(track, 'enabled', {
                get: function get() {
                    return enabled;
                },
                set: function set(newEnabled) {
                    // an invalid or unchanged value
                    if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {
                        return;
                    }
                    enabled = newEnabled;
                    this.trigger('enabledchange');
                }
            });

            // if the user sets this track to selected then
            // set selected to that true value otherwise
            // we keep it false
            if (settings.enabled) {
                track.enabled = settings.enabled;
            }
            track.loaded_ = true;

            return track;
        }

        return AudioTrack;
    })(_track2['default']);

    exports['default'] = AudioTrack;
    module.exports = exports['default'];

},{"../utils/browser.js":140,"../utils/merge-options":148,"./track":137,"./track-enums":135}],127:[function(_dereq_,module,exports){
    /**
     * @file html-track-element-list.js
     */

    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _utilsBrowserJs = _dereq_('../utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var HtmlTrackElementList = (function () {
        function HtmlTrackElementList() {
            var trackElements = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

            _classCallCheck(this, HtmlTrackElementList);

            var list = this;

            if (browser.IS_IE8) {
                list = _globalDocument2['default'].createElement('custom');

                for (var prop in HtmlTrackElementList.prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = HtmlTrackElementList.prototype[prop];
                    }
                }
            }

            list.trackElements_ = [];

            Object.defineProperty(list, 'length', {
                get: function get() {
                    return this.trackElements_.length;
                }
            });

            for (var i = 0, _length = trackElements.length; i < _length; i++) {
                list.addTrackElement_(trackElements[i]);
            }

            if (browser.IS_IE8) {
                return list;
            }
        }

        HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {
            this.trackElements_.push(trackElement);
        };

        HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
            var trackElement_ = undefined;

            for (var i = 0, _length2 = this.trackElements_.length; i < _length2; i++) {
                if (track === this.trackElements_[i].track) {
                    trackElement_ = this.trackElements_[i];

                    break;
                }
            }

            return trackElement_;
        };

        HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {
            for (var i = 0, _length3 = this.trackElements_.length; i < _length3; i++) {
                if (trackElement === this.trackElements_[i]) {
                    this.trackElements_.splice(i, 1);

                    break;
                }
            }
        };

        return HtmlTrackElementList;
    })();

    exports['default'] = HtmlTrackElementList;
    module.exports = exports['default'];

},{"../utils/browser.js":140,"global/document":1}],128:[function(_dereq_,module,exports){
    /**
     * @file html-track-element.js
     */

    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _utilsBrowserJs = _dereq_('../utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _eventTarget = _dereq_('../event-target');

    var _eventTarget2 = _interopRequireDefault(_eventTarget);

    var _tracksTextTrack = _dereq_('../tracks/text-track');

    var _tracksTextTrack2 = _interopRequireDefault(_tracksTextTrack);

    var NONE = 0;
    var LOADING = 1;
    var LOADED = 2;
    var ERROR = 3;

    /**
     * https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement
     *
     * interface HTMLTrackElement : HTMLElement {
 *   attribute DOMString kind;
 *   attribute DOMString src;
 *   attribute DOMString srclang;
 *   attribute DOMString label;
 *   attribute boolean default;
 *
 *   const unsigned short NONE = 0;
 *   const unsigned short LOADING = 1;
 *   const unsigned short LOADED = 2;
 *   const unsigned short ERROR = 3;
 *   readonly attribute unsigned short readyState;
 *
 *   readonly attribute TextTrack track;
 * };
     *
     * @param {Object} options TextTrack configuration
     * @class HTMLTrackElement
     */

    var HTMLTrackElement = (function (_EventTarget) {
        _inherits(HTMLTrackElement, _EventTarget);

        function HTMLTrackElement() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            _classCallCheck(this, HTMLTrackElement);

            _EventTarget.call(this);

            var readyState = undefined,
                trackElement = this;

            if (browser.IS_IE8) {
                trackElement = _globalDocument2['default'].createElement('custom');

                for (var prop in HTMLTrackElement.prototype) {
                    if (prop !== 'constructor') {
                        trackElement[prop] = HTMLTrackElement.prototype[prop];
                    }
                }
            }

            var track = new _tracksTextTrack2['default'](options);

            trackElement.kind = track.kind;
            trackElement.src = track.src;
            trackElement.srclang = track.language;
            trackElement.label = track.label;
            trackElement['default'] = track['default'];

            Object.defineProperty(trackElement, 'readyState', {
                get: function get() {
                    return readyState;
                }
            });

            Object.defineProperty(trackElement, 'track', {
                get: function get() {
                    return track;
                }
            });

            readyState = NONE;

            track.addEventListener('loadeddata', function () {
                readyState = LOADED;

                trackElement.trigger({
                    type: 'load',
                    target: trackElement
                });
            });

            if (browser.IS_IE8) {
                return trackElement;
            }
        }

        return HTMLTrackElement;
    })(_eventTarget2['default']);

    HTMLTrackElement.prototype.allowedEvents_ = {
        load: 'load'
    };

    HTMLTrackElement.NONE = NONE;
    HTMLTrackElement.LOADING = LOADING;
    HTMLTrackElement.LOADED = LOADED;
    HTMLTrackElement.ERROR = ERROR;

    exports['default'] = HTMLTrackElement;
    module.exports = exports['default'];

},{"../event-target":104,"../tracks/text-track":134,"../utils/browser.js":140,"global/document":1}],129:[function(_dereq_,module,exports){
    /**
     * @file text-track-cue-list.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _utilsBrowserJs = _dereq_('../utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    /**
     * A List of text track cues as defined in:
     * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist
     *
     * interface TextTrackCueList {
 *   readonly attribute unsigned long length;
 *   getter TextTrackCue (unsigned long index);
 *   TextTrackCue? getCueById(DOMString id);
 * };
     *
     * @param {Array} cues A list of cues to be initialized with
     * @class TextTrackCueList
     */

    var TextTrackCueList = (function () {
        function TextTrackCueList(cues) {
            _classCallCheck(this, TextTrackCueList);

            var list = this;

            if (browser.IS_IE8) {
                list = _globalDocument2['default'].createElement('custom');

                for (var prop in TextTrackCueList.prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = TextTrackCueList.prototype[prop];
                    }
                }
            }

            TextTrackCueList.prototype.setCues_.call(list, cues);

            Object.defineProperty(list, 'length', {
                get: function get() {
                    return this.length_;
                }
            });

            if (browser.IS_IE8) {
                return list;
            }
        }

        /**
         * A setter for cues in this list
         *
         * @param {Array} cues an array of cues
         * @method setCues_
         * @private
         */

        TextTrackCueList.prototype.setCues_ = function setCues_(cues) {
            var oldLength = this.length || 0;
            var i = 0;
            var l = cues.length;

            this.cues_ = cues;
            this.length_ = cues.length;

            var defineProp = function defineProp(index) {
                if (!('' + index in this)) {
                    Object.defineProperty(this, '' + index, {
                        get: function get() {
                            return this.cues_[index];
                        }
                    });
                }
            };

            if (oldLength < l) {
                i = oldLength;

                for (; i < l; i++) {
                    defineProp.call(this, i);
                }
            }
        };

        /**
         * Get a cue that is currently in the Cue list by id
         *
         * @param {String} id
         * @method getCueById
         * @return {Object} a single cue
         */

        TextTrackCueList.prototype.getCueById = function getCueById(id) {
            var result = null;

            for (var i = 0, l = this.length; i < l; i++) {
                var cue = this[i];

                if (cue.id === id) {
                    result = cue;
                    break;
                }
            }

            return result;
        };

        return TextTrackCueList;
    })();

    exports['default'] = TextTrackCueList;
    module.exports = exports['default'];

},{"../utils/browser.js":140,"global/document":1}],130:[function(_dereq_,module,exports){
    /**
     * @file text-track-display.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _component = _dereq_('../component');

    var _component2 = _interopRequireDefault(_component);

    var _menuMenuJs = _dereq_('../menu/menu.js');

    var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

    var _menuMenuItemJs = _dereq_('../menu/menu-item.js');

    var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

    var _menuMenuButtonJs = _dereq_('../menu/menu-button.js');

    var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var darkGray = '#222';
    var lightGray = '#ccc';
    var fontMap = {
        monospace: 'monospace',
        sansSerif: 'sans-serif',
        serif: 'serif',
        monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
        monospaceSerif: '"Courier New", monospace',
        proportionalSansSerif: 'sans-serif',
        proportionalSerif: 'serif',
        casual: '"Comic Sans MS", Impact, fantasy',
        script: '"Monotype Corsiva", cursive',
        smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
    };

    /**
     * The component for displaying text track cues
     *
     * @param {Object} player  Main Player
     * @param {Object=} options Object of option names and values
     * @param {Function=} ready    Ready callback function
     * @extends Component
     * @class TextTrackDisplay
     */

    var TextTrackDisplay = (function (_Component) {
        _inherits(TextTrackDisplay, _Component);

        function TextTrackDisplay(player, options, ready) {
            _classCallCheck(this, TextTrackDisplay);

            _Component.call(this, player, options, ready);

            player.on('loadstart', Fn.bind(this, this.toggleDisplay));
            player.on('texttrackchange', Fn.bind(this, this.updateDisplay));

            // This used to be called during player init, but was causing an error
            // if a track should show by default and the display hadn't loaded yet.
            // Should probably be moved to an external track loader when we support
            // tracks that don't need a display.
            player.ready(Fn.bind(this, function () {
                if (player.tech_ && player.tech_['featuresNativeTextTracks']) {
                    this.hide();
                    return;
                }

                player.on('fullscreenchange', Fn.bind(this, this.updateDisplay));

                var tracks = this.options_.playerOptions['tracks'] || [];
                for (var i = 0; i < tracks.length; i++) {
                    var track = tracks[i];
                    this.player_.addRemoteTextTrack(track);
                }

                var modes = { 'captions': 1, 'subtitles': 1 };
                var trackList = this.player_.textTracks();
                var firstDesc = undefined;
                var firstCaptions = undefined;

                if (trackList) {
                    for (var i = 0; i < trackList.length; i++) {
                        var track = trackList[i];
                        if (track['default']) {
                            if (track.kind === 'descriptions' && !firstDesc) {
                                firstDesc = track;
                            } else if (track.kind in modes && !firstCaptions) {
                                firstCaptions = track;
                            }
                        }
                    }

                    // We want to show the first default track but captions and subtitles
                    // take precedence over descriptions.
                    // So, display the first default captions or subtitles track
                    // and otherwise the first default descriptions track.
                    if (firstCaptions) {
                        firstCaptions.mode = 'showing';
                    } else if (firstDesc) {
                        firstDesc.mode = 'showing';
                    }
                }
            }));
        }

        /**
         * Add cue HTML to display
         *
         * @param {Number} color Hex number for color, like #f0e
         * @param {Number} opacity Value for opacity,0.0 - 1.0
         * @return {RGBAColor} In the form 'rgba(255, 0, 0, 0.3)'
         * @method constructColor
         */

        /**
         * Toggle display texttracks
         *
         * @method toggleDisplay
         */

        TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
            if (this.player_.tech_ && this.player_.tech_['featuresNativeTextTracks']) {
                this.hide();
            } else {
                this.show();
            }
        };

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        TextTrackDisplay.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-text-track-display'
            }, {
                'aria-live': 'assertive',
                'aria-atomic': 'true'
            });
        };

        /**
         * Clear display texttracks
         *
         * @method clearDisplay
         */

        TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
            if (typeof _globalWindow2['default']['WebVTT'] === 'function') {
                _globalWindow2['default']['WebVTT']['processCues'](_globalWindow2['default'], [], this.el_);
            }
        };

        /**
         * Update display texttracks
         *
         * @method updateDisplay
         */

        TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
            var tracks = this.player_.textTracks();

            this.clearDisplay();

            if (!tracks) {
                return;
            }

            // Track display prioritization model: if multiple tracks are 'showing',
            //  display the first 'subtitles' or 'captions' track which is 'showing',
            //  otherwise display the first 'descriptions' track which is 'showing'

            var descriptionsTrack = null;
            var captionsSubtitlesTrack = null;

            var i = tracks.length;
            while (i--) {
                var track = tracks[i];
                if (track['mode'] === 'showing') {
                    if (track['kind'] === 'descriptions') {
                        descriptionsTrack = track;
                    } else {
                        captionsSubtitlesTrack = track;
                    }
                }
            }

            if (captionsSubtitlesTrack) {
                this.updateForTrack(captionsSubtitlesTrack);
            } else if (descriptionsTrack) {
                this.updateForTrack(descriptionsTrack);
            }
        };

        /**
         * Add texttrack to texttrack list
         *
         * @param {TextTrackObject} track Texttrack object to be added to list
         * @method updateForTrack
         */

        TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
            if (typeof _globalWindow2['default']['WebVTT'] !== 'function' || !track['activeCues']) {
                return;
            }

            var overrides = this.player_['textTrackSettings'].getValues();

            var cues = [];
            for (var _i = 0; _i < track['activeCues'].length; _i++) {
                cues.push(track['activeCues'][_i]);
            }

            _globalWindow2['default']['WebVTT']['processCues'](_globalWindow2['default'], cues, this.el_);

            var i = cues.length;
            while (i--) {
                var cue = cues[i];
                if (!cue) {
                    continue;
                }

                var cueDiv = cue.displayState;
                if (overrides.color) {
                    cueDiv.firstChild.style.color = overrides.color;
                }
                if (overrides.textOpacity) {
                    tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
                }
                if (overrides.backgroundColor) {
                    cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
                }
                if (overrides.backgroundOpacity) {
                    tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
                }
                if (overrides.windowColor) {
                    if (overrides.windowOpacity) {
                        tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
                    } else {
                        cueDiv.style.backgroundColor = overrides.windowColor;
                    }
                }
                if (overrides.edgeStyle) {
                    if (overrides.edgeStyle === 'dropshadow') {
                        cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
                    } else if (overrides.edgeStyle === 'raised') {
                        cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
                    } else if (overrides.edgeStyle === 'depressed') {
                        cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
                    } else if (overrides.edgeStyle === 'uniform') {
                        cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
                    }
                }
                if (overrides.fontPercent && overrides.fontPercent !== 1) {
                    var fontSize = _globalWindow2['default'].parseFloat(cueDiv.style.fontSize);
                    cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
                    cueDiv.style.height = 'auto';
                    cueDiv.style.top = 'auto';
                    cueDiv.style.bottom = '2px';
                }
                if (overrides.fontFamily && overrides.fontFamily !== 'default') {
                    if (overrides.fontFamily === 'small-caps') {
                        cueDiv.firstChild.style.fontVariant = 'small-caps';
                    } else {
                        cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
                    }
                }
            }
        };

        return TextTrackDisplay;
    })(_component2['default']);

    function constructColor(color, opacity) {
        return 'rgba(' +
                // color looks like "#f0e"
            parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';
    }

    /**
     * Try to update style
     * Some style changes will throw an error, particularly in IE8. Those should be noops.
     *
     * @param {Element} el The element to be styles
     * @param {CSSProperty} style The CSS property to be styled
     * @param {CSSStyle} rule The actual style to be applied to the property
     * @method tryUpdateStyle
     */
    function tryUpdateStyle(el, style, rule) {
        //
        try {
            el.style[style] = rule;
        } catch (e) {}
    }

    _component2['default'].registerComponent('TextTrackDisplay', TextTrackDisplay);
    exports['default'] = TextTrackDisplay;
    module.exports = exports['default'];

},{"../component":67,"../menu/menu-button.js":109,"../menu/menu-item.js":110,"../menu/menu.js":111,"../utils/fn.js":144,"global/document":1,"global/window":2}],131:[function(_dereq_,module,exports){
    /**
     * Utilities for capturing text track state and re-creating tracks
     * based on a capture.
     *
     * @file text-track-list-converter.js
     */

    /**
     * Examine a single text track and return a JSON-compatible javascript
     * object that represents the text track's state.
     * @param track {TextTrackObject} the text track to query
     * @return {Object} a serializable javascript representation of the
     * @private
     */
    'use strict';

    exports.__esModule = true;
    var trackToJson_ = function trackToJson_(track) {
        var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {
            if (track[prop]) {
                acc[prop] = track[prop];
            }

            return acc;
        }, {
            cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {
                return {
                    startTime: cue.startTime,
                    endTime: cue.endTime,
                    text: cue.text,
                    id: cue.id
                };
            })
        });

        return ret;
    };

    /**
     * Examine a tech and return a JSON-compatible javascript array that
     * represents the state of all text tracks currently configured. The
     * return array is compatible with `jsonToTextTracks`.
     * @param tech {tech} the tech object to query
     * @return {Array} a serializable javascript representation of the
     * @function textTracksToJson
     */
    var textTracksToJson = function textTracksToJson(tech) {

        var trackEls = tech.$$('track');

        var trackObjs = Array.prototype.map.call(trackEls, function (t) {
            return t.track;
        });
        var tracks = Array.prototype.map.call(trackEls, function (trackEl) {
            var json = trackToJson_(trackEl.track);
            if (trackEl.src) {
                json.src = trackEl.src;
            }
            return json;
        });

        return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {
            return trackObjs.indexOf(track) === -1;
        }).map(trackToJson_));
    };

    /**
     * Creates a set of remote text tracks on a tech based on an array of
     * javascript text track representations.
     * @param json {Array} an array of text track representation objects,
     * like those that would be produced by `textTracksToJson`
     * @param tech {tech} the tech to create text tracks on
     * @function jsonToTextTracks
     */
    var jsonToTextTracks = function jsonToTextTracks(json, tech) {
        json.forEach(function (track) {
            var addedTrack = tech.addRemoteTextTrack(track).track;
            if (!track.src && track.cues) {
                track.cues.forEach(function (cue) {
                    return addedTrack.addCue(cue);
                });
            }
        });

        return tech.textTracks();
    };

    exports['default'] = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };
    module.exports = exports['default'];

},{}],132:[function(_dereq_,module,exports){
    /**
     * @file text-track-list.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _trackList = _dereq_('./track-list');

    var _trackList2 = _interopRequireDefault(_trackList);

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsBrowserJs = _dereq_('../utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    /**
     * A list of possible text tracks. All functionality is in the
     * base class TrackList. The spec for TextTrackList is located at:
     * @link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist
     *
     * interface TextTrackList : EventTarget {
 *   readonly attribute unsigned long length;
 *   getter TextTrack (unsigned long index);
 *   TextTrack? getTrackById(DOMString id);
 *
 *   attribute EventHandler onchange;
 *   attribute EventHandler onaddtrack;
 *   attribute EventHandler onremovetrack;
 * };
     *
     * @param {TextTrack[]} tracks A list of tracks to initialize the list with
     * @extends TrackList
     * @class TextTrackList
     */

    var TextTrackList = (function (_TrackList) {
        _inherits(TextTrackList, _TrackList);

        function TextTrackList() {
            var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

            _classCallCheck(this, TextTrackList);

            var list = undefined;

            // IE8 forces us to implement inheritance ourselves
            // as it does not support Object.defineProperty properly
            if (browser.IS_IE8) {
                list = _globalDocument2['default'].createElement('custom');
                for (var prop in _trackList2['default'].prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = _trackList2['default'].prototype[prop];
                    }
                }
                for (var prop in TextTrackList.prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = TextTrackList.prototype[prop];
                    }
                }
            }

            list = _TrackList.call(this, tracks, list);
            return list;
        }

        TextTrackList.prototype.addTrack_ = function addTrack_(track) {
            _TrackList.prototype.addTrack_.call(this, track);
            track.addEventListener('modechange', Fn.bind(this, function () {
                this.trigger('change');
            }));
        };

        /**
         * Remove TextTrack from TextTrackList
         * NOTE: Be mindful of what is passed in as it may be a HTMLTrackElement
         *
         * @param {TextTrack} rtrack
         * @method removeTrack_
         * @private
         */

        TextTrackList.prototype.removeTrack_ = function removeTrack_(rtrack) {
            var track = undefined;

            for (var i = 0, l = this.length; i < l; i++) {
                if (this[i] === rtrack) {
                    track = this[i];
                    if (track.off) {
                        track.off();
                    }

                    this.tracks_.splice(i, 1);

                    break;
                }
            }

            if (!track) {
                return;
            }

            this.trigger({
                track: track,
                type: 'removetrack'
            });
        };

        /**
         * Get a TextTrack from TextTrackList by a tracks id
         *
         * @param {String} id - the id of the track to get
         * @method getTrackById
         * @return {TextTrack}
         * @private
         */

        TextTrackList.prototype.getTrackById = function getTrackById(id) {
            var result = null;

            for (var i = 0, l = this.length; i < l; i++) {
                var track = this[i];

                if (track.id === id) {
                    result = track;
                    break;
                }
            }

            return result;
        };

        return TextTrackList;
    })(_trackList2['default']);

    exports['default'] = TextTrackList;
    module.exports = exports['default'];

},{"../utils/browser.js":140,"../utils/fn.js":144,"./track-list":136,"global/document":1}],133:[function(_dereq_,module,exports){
    /**
     * @file text-track-settings.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _component = _dereq_('../component');

    var _component2 = _interopRequireDefault(_component);

    var _utilsEventsJs = _dereq_('../utils/events.js');

    var Events = _interopRequireWildcard(_utilsEventsJs);

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsLogJs = _dereq_('../utils/log.js');

    var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

    var _safeJsonParseTuple = _dereq_('safe-json-parse/tuple');

    var _safeJsonParseTuple2 = _interopRequireDefault(_safeJsonParseTuple);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    /**
     * Manipulate settings of texttracks
     *
     * @param {Object} player  Main Player
     * @param {Object=} options Object of option names and values
     * @extends Component
     * @class TextTrackSettings
     */

    var TextTrackSettings = (function (_Component) {
        _inherits(TextTrackSettings, _Component);

        function TextTrackSettings(player, options) {
            _classCallCheck(this, TextTrackSettings);

            _Component.call(this, player, options);
            this.hide();

            // Grab `persistTextTrackSettings` from the player options if not passed in child options
            if (options.persistTextTrackSettings === undefined) {
                this.options_.persistTextTrackSettings = this.options_.playerOptions.persistTextTrackSettings;
            }

            Events.on(this.$('.vjs-done-button'), 'click', Fn.bind(this, function () {
                this.saveSettings();
                this.hide();
            }));

            Events.on(this.$('.vjs-default-button'), 'click', Fn.bind(this, function () {
                this.$('.vjs-fg-color > select').selectedIndex = 0;
                this.$('.vjs-bg-color > select').selectedIndex = 0;
                this.$('.window-color > select').selectedIndex = 0;
                this.$('.vjs-text-opacity > select').selectedIndex = 0;
                this.$('.vjs-bg-opacity > select').selectedIndex = 0;
                this.$('.vjs-window-opacity > select').selectedIndex = 0;
                this.$('.vjs-edge-style select').selectedIndex = 0;
                this.$('.vjs-font-family select').selectedIndex = 0;
                this.$('.vjs-font-percent select').selectedIndex = 2;
                this.updateDisplay();
            }));

            Events.on(this.$('.vjs-fg-color > select'), 'change', Fn.bind(this, this.updateDisplay));
            Events.on(this.$('.vjs-bg-color > select'), 'change', Fn.bind(this, this.updateDisplay));
            Events.on(this.$('.window-color > select'), 'change', Fn.bind(this, this.updateDisplay));
            Events.on(this.$('.vjs-text-opacity > select'), 'change', Fn.bind(this, this.updateDisplay));
            Events.on(this.$('.vjs-bg-opacity > select'), 'change', Fn.bind(this, this.updateDisplay));
            Events.on(this.$('.vjs-window-opacity > select'), 'change', Fn.bind(this, this.updateDisplay));
            Events.on(this.$('.vjs-font-percent select'), 'change', Fn.bind(this, this.updateDisplay));
            Events.on(this.$('.vjs-edge-style select'), 'change', Fn.bind(this, this.updateDisplay));
            Events.on(this.$('.vjs-font-family select'), 'change', Fn.bind(this, this.updateDisplay));

            if (this.options_.persistTextTrackSettings) {
                this.restoreSettings();
            }
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         * @method createEl
         */

        TextTrackSettings.prototype.createEl = function createEl() {
            var uniqueId = this.id_;
            var dialogLabelId = 'TTsettingsDialogLabel-' + uniqueId;
            var dialogDescriptionId = 'TTsettingsDialogDescription-' + uniqueId;

            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-caption-settings vjs-modal-overlay',
                innerHTML: captionOptionsMenuTemplate(uniqueId, dialogLabelId, dialogDescriptionId),
                tabIndex: -1
            }, {
                role: 'dialog',
                'aria-labelledby': dialogLabelId,
                'aria-describedby': dialogDescriptionId
            });
        };

        /**
         * Get texttrack settings
         * Settings are
         * .vjs-edge-style
         * .vjs-font-family
         * .vjs-fg-color
         * .vjs-text-opacity
         * .vjs-bg-color
         * .vjs-bg-opacity
         * .window-color
         * .vjs-window-opacity
         *
         * @return {Object}
         * @method getValues
         */

        TextTrackSettings.prototype.getValues = function getValues() {
            var textEdge = getSelectedOptionValue(this.$('.vjs-edge-style select'));
            var fontFamily = getSelectedOptionValue(this.$('.vjs-font-family select'));
            var fgColor = getSelectedOptionValue(this.$('.vjs-fg-color > select'));
            var textOpacity = getSelectedOptionValue(this.$('.vjs-text-opacity > select'));
            var bgColor = getSelectedOptionValue(this.$('.vjs-bg-color > select'));
            var bgOpacity = getSelectedOptionValue(this.$('.vjs-bg-opacity > select'));
            var windowColor = getSelectedOptionValue(this.$('.window-color > select'));
            var windowOpacity = getSelectedOptionValue(this.$('.vjs-window-opacity > select'));
            var fontPercent = _globalWindow2['default']['parseFloat'](getSelectedOptionValue(this.$('.vjs-font-percent > select')));

            var result = {
                'backgroundOpacity': bgOpacity,
                'textOpacity': textOpacity,
                'windowOpacity': windowOpacity,
                'edgeStyle': textEdge,
                'fontFamily': fontFamily,
                'color': fgColor,
                'backgroundColor': bgColor,
                'windowColor': windowColor,
                'fontPercent': fontPercent
            };
            for (var _name in result) {
                if (result[_name] === '' || result[_name] === 'none' || _name === 'fontPercent' && result[_name] === 1.00) {
                    delete result[_name];
                }
            }
            return result;
        };

        /**
         * Set texttrack settings
         * Settings are
         * .vjs-edge-style
         * .vjs-font-family
         * .vjs-fg-color
         * .vjs-text-opacity
         * .vjs-bg-color
         * .vjs-bg-opacity
         * .window-color
         * .vjs-window-opacity
         *
         * @param {Object} values Object with texttrack setting values
         * @method setValues
         */

        TextTrackSettings.prototype.setValues = function setValues(values) {
            setSelectedOption(this.$('.vjs-edge-style select'), values.edgeStyle);
            setSelectedOption(this.$('.vjs-font-family select'), values.fontFamily);
            setSelectedOption(this.$('.vjs-fg-color > select'), values.color);
            setSelectedOption(this.$('.vjs-text-opacity > select'), values.textOpacity);
            setSelectedOption(this.$('.vjs-bg-color > select'), values.backgroundColor);
            setSelectedOption(this.$('.vjs-bg-opacity > select'), values.backgroundOpacity);
            setSelectedOption(this.$('.window-color > select'), values.windowColor);
            setSelectedOption(this.$('.vjs-window-opacity > select'), values.windowOpacity);

            var fontPercent = values.fontPercent;

            if (fontPercent) {
                fontPercent = fontPercent.toFixed(2);
            }

            setSelectedOption(this.$('.vjs-font-percent > select'), fontPercent);
        };

        /**
         * Restore texttrack settings
         *
         * @method restoreSettings
         */

        TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
            var err = undefined,
                values = undefined;

            try {
                var _safeParseTuple = _safeJsonParseTuple2['default'](_globalWindow2['default'].localStorage.getItem('vjs-text-track-settings'));

                err = _safeParseTuple[0];
                values = _safeParseTuple[1];

                if (err) {
                    _utilsLogJs2['default'].error(err);
                }
            } catch (e) {
                _utilsLogJs2['default'].warn(e);
            }

            if (values) {
                this.setValues(values);
            }
        };

        /**
         * Save texttrack settings to local storage
         *
         * @method saveSettings
         */

        TextTrackSettings.prototype.saveSettings = function saveSettings() {
            if (!this.options_.persistTextTrackSettings) {
                return;
            }

            var values = this.getValues();
            try {
                if (Object.getOwnPropertyNames(values).length > 0) {
                    _globalWindow2['default'].localStorage.setItem('vjs-text-track-settings', JSON.stringify(values));
                } else {
                    _globalWindow2['default'].localStorage.removeItem('vjs-text-track-settings');
                }
            } catch (e) {
                _utilsLogJs2['default'].warn(e);
            }
        };

        /**
         * Update display of texttrack settings
         *
         * @method updateDisplay
         */

        TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
            var ttDisplay = this.player_.getChild('textTrackDisplay');
            if (ttDisplay) {
                ttDisplay.updateDisplay();
            }
        };

        return TextTrackSettings;
    })(_component2['default']);

    _component2['default'].registerComponent('TextTrackSettings', TextTrackSettings);

    function getSelectedOptionValue(target) {
        var selectedOption = undefined;
        // not all browsers support selectedOptions, so, fallback to options
        if (target.selectedOptions) {
            selectedOption = target.selectedOptions[0];
        } else if (target.options) {
            selectedOption = target.options[target.options.selectedIndex];
        }

        return selectedOption.value;
    }

    function setSelectedOption(target, value) {
        if (!value) {
            return;
        }

        var i = undefined;
        for (i = 0; i < target.options.length; i++) {
            var option = target.options[i];
            if (option.value === value) {
                break;
            }
        }

        target.selectedIndex = i;
    }

    function captionOptionsMenuTemplate(uniqueId, dialogLabelId, dialogDescriptionId) {

        var template = '\n    <div role="document">\n      <div role="heading" aria-level="1" id="' + dialogLabelId + '" class="vjs-control-text">Captions Settings Dialog</div>\n      <div id="' + dialogDescriptionId + '" class="vjs-control-text">Beginning of dialog window. Escape will cancel and close the window.</div>\n      <div class="vjs-tracksettings">\n        <div class="vjs-tracksettings-colors">\n          <fieldset class="vjs-fg-color vjs-tracksetting">\n            <legend>Text</legend>\n            <label class="vjs-label" for="captions-foreground-color-' + uniqueId + '">Color</label>\n            <select id="captions-foreground-color-' + uniqueId + '">\n              <option value="#FFF" selected>White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-text-opacity vjs-opacity">\n              <label class="vjs-label" for="captions-foreground-opacity-' + uniqueId + '">Transparency</label>\n              <select id="captions-foreground-opacity-' + uniqueId + '">\n                <option value="1" selected>Opaque</option>\n                <option value="0.5">Semi-Opaque</option>\n              </select>\n            </span>\n          </fieldset>\n          <fieldset class="vjs-bg-color vjs-tracksetting">\n            <legend>Background</legend>\n            <label class="vjs-label" for="captions-background-color-' + uniqueId + '">Color</label>\n            <select id="captions-background-color-' + uniqueId + '">\n              <option value="#000" selected>Black</option>\n              <option value="#FFF">White</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-bg-opacity vjs-opacity">\n              <label class="vjs-label" for="captions-background-opacity-' + uniqueId + '">Transparency</label>\n              <select id="captions-background-opacity-' + uniqueId + '">\n                <option value="1" selected>Opaque</option>\n                <option value="0.5">Semi-Transparent</option>\n                <option value="0">Transparent</option>\n              </select>\n            </span>\n          </fieldset>\n          <fieldset class="window-color vjs-tracksetting">\n            <legend>Window</legend>\n            <label class="vjs-label" for="captions-window-color-' + uniqueId + '">Color</label>\n            <select id="captions-window-color-' + uniqueId + '">\n              <option value="#000" selected>Black</option>\n              <option value="#FFF">White</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-window-opacity vjs-opacity">\n              <label class="vjs-label" for="captions-window-opacity-' + uniqueId + '">Transparency</label>\n              <select id="captions-window-opacity-' + uniqueId + '">\n                <option value="0" selected>Transparent</option>\n                <option value="0.5">Semi-Transparent</option>\n                <option value="1">Opaque</option>\n              </select>\n            </span>\n          </fieldset>\n        </div> <!-- vjs-tracksettings-colors -->\n        <div class="vjs-tracksettings-font">\n          <div class="vjs-font-percent vjs-tracksetting">\n            <label class="vjs-label" for="captions-font-size-' + uniqueId + '">Font Size</label>\n            <select id="captions-font-size-' + uniqueId + '">\n              <option value="0.50">50%</option>\n              <option value="0.75">75%</option>\n              <option value="1.00" selected>100%</option>\n              <option value="1.25">125%</option>\n              <option value="1.50">150%</option>\n              <option value="1.75">175%</option>\n              <option value="2.00">200%</option>\n              <option value="3.00">300%</option>\n              <option value="4.00">400%</option>\n            </select>\n          </div>\n          <div class="vjs-edge-style vjs-tracksetting">\n            <label class="vjs-label" for="captions-edge-style-' + uniqueId + '">Text Edge Style</label>\n            <select id="captions-edge-style-' + uniqueId + '">\n              <option value="none" selected>None</option>\n              <option value="raised">Raised</option>\n              <option value="depressed">Depressed</option>\n              <option value="uniform">Uniform</option>\n              <option value="dropshadow">Dropshadow</option>\n            </select>\n          </div>\n          <div class="vjs-font-family vjs-tracksetting">\n            <label class="vjs-label" for="captions-font-family-' + uniqueId + '">Font Family</label>\n            <select id="captions-font-family-' + uniqueId + '">\n              <option value="proportionalSansSerif" selected>Proportional Sans-Serif</option>\n              <option value="monospaceSansSerif">Monospace Sans-Serif</option>\n              <option value="proportionalSerif">Proportional Serif</option>\n              <option value="monospaceSerif">Monospace Serif</option>\n              <option value="casual">Casual</option>\n              <option value="script">Script</option>\n              <option value="small-caps">Small Caps</option>\n            </select>\n          </div>\n        </div> <!-- vjs-tracksettings-font -->\n        <div class="vjs-tracksettings-controls">\n          <button class="vjs-default-button">Defaults</button>\n          <button class="vjs-done-button">Done</button>\n        </div>\n      </div> <!-- vjs-tracksettings -->\n    </div> <!--  role="document" -->';

        return template;
    }

    exports['default'] = TextTrackSettings;
    module.exports = exports['default'];

},{"../component":67,"../utils/events.js":143,"../utils/fn.js":144,"../utils/log.js":147,"global/window":2,"safe-json-parse/tuple":54}],134:[function(_dereq_,module,exports){
    /**
     * @file text-track.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _textTrackCueList = _dereq_('./text-track-cue-list');

    var _textTrackCueList2 = _interopRequireDefault(_textTrackCueList);

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _trackEnums = _dereq_('./track-enums');

    var _utilsLogJs = _dereq_('../utils/log.js');

    var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _trackJs = _dereq_('./track.js');

    var _trackJs2 = _interopRequireDefault(_trackJs);

    var _utilsUrlJs = _dereq_('../utils/url.js');

    var _xhr = _dereq_('xhr');

    var _xhr2 = _interopRequireDefault(_xhr);

    var _utilsMergeOptions = _dereq_('../utils/merge-options');

    var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);

    var _utilsBrowserJs = _dereq_('../utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    /**
     * takes a webvtt file contents and parses it into cues
     *
     * @param {String} srcContent webVTT file contents
     * @param {Track} track track to addcues to
     */
    var parseCues = function parseCues(srcContent, track) {
        var parser = new _globalWindow2['default'].WebVTT.Parser(_globalWindow2['default'], _globalWindow2['default'].vttjs, _globalWindow2['default'].WebVTT.StringDecoder());
        var errors = [];

        parser.oncue = function (cue) {
            track.addCue(cue);
        };

        parser.onparsingerror = function (error) {
            errors.push(error);
        };

        parser.onflush = function () {
            track.trigger({
                type: 'loadeddata',
                target: track
            });
        };

        parser.parse(srcContent);
        if (errors.length > 0) {
            if (console.groupCollapsed) {
                console.groupCollapsed('Text Track parsing errors for ' + track.src);
            }
            errors.forEach(function (error) {
                return _utilsLogJs2['default'].error(error);
            });
            if (console.groupEnd) {
                console.groupEnd();
            }
        }

        parser.flush();
    };

    /**
     * load a track from a  specifed url
     *
     * @param {String} src url to load track from
     * @param {Track} track track to addcues to
     */
    var loadTrack = function loadTrack(src, track) {
        var opts = {
            uri: src
        };
        var crossOrigin = _utilsUrlJs.isCrossOrigin(src);

        if (crossOrigin) {
            opts.cors = crossOrigin;
        }

        _xhr2['default'](opts, Fn.bind(this, function (err, response, responseBody) {
            if (err) {
                return _utilsLogJs2['default'].error(err, response);
            }

            track.loaded_ = true;

            // Make sure that vttjs has loaded, otherwise, wait till it finished loading
            // NOTE: this is only used for the alt/video.novtt.js build
            if (typeof _globalWindow2['default'].WebVTT !== 'function') {
                if (track.tech_) {
                    (function () {
                        var loadHandler = function loadHandler() {
                            return parseCues(responseBody, track);
                        };
                        track.tech_.on('vttjsloaded', loadHandler);
                        track.tech_.on('vttjserror', function () {
                            _utilsLogJs2['default'].error('vttjs failed to load, stopping trying to process ' + track.src);
                            track.tech_.off('vttjsloaded', loadHandler);
                        });
                    })();
                }
            } else {
                parseCues(responseBody, track);
            }
        }));
    };

    /**
     * A single text track as defined in:
     * @link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack
     *
     * interface TextTrack : EventTarget {
 *   readonly attribute TextTrackKind kind;
 *   readonly attribute DOMString label;
 *   readonly attribute DOMString language;
 *
 *   readonly attribute DOMString id;
 *   readonly attribute DOMString inBandMetadataTrackDispatchType;
 *
 *   attribute TextTrackMode mode;
 *
 *   readonly attribute TextTrackCueList? cues;
 *   readonly attribute TextTrackCueList? activeCues;
 *
 *   void addCue(TextTrackCue cue);
 *   void removeCue(TextTrackCue cue);
 *
 *   attribute EventHandler oncuechange;
 * };
     *
     * @param {Object=} options Object of option names and values
     * @extends Track
     * @class TextTrack
     */

    var TextTrack = (function (_Track) {
        _inherits(TextTrack, _Track);

        function TextTrack() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            _classCallCheck(this, TextTrack);

            if (!options.tech) {
                throw new Error('A tech was not provided.');
            }

            var settings = _utilsMergeOptions2['default'](options, {
                kind: _trackEnums.TextTrackKind[options.kind] || 'subtitles',
                language: options.language || options.srclang || ''
            });
            var mode = _trackEnums.TextTrackMode[settings.mode] || 'disabled';
            var default_ = settings['default'];

            if (settings.kind === 'metadata' || settings.kind === 'chapters') {
                mode = 'hidden';
            }
            // on IE8 this will be a document element
            // for every other browser this will be a normal object
            var tt = _Track.call(this, settings);
            tt.tech_ = settings.tech;

            if (browser.IS_IE8) {
                for (var prop in TextTrack.prototype) {
                    if (prop !== 'constructor') {
                        tt[prop] = TextTrack.prototype[prop];
                    }
                }
            }

            tt.cues_ = [];
            tt.activeCues_ = [];

            var cues = new _textTrackCueList2['default'](tt.cues_);
            var activeCues = new _textTrackCueList2['default'](tt.activeCues_);
            var changed = false;
            var timeupdateHandler = Fn.bind(tt, function () {
                this.activeCues;
                if (changed) {
                    this.trigger('cuechange');
                    changed = false;
                }
            });

            if (mode !== 'disabled') {
                tt.tech_.on('timeupdate', timeupdateHandler);
            }

            Object.defineProperty(tt, 'default', {
                get: function get() {
                    return default_;
                },
                set: function set() {}
            });

            Object.defineProperty(tt, 'mode', {
                get: function get() {
                    return mode;
                },
                set: function set(newMode) {
                    if (!_trackEnums.TextTrackMode[newMode]) {
                        return;
                    }
                    mode = newMode;
                    if (mode === 'showing') {
                        this.tech_.on('timeupdate', timeupdateHandler);
                    }
                    this.trigger('modechange');
                }
            });

            Object.defineProperty(tt, 'cues', {
                get: function get() {
                    if (!this.loaded_) {
                        return null;
                    }

                    return cues;
                },
                set: function set() {}
            });

            Object.defineProperty(tt, 'activeCues', {
                get: function get() {
                    if (!this.loaded_) {
                        return null;
                    }

                    // nothing to do
                    if (this.cues.length === 0) {
                        return activeCues;
                    }

                    var ct = this.tech_.currentTime();
                    var active = [];

                    for (var i = 0, l = this.cues.length; i < l; i++) {
                        var cue = this.cues[i];

                        if (cue.startTime <= ct && cue.endTime >= ct) {
                            active.push(cue);
                        } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
                            active.push(cue);
                        }
                    }

                    changed = false;

                    if (active.length !== this.activeCues_.length) {
                        changed = true;
                    } else {
                        for (var i = 0; i < active.length; i++) {
                            if (this.activeCues_.indexOf(active[i]) === -1) {
                                changed = true;
                            }
                        }
                    }

                    this.activeCues_ = active;
                    activeCues.setCues_(this.activeCues_);

                    return activeCues;
                },
                set: function set() {}
            });

            if (settings.src) {
                tt.src = settings.src;
                loadTrack(settings.src, tt);
            } else {
                tt.loaded_ = true;
            }

            return tt;
        }

        /**
         * cuechange - One or more cues in the track have become active or stopped being active.
         */

        /**
         * add a cue to the internal list of cues
         *
         * @param {Object} cue the cue to add to our internal list
         * @method addCue
         */

        TextTrack.prototype.addCue = function addCue(cue) {
            var tracks = this.tech_.textTracks();

            if (tracks) {
                for (var i = 0; i < tracks.length; i++) {
                    if (tracks[i] !== this) {
                        tracks[i].removeCue(cue);
                    }
                }
            }

            this.cues_.push(cue);
            this.cues.setCues_(this.cues_);
        };

        /**
         * remvoe a cue from our internal list
         *
         * @param {Object} removeCue the cue to remove from our internal list
         * @method removeCue
         */

        TextTrack.prototype.removeCue = function removeCue(_removeCue) {
            var removed = false;

            for (var i = 0, l = this.cues_.length; i < l; i++) {
                var cue = this.cues_[i];

                if (cue === _removeCue) {
                    this.cues_.splice(i, 1);
                    removed = true;
                }
            }

            if (removed) {
                this.cues.setCues_(this.cues_);
            }
        };

        return TextTrack;
    })(_trackJs2['default']);

    TextTrack.prototype.allowedEvents_ = {
        cuechange: 'cuechange'
    };

    exports['default'] = TextTrack;
    module.exports = exports['default'];

},{"../utils/browser.js":140,"../utils/fn.js":144,"../utils/log.js":147,"../utils/merge-options":148,"../utils/url.js":152,"./text-track-cue-list":129,"./track-enums":135,"./track.js":137,"global/document":1,"global/window":2,"xhr":56}],135:[function(_dereq_,module,exports){
    /**
     * @file track-kinds.js
     */

    /**
     * https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
     *
     * enum VideoTrackKind {
 *   "alternative",
 *   "captions",
 *   "main",
 *   "sign",
 *   "subtitles",
 *   "commentary",
 *   "",
 * };
     */
    'use strict';

    exports.__esModule = true;
    var VideoTrackKind = {
        alternative: 'alternative',
        captions: 'captions',
        main: 'main',
        sign: 'sign',
        subtitles: 'subtitles',
        commentary: 'commentary'
    };

    /**
     * https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind
     *
     * enum AudioTrackKind {
 *   "alternative",
 *   "descriptions",
 *   "main",
 *   "main-desc",
 *   "translation",
 *   "commentary",
 *   "",
 * };
     */
    var AudioTrackKind = {
        alternative: 'alternative',
        descriptions: 'descriptions',
        main: 'main',
        'main-desc': 'main-desc',
        translation: 'translation',
        commentary: 'commentary'
    };

    /**
     * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackkind
     *
     * enum TextTrackKind {
 *   "subtitles",
 *   "captions",
 *   "descriptions",
 *   "chapters",
 *   "metadata"
 * };
     */
    var TextTrackKind = {
        subtitles: 'subtitles',
        captions: 'captions',
        descriptions: 'descriptions',
        chapters: 'chapters',
        metadata: 'metadata'
    };

    /**
     * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
     *
     * enum TextTrackMode { "disabled",  "hidden",  "showing" };
     */
    var TextTrackMode = {
        disabled: 'disabled',
        hidden: 'hidden',
        showing: 'showing'
    };

    /* jshint ignore:start */
// we ignore jshint here because it does not see
// AudioTrackKind as defined here
    exports['default'] = { VideoTrackKind: VideoTrackKind, AudioTrackKind: AudioTrackKind, TextTrackKind: TextTrackKind, TextTrackMode: TextTrackMode };

    /* jshint ignore:end */
    module.exports = exports['default'];

},{}],136:[function(_dereq_,module,exports){
    /**
     * @file track-list.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _eventTarget = _dereq_('../event-target');

    var _eventTarget2 = _interopRequireDefault(_eventTarget);

    var _utilsFnJs = _dereq_('../utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _utilsBrowserJs = _dereq_('../utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    /**
     * Common functionaliy between Text, Audio, and Video TrackLists
     * Interfaces defined in the following spec:
     * @link https://html.spec.whatwg.org/multipage/embedded-content.html
     *
     * @param {Track[]} tracks A list of tracks to initialize the list with
     * @param {Object} list the child object with inheritance done manually for ie8
     * @extends EventTarget
     * @class TrackList
     */

    var TrackList = (function (_EventTarget) {
        _inherits(TrackList, _EventTarget);

        function TrackList() {
            var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
            var list = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

            _classCallCheck(this, TrackList);

            _EventTarget.call(this);
            if (!list) {
                list = this;
                if (browser.IS_IE8) {
                    list = _globalDocument2['default'].createElement('custom');
                    for (var prop in TrackList.prototype) {
                        if (prop !== 'constructor') {
                            list[prop] = TrackList.prototype[prop];
                        }
                    }
                }
            }

            list.tracks_ = [];
            Object.defineProperty(list, 'length', {
                get: function get() {
                    return this.tracks_.length;
                }
            });

            for (var i = 0; i < tracks.length; i++) {
                list.addTrack_(tracks[i]);
            }

            return list;
        }

        /**
         * change - One or more tracks in the track list have been enabled or disabled.
         * addtrack - A track has been added to the track list.
         * removetrack - A track has been removed from the track list.
         */

        /**
         * Add a Track from TrackList
         *
         * @param {Mixed} track
         * @method addTrack_
         * @private
         */

        TrackList.prototype.addTrack_ = function addTrack_(track) {
            var index = this.tracks_.length;

            if (!('' + index in this)) {
                Object.defineProperty(this, index, {
                    get: function get() {
                        return this.tracks_[index];
                    }
                });
            }

            // Do not add duplicate tracks
            if (this.tracks_.indexOf(track) === -1) {
                this.tracks_.push(track);
                this.trigger({
                    track: track,
                    type: 'addtrack'
                });
            }
        };

        /**
         * Remove a Track from TrackList
         *
         * @param {Track} rtrack track to be removed
         * @method removeTrack_
         * @private
         */

        TrackList.prototype.removeTrack_ = function removeTrack_(rtrack) {
            var track = undefined;

            for (var i = 0, l = this.length; i < l; i++) {
                if (this[i] === rtrack) {
                    track = this[i];
                    if (track.off) {
                        track.off();
                    }

                    this.tracks_.splice(i, 1);

                    break;
                }
            }

            if (!track) {
                return;
            }

            this.trigger({
                track: track,
                type: 'removetrack'
            });
        };

        /**
         * Get a Track from the TrackList by a tracks id
         *
         * @param {String} id - the id of the track to get
         * @method getTrackById
         * @return {Track}
         * @private
         */

        TrackList.prototype.getTrackById = function getTrackById(id) {
            var result = null;

            for (var i = 0, l = this.length; i < l; i++) {
                var track = this[i];
                if (track.id === id) {
                    result = track;
                    break;
                }
            }

            return result;
        };

        return TrackList;
    })(_eventTarget2['default']);

    TrackList.prototype.allowedEvents_ = {
        change: 'change',
        addtrack: 'addtrack',
        removetrack: 'removetrack'
    };

// emulate attribute EventHandler support to allow for feature detection
    for (var _event in TrackList.prototype.allowedEvents_) {
        TrackList.prototype['on' + _event] = null;
    }

    exports['default'] = TrackList;
    module.exports = exports['default'];

},{"../event-target":104,"../utils/browser.js":140,"../utils/fn.js":144,"global/document":1}],137:[function(_dereq_,module,exports){
    /**
     * @file track.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _utilsBrowserJs = _dereq_('../utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _utilsGuidJs = _dereq_('../utils/guid.js');

    var Guid = _interopRequireWildcard(_utilsGuidJs);

    var _eventTarget = _dereq_('../event-target');

    var _eventTarget2 = _interopRequireDefault(_eventTarget);

    /**
     * setup the common parts of an audio, video, or text track
     * @link https://html.spec.whatwg.org/multipage/embedded-content.html
     *
     * @param {String} type The type of track we are dealing with audio|video|text
     * @param {Object=} options Object of option names and values
     * @extends EventTarget
     * @class Track
     */

    var Track = (function (_EventTarget) {
        _inherits(Track, _EventTarget);

        function Track() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            _classCallCheck(this, Track);

            _EventTarget.call(this);

            var track = this;
            if (browser.IS_IE8) {
                track = _globalDocument2['default'].createElement('custom');
                for (var prop in Track.prototype) {
                    if (prop !== 'constructor') {
                        track[prop] = Track.prototype[prop];
                    }
                }
            }

            var trackProps = {
                id: options.id || 'vjs_track_' + Guid.newGUID(),
                kind: options.kind || '',
                label: options.label || '',
                language: options.language || ''
            };

            var _loop = function (key) {
                Object.defineProperty(track, key, {
                    get: function get() {
                        return trackProps[key];
                    },
                    set: function set() {}
                });
            };

            for (var key in trackProps) {
                _loop(key);
            }

            return track;
        }

        return Track;
    })(_eventTarget2['default']);

    exports['default'] = Track;
    module.exports = exports['default'];

},{"../event-target":104,"../utils/browser.js":140,"../utils/guid.js":146,"global/document":1}],138:[function(_dereq_,module,exports){
    /**
     * @file video-track-list.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _trackList = _dereq_('./track-list');

    var _trackList2 = _interopRequireDefault(_trackList);

    var _utilsBrowserJs = _dereq_('../utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    /**
     * disable other video tracks before selecting the new one
     *
     * @param {Array|VideoTrackList} list list to work on
     * @param {VideoTrack} track the track to skip
     */
    var disableOthers = function disableOthers(list, track) {
        for (var i = 0; i < list.length; i++) {
            if (track.id === list[i].id) {
                continue;
            }
            // another audio track is enabled, disable it
            list[i].selected = false;
        }
    };

    /**
     * A list of possiblee video tracks. Most functionality is in the
     * base class Tracklist and the spec for VideoTrackList is located at:
     * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
     *
     * interface VideoTrackList : EventTarget {
 *   readonly attribute unsigned long length;
 *   getter VideoTrack (unsigned long index);
 *   VideoTrack? getTrackById(DOMString id);
 *   readonly attribute long selectedIndex;
 *
 *   attribute EventHandler onchange;
 *   attribute EventHandler onaddtrack;
 *   attribute EventHandler onremovetrack;
 * };
     *
     * @param {VideoTrack[]} tracks a list of video tracks to instantiate the list with
     # @extends TrackList
     * @class VideoTrackList
     */

    var VideoTrackList = (function (_TrackList) {
        _inherits(VideoTrackList, _TrackList);

        function VideoTrackList() {
            var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

            _classCallCheck(this, VideoTrackList);

            var list = undefined;

            // make sure only 1 track is enabled
            // sorted from last index to first index
            for (var i = tracks.length - 1; i >= 0; i--) {
                if (tracks[i].selected) {
                    disableOthers(tracks, tracks[i]);
                    break;
                }
            }

            // IE8 forces us to implement inheritance ourselves
            // as it does not support Object.defineProperty properly
            if (browser.IS_IE8) {
                list = _globalDocument2['default'].createElement('custom');
                for (var prop in _trackList2['default'].prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = _trackList2['default'].prototype[prop];
                    }
                }
                for (var prop in VideoTrackList.prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = VideoTrackList.prototype[prop];
                    }
                }
            }

            list = _TrackList.call(this, tracks, list);
            list.changing_ = false;

            Object.defineProperty(list, 'selectedIndex', {
                get: function get() {
                    for (var i = 0; i < this.length; i++) {
                        if (this[i].selected) {
                            return i;
                        }
                    }
                    return -1;
                },
                set: function set() {}
            });

            return list;
        }

        VideoTrackList.prototype.addTrack_ = function addTrack_(track) {
            var _this = this;

            if (track.selected) {
                disableOthers(this, track);
            }

            _TrackList.prototype.addTrack_.call(this, track);
            // native tracks don't have this
            if (!track.addEventListener) {
                return;
            }
            track.addEventListener('selectedchange', function () {
                if (_this.changing_) {
                    return;
                }
                _this.changing_ = true;
                disableOthers(_this, track);
                _this.changing_ = false;
                _this.trigger('change');
            });
        };

        VideoTrackList.prototype.addTrack = function addTrack(track) {
            this.addTrack_(track);
        };

        VideoTrackList.prototype.removeTrack = function removeTrack(track) {
            _TrackList.prototype.removeTrack_.call(this, track);
        };

        return VideoTrackList;
    })(_trackList2['default']);

    exports['default'] = VideoTrackList;
    module.exports = exports['default'];

},{"../utils/browser.js":140,"./track-list":136,"global/document":1}],139:[function(_dereq_,module,exports){
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _trackEnums = _dereq_('./track-enums');

    var _track = _dereq_('./track');

    var _track2 = _interopRequireDefault(_track);

    var _utilsMergeOptions = _dereq_('../utils/merge-options');

    var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);

    var _utilsBrowserJs = _dereq_('../utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    /**
     * A single video text track as defined in:
     * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack
     *
     * interface VideoTrack {
 *   readonly attribute DOMString id;
 *   readonly attribute DOMString kind;
 *   readonly attribute DOMString label;
 *   readonly attribute DOMString language;
 *   attribute boolean selected;
 * };
     *
     * @param {Object=} options Object of option names and values
     * @class VideoTrack
     */

    var VideoTrack = (function (_Track) {
        _inherits(VideoTrack, _Track);

        function VideoTrack() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            _classCallCheck(this, VideoTrack);

            var settings = _utilsMergeOptions2['default'](options, {
                kind: _trackEnums.VideoTrackKind[options.kind] || ''
            });

            // on IE8 this will be a document element
            // for every other browser this will be a normal object
            var track = _Track.call(this, settings);
            var selected = false;

            if (browser.IS_IE8) {
                for (var prop in VideoTrack.prototype) {
                    if (prop !== 'constructor') {
                        track[prop] = VideoTrack.prototype[prop];
                    }
                }
            }

            Object.defineProperty(track, 'selected', {
                get: function get() {
                    return selected;
                },
                set: function set(newSelected) {
                    // an invalid or unchanged value
                    if (typeof newSelected !== 'boolean' || newSelected === selected) {
                        return;
                    }
                    selected = newSelected;
                    this.trigger('selectedchange');
                }
            });

            // if the user sets this track to selected then
            // set selected to that true value otherwise
            // we keep it false
            if (settings.selected) {
                track.selected = settings.selected;
            }

            return track;
        }

        return VideoTrack;
    })(_track2['default']);

    exports['default'] = VideoTrack;
    module.exports = exports['default'];

},{"../utils/browser.js":140,"../utils/merge-options":148,"./track":137,"./track-enums":135}],140:[function(_dereq_,module,exports){
    /**
     * @file browser.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var USER_AGENT = _globalWindow2['default'].navigator.userAgent;
    var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
    var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;

    /*
     * Device is an iPhone
     *
     * @type {Boolean}
     * @constant
     * @private
     */
    var IS_IPAD = /iPad/i.test(USER_AGENT);

    exports.IS_IPAD = IS_IPAD;
// The Facebook app's UIWebView identifies as both an iPhone and iPad, so
// to identify iPhones, we need to exclude iPads.
// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
    var IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
    exports.IS_IPHONE = IS_IPHONE;
    var IS_IPOD = /iPod/i.test(USER_AGENT);
    exports.IS_IPOD = IS_IPOD;
    var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

    exports.IS_IOS = IS_IOS;
    var IOS_VERSION = (function () {
        var match = USER_AGENT.match(/OS (\d+)_/i);
        if (match && match[1]) {
            return match[1];
        }
    })();

    exports.IOS_VERSION = IOS_VERSION;
    var IS_ANDROID = /Android/i.test(USER_AGENT);
    exports.IS_ANDROID = IS_ANDROID;
    var ANDROID_VERSION = (function () {
        // This matches Android Major.Minor.Patch versions
        // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
        var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i),
            major,
            minor;

        if (!match) {
            return null;
        }

        major = match[1] && parseFloat(match[1]);
        minor = match[2] && parseFloat(match[2]);

        if (major && minor) {
            return parseFloat(match[1] + '.' + match[2]);
        } else if (major) {
            return major;
        } else {
            return null;
        }
    })();
    exports.ANDROID_VERSION = ANDROID_VERSION;
// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
    var IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;
    exports.IS_OLD_ANDROID = IS_OLD_ANDROID;
    var IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;

    exports.IS_NATIVE_ANDROID = IS_NATIVE_ANDROID;
    var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
    exports.IS_FIREFOX = IS_FIREFOX;
    var IS_EDGE = /Edge/i.test(USER_AGENT);
    exports.IS_EDGE = IS_EDGE;
    var IS_CHROME = !IS_EDGE && /Chrome/i.test(USER_AGENT);
    exports.IS_CHROME = IS_CHROME;
    var IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);
    exports.IS_IE8 = IS_IE8;
    var IE_VERSION = (function (result) {
        return result && parseFloat(result[1]);
    })(/MSIE\s(\d+)\.\d/.exec(USER_AGENT));

    exports.IE_VERSION = IE_VERSION;
    var TOUCH_ENABLED = !!('ontouchstart' in _globalWindow2['default'] || _globalWindow2['default'].DocumentTouch && _globalDocument2['default'] instanceof _globalWindow2['default'].DocumentTouch);
    exports.TOUCH_ENABLED = TOUCH_ENABLED;
    var BACKGROUND_SIZE_SUPPORTED = ('backgroundSize' in _globalDocument2['default'].createElement('video').style);
    exports.BACKGROUND_SIZE_SUPPORTED = BACKGROUND_SIZE_SUPPORTED;

},{"global/document":1,"global/window":2}],141:[function(_dereq_,module,exports){
    /**
     * @file buffer.js
     */
    'use strict';

    exports.__esModule = true;
    exports.bufferedPercent = bufferedPercent;

    var _timeRangesJs = _dereq_('./time-ranges.js');

    /**
     * Compute how much your video has been buffered
     *
     * @param  {Object} Buffered object
     * @param  {Number} Total duration
     * @return {Number} Percent buffered of the total duration
     * @private
     * @function bufferedPercent
     */

    function bufferedPercent(buffered, duration) {
        var bufferedDuration = 0,
            start,
            end;

        if (!duration) {
            return 0;
        }

        if (!buffered || !buffered.length) {
            buffered = _timeRangesJs.createTimeRange(0, 0);
        }

        for (var i = 0; i < buffered.length; i++) {
            start = buffered.start(i);
            end = buffered.end(i);

            // buffered end can be bigger than duration by a very small fraction
            if (end > duration) {
                end = duration;
            }

            bufferedDuration += end - start;
        }

        return bufferedDuration / duration;
    }

},{"./time-ranges.js":150}],142:[function(_dereq_,module,exports){
    /**
     * @file dom.js
     */
    'use strict';

    exports.__esModule = true;
    exports.getEl = getEl;
    exports.createEl = createEl;
    exports.textContent = textContent;
    exports.insertElFirst = insertElFirst;
    exports.getElData = getElData;
    exports.hasElData = hasElData;
    exports.removeElData = removeElData;
    exports.hasElClass = hasElClass;
    exports.addElClass = addElClass;
    exports.removeElClass = removeElClass;
    exports.toggleElClass = toggleElClass;
    exports.setElAttributes = setElAttributes;
    exports.getElAttributes = getElAttributes;
    exports.blockTextSelection = blockTextSelection;
    exports.unblockTextSelection = unblockTextSelection;
    exports.findElPosition = findElPosition;
    exports.getPointerPosition = getPointerPosition;
    exports.isEl = isEl;
    exports.isTextNode = isTextNode;
    exports.emptyEl = emptyEl;
    exports.normalizeContent = normalizeContent;
    exports.appendContent = appendContent;
    exports.insertContent = insertContent;

    var _templateObject = _taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _guidJs = _dereq_('./guid.js');

    var Guid = _interopRequireWildcard(_guidJs);

    var _logJs = _dereq_('./log.js');

    var _logJs2 = _interopRequireDefault(_logJs);

    var _tsml = _dereq_('tsml');

    var _tsml2 = _interopRequireDefault(_tsml);

    /**
     * Detect if a value is a string with any non-whitespace characters.
     *
     * @param  {String} str
     * @return {Boolean}
     */
    function isNonBlankString(str) {
        return typeof str === 'string' && /\S/.test(str);
    }

    /**
     * Throws an error if the passed string has whitespace. This is used by
     * class methods to be relatively consistent with the classList API.
     *
     * @param  {String} str
     * @return {Boolean}
     */
    function throwIfWhitespace(str) {
        if (/\s/.test(str)) {
            throw new Error('class has illegal whitespace characters');
        }
    }

    /**
     * Produce a regular expression for matching a class name.
     *
     * @param  {String} className
     * @return {RegExp}
     */
    function classRegExp(className) {
        return new RegExp('(^|\\s)' + className + '($|\\s)');
    }

    /**
     * Creates functions to query the DOM using a given method.
     *
     * @function createQuerier
     * @private
     * @param  {String} method
     * @return {Function}
     */
    function createQuerier(method) {
        return function (selector, context) {
            if (!isNonBlankString(selector)) {
                return _globalDocument2['default'][method](null);
            }
            if (isNonBlankString(context)) {
                context = _globalDocument2['default'].querySelector(context);
            }
            return (isEl(context) ? context : _globalDocument2['default'])[method](selector);
        };
    }

    /**
     * Shorthand for document.getElementById()
     * Also allows for CSS (jQuery) ID syntax. But nothing other than IDs.
     *
     * @param  {String} id  Element ID
     * @return {Element}    Element with supplied ID
     * @function getEl
     */

    function getEl(id) {
        if (id.indexOf('#') === 0) {
            id = id.slice(1);
        }

        return _globalDocument2['default'].getElementById(id);
    }

    /**
     * Creates an element and applies properties.
     *
     * @param  {String} [tagName='div'] Name of tag to be created.
     * @param  {Object} [properties={}] Element properties to be applied.
     * @param  {Object} [attributes={}] Element attributes to be applied.
     * @return {Element}
     * @function createEl
     */

    function createEl() {
        var tagName = arguments.length <= 0 || arguments[0] === undefined ? 'div' : arguments[0];
        var properties = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
        var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        var el = _globalDocument2['default'].createElement(tagName);

        Object.getOwnPropertyNames(properties).forEach(function (propName) {
            var val = properties[propName];

            // See #2176
            // We originally were accepting both properties and attributes in the
            // same object, but that doesn't work so well.
            if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {
                _logJs2['default'].warn(_tsml2['default'](_templateObject, propName, val));
                el.setAttribute(propName, val);
            } else {
                el[propName] = val;
            }
        });

        Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
            var val = attributes[attrName];
            el.setAttribute(attrName, attributes[attrName]);
        });

        return el;
    }

    /**
     * Injects text into an element, replacing any existing contents entirely.
     *
     * @param  {Element} el
     * @param  {String} text
     * @return {Element}
     * @function textContent
     */

    function textContent(el, text) {
        if (typeof el.textContent === 'undefined') {
            el.innerText = text;
        } else {
            el.textContent = text;
        }
    }

    /**
     * Insert an element as the first child node of another
     *
     * @param  {Element} child   Element to insert
     * @param  {Element} parent Element to insert child into
     * @private
     * @function insertElFirst
     */

    function insertElFirst(child, parent) {
        if (parent.firstChild) {
            parent.insertBefore(child, parent.firstChild);
        } else {
            parent.appendChild(child);
        }
    }

    /**
     * Element Data Store. Allows for binding data to an element without putting it directly on the element.
     * Ex. Event listeners are stored here.
     * (also from jsninja.com, slightly modified and updated for closure compiler)
     *
     * @type {Object}
     * @private
     */
    var elData = {};

    /*
     * Unique attribute name to store an element's guid in
     *
     * @type {String}
     * @constant
     * @private
     */
    var elIdAttr = 'vdata' + new Date().getTime();

    /**
     * Returns the cache object where data for an element is stored
     *
     * @param  {Element} el Element to store data for.
     * @return {Object}
     * @function getElData
     */

    function getElData(el) {
        var id = el[elIdAttr];

        if (!id) {
            id = el[elIdAttr] = Guid.newGUID();
        }

        if (!elData[id]) {
            elData[id] = {};
        }

        return elData[id];
    }

    /**
     * Returns whether or not an element has cached data
     *
     * @param  {Element} el A dom element
     * @return {Boolean}
     * @private
     * @function hasElData
     */

    function hasElData(el) {
        var id = el[elIdAttr];

        if (!id) {
            return false;
        }

        return !!Object.getOwnPropertyNames(elData[id]).length;
    }

    /**
     * Delete data for the element from the cache and the guid attr from getElementById
     *
     * @param  {Element} el Remove data for an element
     * @private
     * @function removeElData
     */

    function removeElData(el) {
        var id = el[elIdAttr];

        if (!id) {
            return;
        }

        // Remove all stored data
        delete elData[id];

        // Remove the elIdAttr property from the DOM node
        try {
            delete el[elIdAttr];
        } catch (e) {
            if (el.removeAttribute) {
                el.removeAttribute(elIdAttr);
            } else {
                // IE doesn't appear to support removeAttribute on the document element
                el[elIdAttr] = null;
            }
        }
    }

    /**
     * Check if an element has a CSS class
     *
     * @function hasElClass
     * @param {Element} element Element to check
     * @param {String} classToCheck Classname to check
     */

    function hasElClass(element, classToCheck) {
        if (element.classList) {
            return element.classList.contains(classToCheck);
        } else {
            throwIfWhitespace(classToCheck);
            return classRegExp(classToCheck).test(element.className);
        }
    }

    /**
     * Add a CSS class name to an element
     *
     * @function addElClass
     * @param {Element} element    Element to add class name to
     * @param {String} classToAdd Classname to add
     */

    function addElClass(element, classToAdd) {
        if (element.classList) {
            element.classList.add(classToAdd);

            // Don't need to `throwIfWhitespace` here because `hasElClass` will do it
            // in the case of classList not being supported.
        } else if (!hasElClass(element, classToAdd)) {
            element.className = (element.className + ' ' + classToAdd).trim();
        }

        return element;
    }

    /**
     * Remove a CSS class name from an element
     *
     * @function removeElClass
     * @param {Element} element    Element to remove from class name
     * @param {String} classToRemove Classname to remove
     */

    function removeElClass(element, classToRemove) {
        if (element.classList) {
            element.classList.remove(classToRemove);
        } else {
            throwIfWhitespace(classToRemove);
            element.className = element.className.split(/\s+/).filter(function (c) {
                return c !== classToRemove;
            }).join(' ');
        }

        return element;
    }

    /**
     * Adds or removes a CSS class name on an element depending on an optional
     * condition or the presence/absence of the class name.
     *
     * @function toggleElClass
     * @param    {Element} element
     * @param    {String} classToToggle
     * @param    {Boolean|Function} [predicate]
     *           Can be a function that returns a Boolean. If `true`, the class
     *           will be added; if `false`, the class will be removed. If not
     *           given, the class will be added if not present and vice versa.
     */

    function toggleElClass(element, classToToggle, predicate) {

        // This CANNOT use `classList` internally because IE does not support the
        // second parameter to the `classList.toggle()` method! Which is fine because
        // `classList` will be used by the add/remove functions.
        var has = hasElClass(element, classToToggle);

        if (typeof predicate === 'function') {
            predicate = predicate(element, classToToggle);
        }

        if (typeof predicate !== 'boolean') {
            predicate = !has;
        }

        // If the necessary class operation matches the current state of the
        // element, no action is required.
        if (predicate === has) {
            return;
        }

        if (predicate) {
            addElClass(element, classToToggle);
        } else {
            removeElClass(element, classToToggle);
        }

        return element;
    }

    /**
     * Apply attributes to an HTML element.
     *
     * @param  {Element} el         Target element.
     * @param  {Object=} attributes Element attributes to be applied.
     * @private
     * @function setElAttributes
     */

    function setElAttributes(el, attributes) {
        Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
            var attrValue = attributes[attrName];

            if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
                el.removeAttribute(attrName);
            } else {
                el.setAttribute(attrName, attrValue === true ? '' : attrValue);
            }
        });
    }

    /**
     * Get an element's attribute values, as defined on the HTML tag
     * Attributes are not the same as properties. They're defined on the tag
     * or with setAttribute (which shouldn't be used with HTML)
     * This will return true or false for boolean attributes.
     *
     * @param  {Element} tag Element from which to get tag attributes
     * @return {Object}
     * @private
     * @function getElAttributes
     */

    function getElAttributes(tag) {
        var obj, knownBooleans, attrs, attrName, attrVal;

        obj = {};

        // known boolean attributes
        // we can check for matching boolean properties, but older browsers
        // won't know about HTML5 boolean attributes that we still read from
        knownBooleans = ',' + 'autoplay,controls,loop,muted,default' + ',';

        if (tag && tag.attributes && tag.attributes.length > 0) {
            attrs = tag.attributes;

            for (var i = attrs.length - 1; i >= 0; i--) {
                attrName = attrs[i].name;
                attrVal = attrs[i].value;

                // check for known booleans
                // the matching element property will return a value for typeof
                if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
                    // the value of an included boolean attribute is typically an empty
                    // string ('') which would equal false if we just check for a false value.
                    // we also don't want support bad code like autoplay='false'
                    attrVal = attrVal !== null ? true : false;
                }

                obj[attrName] = attrVal;
            }
        }

        return obj;
    }

    /**
     * Attempt to block the ability to select text while dragging controls
     *
     * @return {Boolean}
     * @function blockTextSelection
     */

    function blockTextSelection() {
        _globalDocument2['default'].body.focus();
        _globalDocument2['default'].onselectstart = function () {
            return false;
        };
    }

    /**
     * Turn off text selection blocking
     *
     * @return {Boolean}
     * @function unblockTextSelection
     */

    function unblockTextSelection() {
        _globalDocument2['default'].onselectstart = function () {
            return true;
        };
    }

    /**
     * Offset Left
     * getBoundingClientRect technique from
     * John Resig http://ejohn.org/blog/getboundingclientrect-is-awesome/
     *
     * @function findElPosition
     * @param {Element} el Element from which to get offset
     * @return {Object}
     */

    function findElPosition(el) {
        var box = undefined;

        if (el.getBoundingClientRect && el.parentNode) {
            box = el.getBoundingClientRect();
        }

        if (!box) {
            return {
                left: 0,
                top: 0
            };
        }

        var docEl = _globalDocument2['default'].documentElement;
        var body = _globalDocument2['default'].body;

        var clientLeft = docEl.clientLeft || body.clientLeft || 0;
        var scrollLeft = _globalWindow2['default'].pageXOffset || body.scrollLeft;
        var left = box.left + scrollLeft - clientLeft;

        var clientTop = docEl.clientTop || body.clientTop || 0;
        var scrollTop = _globalWindow2['default'].pageYOffset || body.scrollTop;
        var top = box.top + scrollTop - clientTop;

        // Android sometimes returns slightly off decimal values, so need to round
        return {
            left: Math.round(left),
            top: Math.round(top)
        };
    }

    /**
     * Get pointer position in element
     * Returns an object with x and y coordinates.
     * The base on the coordinates are the bottom left of the element.
     *
     * @function getPointerPosition
     * @param {Element} el Element on which to get the pointer position on
     * @param {Event} event Event object
     * @return {Object} This object will have x and y coordinates corresponding to the mouse position
     */

    function getPointerPosition(el, event) {
        var position = {};
        var box = findElPosition(el);
        var boxW = el.offsetWidth;
        var boxH = el.offsetHeight;

        var boxY = box.top;
        var boxX = box.left;
        var pageY = event.pageY;
        var pageX = event.pageX;

        if (event.changedTouches) {
            pageX = event.changedTouches[0].pageX;
            pageY = event.changedTouches[0].pageY;
        }

        position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
        position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));

        return position;
    }

    /**
     * Determines, via duck typing, whether or not a value is a DOM element.
     *
     * @function isEl
     * @param    {Mixed} value
     * @return   {Boolean}
     */

    function isEl(value) {
        return !!value && typeof value === 'object' && value.nodeType === 1;
    }

    /**
     * Determines, via duck typing, whether or not a value is a text node.
     *
     * @param  {Mixed} value
     * @return {Boolean}
     */

    function isTextNode(value) {
        return !!value && typeof value === 'object' && value.nodeType === 3;
    }

    /**
     * Empties the contents of an element.
     *
     * @function emptyEl
     * @param    {Element} el
     * @return   {Element}
     */

    function emptyEl(el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
        return el;
    }

    /**
     * Normalizes content for eventual insertion into the DOM.
     *
     * This allows a wide range of content definition methods, but protects
     * from falling into the trap of simply writing to `innerHTML`, which is
     * an XSS concern.
     *
     * The content for an element can be passed in multiple types and
     * combinations, whose behavior is as follows:
     *
     * - String
     *   Normalized into a text node.
     *
     * - Element, TextNode
     *   Passed through.
     *
     * - Array
     *   A one-dimensional array of strings, elements, nodes, or functions (which
     *   return single strings, elements, or nodes).
     *
     * - Function
     *   If the sole argument, is expected to produce a string, element,
     *   node, or array.
     *
     * @function normalizeContent
     * @param    {String|Element|TextNode|Array|Function} content
     * @return   {Array}
     */

    function normalizeContent(content) {

        // First, invoke content if it is a function. If it produces an array,
        // that needs to happen before normalization.
        if (typeof content === 'function') {
            content = content();
        }

        // Next up, normalize to an array, so one or many items can be normalized,
        // filtered, and returned.
        return (Array.isArray(content) ? content : [content]).map(function (value) {

            // First, invoke value if it is a function to produce a new value,
            // which will be subsequently normalized to a Node of some kind.
            if (typeof value === 'function') {
                value = value();
            }

            if (isEl(value) || isTextNode(value)) {
                return value;
            }

            if (typeof value === 'string' && /\S/.test(value)) {
                return _globalDocument2['default'].createTextNode(value);
            }
        }).filter(function (value) {
            return value;
        });
    }

    /**
     * Normalizes and appends content to an element.
     *
     * @function appendContent
     * @param    {Element} el
     * @param    {String|Element|TextNode|Array|Function} content
     *           See: `normalizeContent`
     * @return   {Element}
     */

    function appendContent(el, content) {
        normalizeContent(content).forEach(function (node) {
            return el.appendChild(node);
        });
        return el;
    }

    /**
     * Normalizes and inserts content into an element; this is identical to
     * `appendContent()`, except it empties the element first.
     *
     * @function insertContent
     * @param    {Element} el
     * @param    {String|Element|TextNode|Array|Function} content
     *           See: `normalizeContent`
     * @return   {Element}
     */

    function insertContent(el, content) {
        return appendContent(emptyEl(el), content);
    }

    /**
     * Finds a single DOM element matching `selector` within the optional
     * `context` of another DOM element (defaulting to `document`).
     *
     * @function $
     * @param    {String} selector
     *           A valid CSS selector, which will be passed to `querySelector`.
     *
     * @param    {Element|String} [context=document]
     *           A DOM element within which to query. Can also be a selector
     *           string in which case the first matching element will be used
     *           as context. If missing (or no element matches selector), falls
     *           back to `document`.
     *
     * @return   {Element|null}
     */
    var $ = createQuerier('querySelector');

    exports.$ = $;
    /**
     * Finds a all DOM elements matching `selector` within the optional
     * `context` of another DOM element (defaulting to `document`).
     *
     * @function $$
     * @param    {String} selector
     *           A valid CSS selector, which will be passed to `querySelectorAll`.
     *
     * @param    {Element|String} [context=document]
     *           A DOM element within which to query. Can also be a selector
     *           string in which case the first matching element will be used
     *           as context. If missing (or no element matches selector), falls
     *           back to `document`.
     *
     * @return   {NodeList}
     */
    var $$ = createQuerier('querySelectorAll');
    exports.$$ = $$;

},{"./guid.js":146,"./log.js":147,"global/document":1,"global/window":2,"tsml":55}],143:[function(_dereq_,module,exports){
    /**
     * @file events.js
     *
     * Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
     * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
     * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
     * robust as jquery's, so there's probably some differences.
     */

    'use strict';

    exports.__esModule = true;
    exports.on = on;
    exports.off = off;
    exports.trigger = trigger;
    exports.one = one;
    exports.fixEvent = fixEvent;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    var _domJs = _dereq_('./dom.js');

    var Dom = _interopRequireWildcard(_domJs);

    var _guidJs = _dereq_('./guid.js');

    var Guid = _interopRequireWildcard(_guidJs);

    var _logJs = _dereq_('./log.js');

    var _logJs2 = _interopRequireDefault(_logJs);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    /**
     * Add an event listener to element
     * It stores the handler function in a separate cache object
     * and adds a generic handler to the element's event,
     * along with a unique id (guid) to the element.
     *
     * @param  {Element|Object}   elem Element or object to bind listeners to
     * @param  {String|Array}   type Type of event to bind to.
     * @param  {Function} fn   Event listener.
     * @method on
     */

    function on(elem, type, fn) {
        if (Array.isArray(type)) {
            return _handleMultipleEvents(on, elem, type, fn);
        }

        var data = Dom.getElData(elem);

        // We need a place to store all our handler data
        if (!data.handlers) data.handlers = {};

        if (!data.handlers[type]) data.handlers[type] = [];

        if (!fn.guid) fn.guid = Guid.newGUID();

        data.handlers[type].push(fn);

        if (!data.dispatcher) {
            data.disabled = false;

            data.dispatcher = function (event, hash) {

                if (data.disabled) return;
                event = fixEvent(event);

                var handlers = data.handlers[event.type];

                if (handlers) {
                    // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
                    var handlersCopy = handlers.slice(0);

                    for (var m = 0, n = handlersCopy.length; m < n; m++) {
                        if (event.isImmediatePropagationStopped()) {
                            break;
                        } else {
                            try {
                                handlersCopy[m].call(elem, event, hash);
                            } catch (e) {
                                _logJs2['default'].error(e);
                            }
                        }
                    }
                }
            };
        }

        if (data.handlers[type].length === 1) {
            if (elem.addEventListener) {
                elem.addEventListener(type, data.dispatcher, false);
            } else if (elem.attachEvent) {
                elem.attachEvent('on' + type, data.dispatcher);
            }
        }
    }

    /**
     * Removes event listeners from an element
     *
     * @param  {Element|Object}   elem Object to remove listeners from
     * @param  {String|Array=}   type Type of listener to remove. Don't include to remove all events from element.
     * @param  {Function} fn   Specific listener to remove. Don't include to remove listeners for an event type.
     * @method off
     */

    function off(elem, type, fn) {
        // Don't want to add a cache object through getElData if not needed
        if (!Dom.hasElData(elem)) return;

        var data = Dom.getElData(elem);

        // If no events exist, nothing to unbind
        if (!data.handlers) {
            return;
        }

        if (Array.isArray(type)) {
            return _handleMultipleEvents(off, elem, type, fn);
        }

        // Utility function
        var removeType = function removeType(t) {
            data.handlers[t] = [];
            _cleanUpEvents(elem, t);
        };

        // Are we removing all bound events?
        if (!type) {
            for (var t in data.handlers) {
                removeType(t);
            }return;
        }

        var handlers = data.handlers[type];

        // If no handlers exist, nothing to unbind
        if (!handlers) return;

        // If no listener was provided, remove all listeners for type
        if (!fn) {
            removeType(type);
            return;
        }

        // We're only removing a single handler
        if (fn.guid) {
            for (var n = 0; n < handlers.length; n++) {
                if (handlers[n].guid === fn.guid) {
                    handlers.splice(n--, 1);
                }
            }
        }

        _cleanUpEvents(elem, type);
    }

    /**
     * Trigger an event for an element
     *
     * @param  {Element|Object}      elem  Element to trigger an event on
     * @param  {Event|Object|String} event A string (the type) or an event object with a type attribute
     * @param  {Object} [hash] data hash to pass along with the event
     * @return {Boolean=} Returned only if default was prevented
     * @method trigger
     */

    function trigger(elem, event, hash) {
        // Fetches element data and a reference to the parent (for bubbling).
        // Don't want to add a data object to cache for every parent,
        // so checking hasElData first.
        var elemData = Dom.hasElData(elem) ? Dom.getElData(elem) : {};
        var parent = elem.parentNode || elem.ownerDocument;
        // type = event.type || event,
        // handler;

        // If an event name was passed as a string, creates an event out of it
        if (typeof event === 'string') {
            event = { type: event, target: elem };
        }
        // Normalizes the event properties.
        event = fixEvent(event);

        // If the passed element has a dispatcher, executes the established handlers.
        if (elemData.dispatcher) {
            elemData.dispatcher.call(elem, event, hash);
        }

        // Unless explicitly stopped or the event does not bubble (e.g. media events)
        // recursively calls this function to bubble the event up the DOM.
        if (parent && !event.isPropagationStopped() && event.bubbles === true) {
            trigger.call(null, parent, event, hash);

            // If at the top of the DOM, triggers the default action unless disabled.
        } else if (!parent && !event.defaultPrevented) {
            var targetData = Dom.getElData(event.target);

            // Checks if the target has a default action for this event.
            if (event.target[event.type]) {
                // Temporarily disables event dispatching on the target as we have already executed the handler.
                targetData.disabled = true;
                // Executes the default action.
                if (typeof event.target[event.type] === 'function') {
                    event.target[event.type]();
                }
                // Re-enables event dispatching.
                targetData.disabled = false;
            }
        }

        // Inform the triggerer if the default was prevented by returning false
        return !event.defaultPrevented;
    }

    /**
     * Trigger a listener only once for an event
     *
     * @param  {Element|Object}   elem Element or object to
     * @param  {String|Array}   type Name/type of event
     * @param  {Function} fn Event handler function
     * @method one
     */

    function one(elem, type, fn) {
        if (Array.isArray(type)) {
            return _handleMultipleEvents(one, elem, type, fn);
        }
        var func = function func() {
            off(elem, type, func);
            fn.apply(this, arguments);
        };
        // copy the guid to the new function so it can removed using the original function's ID
        func.guid = fn.guid = fn.guid || Guid.newGUID();
        on(elem, type, func);
    }

    /**
     * Fix a native event to have standard property values
     *
     * @param  {Object} event Event object to fix
     * @return {Object}
     * @private
     * @method fixEvent
     */

    function fixEvent(event) {

        function returnTrue() {
            return true;
        }
        function returnFalse() {
            return false;
        }

        // Test if fixing up is needed
        // Used to check if !event.stopPropagation instead of isPropagationStopped
        // But native events return true for stopPropagation, but don't have
        // other expected methods like isPropagationStopped. Seems to be a problem
        // with the Javascript Ninja code. So we're just overriding all events now.
        if (!event || !event.isPropagationStopped) {
            var old = event || _globalWindow2['default'].event;

            event = {};
            // Clone the old object so that we can modify the values event = {};
            // IE8 Doesn't like when you mess with native event properties
            // Firefox returns false for event.hasOwnProperty('type') and other props
            //  which makes copying more difficult.
            // TODO: Probably best to create a whitelist of event props
            for (var key in old) {
                // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
                // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
                // and webkitMovementX/Y
                if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {
                    // Chrome 32+ warns if you try to copy deprecated returnValue, but
                    // we still want to if preventDefault isn't supported (IE8).
                    if (!(key === 'returnValue' && old.preventDefault)) {
                        event[key] = old[key];
                    }
                }
            }

            // The event occurred on this element
            if (!event.target) {
                event.target = event.srcElement || _globalDocument2['default'];
            }

            // Handle which other element the event is related to
            if (!event.relatedTarget) {
                event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
            }

            // Stop the default browser action
            event.preventDefault = function () {
                if (old.preventDefault) {
                    old.preventDefault();
                }
                event.returnValue = false;
                old.returnValue = false;
                event.defaultPrevented = true;
            };

            event.defaultPrevented = false;

            // Stop the event from bubbling
            event.stopPropagation = function () {
                if (old.stopPropagation) {
                    old.stopPropagation();
                }
                event.cancelBubble = true;
                old.cancelBubble = true;
                event.isPropagationStopped = returnTrue;
            };

            event.isPropagationStopped = returnFalse;

            // Stop the event from bubbling and executing other handlers
            event.stopImmediatePropagation = function () {
                if (old.stopImmediatePropagation) {
                    old.stopImmediatePropagation();
                }
                event.isImmediatePropagationStopped = returnTrue;
                event.stopPropagation();
            };

            event.isImmediatePropagationStopped = returnFalse;

            // Handle mouse position
            if (event.clientX != null) {
                var doc = _globalDocument2['default'].documentElement,
                    body = _globalDocument2['default'].body;

                event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
            }

            // Handle key presses
            event.which = event.charCode || event.keyCode;

            // Fix button for mouse clicks:
            // 0 == left; 1 == middle; 2 == right
            if (event.button != null) {
                event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
            }
        }

        // Returns fixed-up instance
        return event;
    }

    /**
     * Clean up the listener cache and dispatchers
     *
     * @param  {Element|Object} elem Element to clean up
     * @param  {String} type Type of event to clean up
     * @private
     * @method _cleanUpEvents
     */
    function _cleanUpEvents(elem, type) {
        var data = Dom.getElData(elem);

        // Remove the events of a particular type if there are none left
        if (data.handlers[type].length === 0) {
            delete data.handlers[type];
            // data.handlers[type] = null;
            // Setting to null was causing an error with data.handlers

            // Remove the meta-handler from the element
            if (elem.removeEventListener) {
                elem.removeEventListener(type, data.dispatcher, false);
            } else if (elem.detachEvent) {
                elem.detachEvent('on' + type, data.dispatcher);
            }
        }

        // Remove the events object if there are no types left
        if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
            delete data.handlers;
            delete data.dispatcher;
            delete data.disabled;
        }

        // Finally remove the element data if there is no data left
        if (Object.getOwnPropertyNames(data).length === 0) {
            Dom.removeElData(elem);
        }
    }

    /**
     * Loops through an array of event types and calls the requested method for each type.
     *
     * @param  {Function} fn   The event method we want to use.
     * @param  {Element|Object} elem Element or object to bind listeners to
     * @param  {String}   type Type of event to bind to.
     * @param  {Function} callback   Event listener.
     * @private
     * @function _handleMultipleEvents
     */
    function _handleMultipleEvents(fn, elem, types, callback) {
        types.forEach(function (type) {
            //Call the event method for each one of the types
            fn(elem, type, callback);
        });
    }

},{"./dom.js":142,"./guid.js":146,"./log.js":147,"global/document":1,"global/window":2}],144:[function(_dereq_,module,exports){
    /**
     * @file fn.js
     */
    'use strict';

    exports.__esModule = true;

    var _guidJs = _dereq_('./guid.js');

    /**
     * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
     * It also stores a unique id on the function so it can be easily removed from events
     *
     * @param  {*}   context The object to bind as scope
     * @param  {Function} fn      The function to be bound to a scope
     * @param  {Number=}   uid     An optional unique ID for the function to be set
     * @return {Function}
     * @private
     * @method bind
     */
    var bind = function bind(context, fn, uid) {
        // Make sure the function has a unique ID
        if (!fn.guid) {
            fn.guid = _guidJs.newGUID();
        }

        // Create the new function that changes the context
        var ret = function ret() {
            return fn.apply(context, arguments);
        };

        // Allow for the ability to individualize this function
        // Needed in the case where multiple objects might share the same prototype
        // IF both items add an event listener with the same function, then you try to remove just one
        // it will remove both because they both have the same guid.
        // when using this, you need to use the bind method when you remove the listener as well.
        // currently used in text tracks
        ret.guid = uid ? uid + '_' + fn.guid : fn.guid;

        return ret;
    };
    exports.bind = bind;

},{"./guid.js":146}],145:[function(_dereq_,module,exports){
    /**
     * @file format-time.js
     *
     * Format seconds as a time string, H:MM:SS or M:SS
     * Supplying a guide (in seconds) will force a number of leading zeros
     * to cover the length of the guide
     *
     * @param  {Number} seconds Number of seconds to be turned into a string
     * @param  {Number} guide   Number (in seconds) to model the string after
     * @return {String}         Time formatted as H:MM:SS or M:SS
     * @private
     * @function formatTime
     */
    'use strict';

    exports.__esModule = true;
    function formatTime(seconds) {
        var guide = arguments.length <= 1 || arguments[1] === undefined ? seconds : arguments[1];
        return (function () {
            seconds = seconds < 0 ? 0 : seconds;
            var s = Math.floor(seconds % 60);
            var m = Math.floor(seconds / 60 % 60);
            var h = Math.floor(seconds / 3600);
            var gm = Math.floor(guide / 60 % 60);
            var gh = Math.floor(guide / 3600);

            // handle invalid times
            if (isNaN(seconds) || seconds === Infinity) {
                // '-' is false for all relational operators (e.g. <, >=) so this setting
                // will add the minimum number of fields specified by the guide
                h = m = s = '-';
            }

            // Check if we need to show hours
            h = h > 0 || gh > 0 ? h + ':' : '';

            // If hours are showing, we may need to add a leading zero.
            // Always show at least one digit of minutes.
            m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

            // Check if leading zero is need for seconds
            s = s < 10 ? '0' + s : s;

            return h + m + s;
        })();
    }

    exports['default'] = formatTime;
    module.exports = exports['default'];

},{}],146:[function(_dereq_,module,exports){
    /**
     * @file guid.js
     *
     * Unique ID for an element or function
     * @type {Number}
     * @private
     */
    "use strict";

    exports.__esModule = true;
    exports.newGUID = newGUID;
    var _guid = 1;

    /**
     * Get the next unique ID
     *
     * @return {String}
     * @function newGUID
     */

    function newGUID() {
        return _guid++;
    }

},{}],147:[function(_dereq_,module,exports){
    /**
     * @file log.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _browser = _dereq_('./browser');

    /**
     * Log messages to the console and history based on the type of message
     *
     * @param  {String} type
     *         The name of the console method to use.
     * @param  {Array} args
     *         The arguments to be passed to the matching console method.
     * @param  {Boolean} [stringify]
     *         By default, only old IEs should get console argument stringification,
     *         but this is exposed as a parameter to facilitate testing.
     */
    var logByType = function logByType(type, args) {
        var stringify = arguments.length <= 2 || arguments[2] === undefined ? !!_browser.IE_VERSION && _browser.IE_VERSION < 11 : arguments[2];

        var console = _globalWindow2['default'].console;

        // If there's no console then don't try to output messages, but they will
        // still be stored in `log.history`.
        //
        // Was setting these once outside of this function, but containing them
        // in the function makes it easier to test cases where console doesn't exist
        // when the module is executed.
        var fn = console && console[type] || function () {};

        if (type !== 'log') {

            // add the type to the front of the message when it's not "log"
            args.unshift(type.toUpperCase() + ':');
        }

        // add to history
        log.history.push(args);

        // add console prefix after adding to history
        args.unshift('VIDEOJS:');

        // IEs previous to 11 log objects uselessly as "[object Object]"; so, JSONify
        // objects and arrays for those less-capable browsers.
        if (stringify) {
            args = args.map(function (a) {
                if (a && typeof a === 'object' || Array.isArray(a)) {
                    try {
                        return JSON.stringify(a);
                    } catch (x) {}
                }

                // Cast to string before joining, so we get null and undefined explicitly
                // included in output (as we would in a modern console).
                return String(a);
            }).join(' ');
        }

        // Old IE versions do not allow .apply() for console methods (they are
        // reported as objects rather than functions).
        if (!fn.apply) {
            fn(args);
        } else {
            fn[Array.isArray(args) ? 'apply' : 'call'](console, args);
        }
    };

    exports.logByType = logByType;
    /**
     * Log plain debug messages
     *
     * @function log
     */
    function log() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        logByType('log', args);
    }

    /**
     * Keep a history of log messages
     *
     * @type {Array}
     */
    log.history = [];

    /**
     * Log error messages
     *
     * @method error
     */
    log.error = function () {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return logByType('error', args);
    };

    /**
     * Log warning messages
     *
     * @method warn
     */
    log.warn = function () {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return logByType('warn', args);
    };

    exports['default'] = log;

},{"./browser":140,"global/window":2}],148:[function(_dereq_,module,exports){
    /**
     * @file merge-options.js
     */
    'use strict';

    exports.__esModule = true;
    exports['default'] = mergeOptions;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _lodashCompatObjectMerge = _dereq_('lodash-compat/object/merge');

    var _lodashCompatObjectMerge2 = _interopRequireDefault(_lodashCompatObjectMerge);

    function isPlain(obj) {
        return !!obj && typeof obj === 'object' && obj.toString() === '[object Object]' && obj.constructor === Object;
    }

    /**
     * Merge customizer. video.js simply overwrites non-simple objects
     * (like arrays) instead of attempting to overlay them.
     * @see https://lodash.com/docs#merge
     */
    var customizer = function customizer(destination, source) {
        // If we're not working with a plain object, copy the value as is
        // If source is an array, for instance, it will replace destination
        if (!isPlain(source)) {
            return source;
        }

        // If the new value is a plain object but the first object value is not
        // we need to create a new object for the first object to merge with.
        // This makes it consistent with how merge() works by default
        // and also protects from later changes the to first object affecting
        // the second object's values.
        if (!isPlain(destination)) {
            return mergeOptions(source);
        }
    };

    /**
     * Merge one or more options objects, recursively merging **only**
     * plain object properties.  Previously `deepMerge`.
     *
     * @param  {...Object} source One or more objects to merge
     * @returns {Object}          a new object that is the union of all
     * provided objects
     * @function mergeOptions
     */

    function mergeOptions() {
        // contruct the call dynamically to handle the variable number of
        // objects to merge
        var args = Array.prototype.slice.call(arguments);

        // unshift an empty object into the front of the call as the target
        // of the merge
        args.unshift({});

        // customize conflict resolution to match our historical merge behavior
        args.push(customizer);

        _lodashCompatObjectMerge2['default'].apply(null, args);

        // return the mutated result object
        return args[0];
    }

    module.exports = exports['default'];

},{"lodash-compat/object/merge":40}],149:[function(_dereq_,module,exports){
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var createStyleElement = function createStyleElement(className) {
        var style = _globalDocument2['default'].createElement('style');
        style.className = className;

        return style;
    };

    exports.createStyleElement = createStyleElement;
    var setTextContent = function setTextContent(el, content) {
        if (el.styleSheet) {
            el.styleSheet.cssText = content;
        } else {
            el.textContent = content;
        }
    };
    exports.setTextContent = setTextContent;

},{"global/document":1}],150:[function(_dereq_,module,exports){
    'use strict';

    exports.__esModule = true;
    exports.createTimeRanges = createTimeRanges;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _logJs = _dereq_('./log.js');

    var _logJs2 = _interopRequireDefault(_logJs);

    /**
     * @file time-ranges.js
     *
     * Should create a fake TimeRange object
     * Mimics an HTML5 time range instance, which has functions that
     * return the start and end times for a range
     * TimeRanges are returned by the buffered() method
     *
     * @param  {(Number|Array)} Start of a single range or an array of ranges
     * @param  {Number} End of a single range
     * @private
     * @method createTimeRanges
     */

    function createTimeRanges(start, end) {
        if (Array.isArray(start)) {
            return createTimeRangesObj(start);
        } else if (start === undefined || end === undefined) {
            return createTimeRangesObj();
        }
        return createTimeRangesObj([[start, end]]);
    }

    exports.createTimeRange = createTimeRanges;

    function createTimeRangesObj(ranges) {
        if (ranges === undefined || ranges.length === 0) {
            return {
                length: 0,
                start: function start() {
                    throw new Error('This TimeRanges object is empty');
                },
                end: function end() {
                    throw new Error('This TimeRanges object is empty');
                }
            };
        }
        return {
            length: ranges.length,
            start: getRange.bind(null, 'start', 0, ranges),
            end: getRange.bind(null, 'end', 1, ranges)
        };
    }

    function getRange(fnName, valueIndex, ranges, rangeIndex) {
        if (rangeIndex === undefined) {
            _logJs2['default'].warn('DEPRECATED: Function \'' + fnName + '\' on \'TimeRanges\' called without an index argument.');
            rangeIndex = 0;
        }
        rangeCheck(fnName, rangeIndex, ranges.length - 1);
        return ranges[rangeIndex][valueIndex];
    }

    function rangeCheck(fnName, index, maxIndex) {
        if (index < 0 || index > maxIndex) {
            throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is greater than or equal to the maximum bound (' + maxIndex + ').');
        }
    }

},{"./log.js":147}],151:[function(_dereq_,module,exports){
    /**
     * @file to-title-case.js
     *
     * Uppercase the first letter of a string
     *
     * @param  {String} string String to be uppercased
     * @return {String}
     * @private
     * @method toTitleCase
     */
    "use strict";

    exports.__esModule = true;
    function toTitleCase(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }

    exports["default"] = toTitleCase;
    module.exports = exports["default"];

},{}],152:[function(_dereq_,module,exports){
    /**
     * @file url.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    /**
     * Resolve and parse the elements of a URL
     *
     * @param  {String} url The url to parse
     * @return {Object}     An object of url details
     * @method parseUrl
     */
    var parseUrl = function parseUrl(url) {
        var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];

        // add the url to an anchor and let the browser parse the URL
        var a = _globalDocument2['default'].createElement('a');
        a.href = url;

        // IE8 (and 9?) Fix
        // ie8 doesn't parse the URL correctly until the anchor is actually
        // added to the body, and an innerHTML is needed to trigger the parsing
        var addToBody = a.host === '' && a.protocol !== 'file:';
        var div = undefined;
        if (addToBody) {
            div = _globalDocument2['default'].createElement('div');
            div.innerHTML = '<a href="' + url + '"></a>';
            a = div.firstChild;
            // prevent the div from affecting layout
            div.setAttribute('style', 'display:none; position:absolute;');
            _globalDocument2['default'].body.appendChild(div);
        }

        // Copy the specific URL properties to a new object
        // This is also needed for IE8 because the anchor loses its
        // properties when it's removed from the dom
        var details = {};
        for (var i = 0; i < props.length; i++) {
            details[props[i]] = a[props[i]];
        }

        // IE9 adds the port to the host property unlike everyone else. If
        // a port identifier is added for standard ports, strip it.
        if (details.protocol === 'http:') {
            details.host = details.host.replace(/:80$/, '');
        }
        if (details.protocol === 'https:') {
            details.host = details.host.replace(/:443$/, '');
        }

        if (addToBody) {
            _globalDocument2['default'].body.removeChild(div);
        }

        return details;
    };

    exports.parseUrl = parseUrl;
    /**
     * Get absolute version of relative URL. Used to tell flash correct URL.
     * http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
     *
     * @param  {String} url URL to make absolute
     * @return {String}     Absolute URL
     * @private
     * @method getAbsoluteURL
     */
    var getAbsoluteURL = function getAbsoluteURL(url) {
        // Check if absolute URL
        if (!url.match(/^https?:\/\//)) {
            // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
            var div = _globalDocument2['default'].createElement('div');
            div.innerHTML = '<a href="' + url + '">x</a>';
            url = div.firstChild.href;
        }

        return url;
    };

    exports.getAbsoluteURL = getAbsoluteURL;
    /**
     * Returns the extension of the passed file name. It will return an empty string if you pass an invalid path
     *
     * @param {String}    path    The fileName path like '/path/to/file.mp4'
     * @returns {String}          The extension in lower case or an empty string if no extension could be found.
     * @method getFileExtension
     */
    var getFileExtension = function getFileExtension(path) {
        if (typeof path === 'string') {
            var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
            var pathParts = splitPathRe.exec(path);

            if (pathParts) {
                return pathParts.pop().toLowerCase();
            }
        }

        return '';
    };

    exports.getFileExtension = getFileExtension;
    /**
     * Returns whether the url passed is a cross domain request or not.
     *
     * @param {String} url The url to check
     * @return {Boolean}   Whether it is a cross domain request or not
     * @method isCrossOrigin
     */
    var isCrossOrigin = function isCrossOrigin(url) {
        var winLoc = _globalWindow2['default'].location;
        var urlInfo = parseUrl(url);

        // IE8 protocol relative urls will return ':' for protocol
        var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;

        // Check if url is for another domain/origin
        // IE8 doesn't know location.origin, so we won't rely on it here
        var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;

        return crossOrigin;
    };
    exports.isCrossOrigin = isCrossOrigin;

},{"global/document":1,"global/window":2}],153:[function(_dereq_,module,exports){
    /**
     * @file video.js
     */
    'use strict';

    exports.__esModule = true;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _globalWindow = _dereq_('global/window');

    var _globalWindow2 = _interopRequireDefault(_globalWindow);

    var _globalDocument = _dereq_('global/document');

    var _globalDocument2 = _interopRequireDefault(_globalDocument);

    var _setup = _dereq_('./setup');

    var setup = _interopRequireWildcard(_setup);

    var _utilsStylesheetJs = _dereq_('./utils/stylesheet.js');

    var stylesheet = _interopRequireWildcard(_utilsStylesheetJs);

    var _component = _dereq_('./component');

    var _component2 = _interopRequireDefault(_component);

    var _eventTarget = _dereq_('./event-target');

    var _eventTarget2 = _interopRequireDefault(_eventTarget);

    var _utilsEventsJs = _dereq_('./utils/events.js');

    var Events = _interopRequireWildcard(_utilsEventsJs);

    var _player = _dereq_('./player');

    var _player2 = _interopRequireDefault(_player);

    var _pluginsJs = _dereq_('./plugins.js');

    var _pluginsJs2 = _interopRequireDefault(_pluginsJs);

    var _srcJsUtilsMergeOptionsJs = _dereq_('../../src/js/utils/merge-options.js');

    var _srcJsUtilsMergeOptionsJs2 = _interopRequireDefault(_srcJsUtilsMergeOptionsJs);

    var _utilsFnJs = _dereq_('./utils/fn.js');

    var Fn = _interopRequireWildcard(_utilsFnJs);

    var _tracksTextTrackJs = _dereq_('./tracks/text-track.js');

    var _tracksTextTrackJs2 = _interopRequireDefault(_tracksTextTrackJs);

    var _tracksAudioTrackJs = _dereq_('./tracks/audio-track.js');

    var _tracksAudioTrackJs2 = _interopRequireDefault(_tracksAudioTrackJs);

    var _tracksVideoTrackJs = _dereq_('./tracks/video-track.js');

    var _tracksVideoTrackJs2 = _interopRequireDefault(_tracksVideoTrackJs);

    var _utilsTimeRangesJs = _dereq_('./utils/time-ranges.js');

    var _utilsFormatTimeJs = _dereq_('./utils/format-time.js');

    var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

    var _utilsLogJs = _dereq_('./utils/log.js');

    var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

    var _utilsDomJs = _dereq_('./utils/dom.js');

    var Dom = _interopRequireWildcard(_utilsDomJs);

    var _utilsBrowserJs = _dereq_('./utils/browser.js');

    var browser = _interopRequireWildcard(_utilsBrowserJs);

    var _utilsUrlJs = _dereq_('./utils/url.js');

    var Url = _interopRequireWildcard(_utilsUrlJs);

    var _extendJs = _dereq_('./extend.js');

    var _extendJs2 = _interopRequireDefault(_extendJs);

    var _lodashCompatObjectMerge = _dereq_('lodash-compat/object/merge');

    var _lodashCompatObjectMerge2 = _interopRequireDefault(_lodashCompatObjectMerge);

    var _xhr = _dereq_('xhr');

    var _xhr2 = _interopRequireDefault(_xhr);

// Include the built-in techs

    var _techTechJs = _dereq_('./tech/tech.js');

    var _techTechJs2 = _interopRequireDefault(_techTechJs);

    var _techHtml5Js = _dereq_('./tech/html5.js');

    var _techHtml5Js2 = _interopRequireDefault(_techHtml5Js);

    var _techFlashJs = _dereq_('./tech/flash.js');

    var _techFlashJs2 = _interopRequireDefault(_techFlashJs);

// HTML5 Element Shim for IE8
    if (typeof HTMLVideoElement === 'undefined') {
        _globalDocument2['default'].createElement('video');
        _globalDocument2['default'].createElement('audio');
        _globalDocument2['default'].createElement('track');
    }

    /**
     * Doubles as the main function for users to create a player instance and also
     * the main library object.
     * The `videojs` function can be used to initialize or retrieve a player.
     * ```js
     *     var myPlayer = videojs('my_video_id');
     * ```
     *
     * @param  {String|Element} id      Video element or video element ID
     * @param  {Object=} options        Optional options object for config/settings
     * @param  {Function=} ready        Optional ready callback
     * @return {Player}                 A player instance
     * @mixes videojs
     * @method videojs
     */
    function videojs(id, options, ready) {
        var tag = undefined; // Element of ID

        // Allow for element or ID to be passed in
        // String ID
        if (typeof id === 'string') {

            // Adjust for jQuery ID syntax
            if (id.indexOf('#') === 0) {
                id = id.slice(1);
            }

            // If a player instance has already been created for this ID return it.
            if (videojs.getPlayers()[id]) {

                // If options or ready funtion are passed, warn
                if (options) {
                    _utilsLogJs2['default'].warn('Player "' + id + '" is already initialised. Options will not be applied.');
                }

                if (ready) {
                    videojs.getPlayers()[id].ready(ready);
                }

                return videojs.getPlayers()[id];

                // Otherwise get element for ID
            } else {
                tag = Dom.getEl(id);
            }

            // ID is a media element
        } else {
            tag = id;
        }

        // Check for a useable element
        if (!tag || !tag.nodeName) {
            // re: nodeName, could be a box div also
            throw new TypeError('The element or ID supplied is not valid. (videojs)'); // Returns
        }

        // Element may have a player attr referring to an already created player instance.
        // If not, set up a new player and return the instance.
        return tag['player'] || _player2['default'].players[tag.playerId] || new _player2['default'](tag, options, ready);
    }

// Add default styles
    if (_globalWindow2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {
        var style = Dom.$('.vjs-styles-defaults');

        if (!style) {
            style = stylesheet.createStyleElement('vjs-styles-defaults');
            var head = Dom.$('head');
            head.insertBefore(style, head.firstChild);
            stylesheet.setTextContent(style, '\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ');
        }
    }

// Run Auto-load players
// You have to wait at least once in case this script is loaded after your video in the DOM (weird behavior only with minified version)
    setup.autoSetupTimeout(1, videojs);

    /*
     * Current software version (semver)
     *
     * @type {String}
     */
    videojs.VERSION = '5.11.6';

    /**
     * The global options object. These are the settings that take effect
     * if no overrides are specified when the player is created.
     *
     * ```js
     *     videojs.options.autoplay = true
     *     // -> all players will autoplay by default
     * ```
     *
     * @type {Object}
     */
    videojs.options = _player2['default'].prototype.options_;

    /**
     * Get an object with the currently created players, keyed by player ID
     *
     * @return {Object} The created players
     * @mixes videojs
     * @method getPlayers
     */
    videojs.getPlayers = function () {
        return _player2['default'].players;
    };

    /**
     * Expose players object.
     *
     * @memberOf videojs
     * @property {Object} players
     */
    videojs.players = _player2['default'].players;

    /**
     * Get a component class object by name
     * ```js
     *     var VjsButton = videojs.getComponent('Button');
     *     // Create a new instance of the component
     *     var myButton = new VjsButton(myPlayer);
     * ```
     *
     * @return {Component} Component identified by name
     * @mixes videojs
     * @method getComponent
     */
    videojs.getComponent = _component2['default'].getComponent;

    /**
     * Register a component so it can referred to by name
     * Used when adding to other
     * components, either through addChild
     * `component.addChild('myComponent')`
     * or through default children options
     * `{ children: ['myComponent'] }`.
     * ```js
     *     // Get a component to subclass
     *     var VjsButton = videojs.getComponent('Button');
     *     // Subclass the component (see 'extend' doc for more info)
     *     var MySpecialButton = videojs.extend(VjsButton, {});
     *     // Register the new component
     *     VjsButton.registerComponent('MySepcialButton', MySepcialButton);
     *     // (optionally) add the new component as a default player child
     *     myPlayer.addChild('MySepcialButton');
     * ```
     * NOTE: You could also just initialize the component before adding.
     * `component.addChild(new MyComponent());`
     *
     * @param {String} The class name of the component
     * @param {Component} The component class
     * @return {Component} The newly registered component
     * @mixes videojs
     * @method registerComponent
     */
    videojs.registerComponent = function (name, comp) {
        if (_techTechJs2['default'].isTech(comp)) {
            _utilsLogJs2['default'].warn('The ' + name + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');
        }

        _component2['default'].registerComponent.call(_component2['default'], name, comp);
    };

    /**
     * Get a Tech class object by name
     * ```js
     *     var Html5 = videojs.getTech('Html5');
     *     // Create a new instance of the component
     *     var html5 = new Html5(options);
     * ```
     *
     * @return {Tech} Tech identified by name
     * @mixes videojs
     * @method getComponent
     */
    videojs.getTech = _techTechJs2['default'].getTech;

    /**
     * Register a Tech so it can referred to by name.
     * This is used in the tech order for the player.
     *
     * ```js
     *     // get the Html5 Tech
     *     var Html5 = videojs.getTech('Html5');
     *     var MyTech = videojs.extend(Html5, {});
     *     // Register the new Tech
     *     VjsButton.registerTech('Tech', MyTech);
     *     var player = videojs('myplayer', {
 *       techOrder: ['myTech', 'html5']
 *     });
     * ```
     *
     * @param {String} The class name of the tech
     * @param {Tech} The tech class
     * @return {Tech} The newly registered Tech
     * @mixes videojs
     * @method registerTech
     */
    videojs.registerTech = _techTechJs2['default'].registerTech;

    /**
     * A suite of browser and device tests
     *
     * @type {Object}
     * @private
     */
    videojs.browser = browser;

    /**
     * Whether or not the browser supports touch events. Included for backward
     * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`
     * instead going forward.
     *
     * @deprecated
     * @type {Boolean}
     */
    videojs.TOUCH_ENABLED = browser.TOUCH_ENABLED;

    /**
     * Subclass an existing class
     * Mimics ES6 subclassing with the `extend` keyword
     * ```js
     *     // Create a basic javascript 'class'
     *     function MyClass(name){
 *       // Set a property at initialization
 *       this.myName = name;
 *     }
     *     // Create an instance method
     *     MyClass.prototype.sayMyName = function(){
 *       alert(this.myName);
 *     };
     *     // Subclass the exisitng class and change the name
     *     // when initializing
     *     var MySubClass = videojs.extend(MyClass, {
 *       constructor: function(name) {
 *         // Call the super class constructor for the subclass
 *         MyClass.call(this, name)
 *       }
 *     });
     *     // Create an instance of the new sub class
     *     var myInstance = new MySubClass('John');
     *     myInstance.sayMyName(); // -> should alert "John"
     * ```
     *
     * @param {Function} The Class to subclass
     * @param {Object} An object including instace methods for the new class
     *                   Optionally including a `constructor` function
     * @return {Function} The newly created subclass
     * @mixes videojs
     * @method extend
     */
    videojs.extend = _extendJs2['default'];

    /**
     * Merge two options objects recursively
     * Performs a deep merge like lodash.merge but **only merges plain objects**
     * (not arrays, elements, anything else)
     * Other values will be copied directly from the second object.
     * ```js
     *     var defaultOptions = {
 *       foo: true,
 *       bar: {
 *         a: true,
 *         b: [1,2,3]
 *       }
 *     };
     *     var newOptions = {
 *       foo: false,
 *       bar: {
 *         b: [4,5,6]
 *       }
 *     };
     *     var result = videojs.mergeOptions(defaultOptions, newOptions);
     *     // result.foo = false;
     *     // result.bar.a = true;
     *     // result.bar.b = [4,5,6];
     * ```
     *
     * @param {Object} defaults  The options object whose values will be overriden
     * @param {Object} overrides The options object with values to override the first
     * @param {Object} etc       Any number of additional options objects
     *
     * @return {Object} a new object with the merged values
     * @mixes videojs
     * @method mergeOptions
     */
    videojs.mergeOptions = _srcJsUtilsMergeOptionsJs2['default'];

    /**
     * Change the context (this) of a function
     *
     *     videojs.bind(newContext, function(){
 *       this === newContext
 *     });
     *
     * NOTE: as of v5.0 we require an ES5 shim, so you should use the native
     * `function(){}.bind(newContext);` instead of this.
     *
     * @param  {*}        context The object to bind as scope
     * @param  {Function} fn      The function to be bound to a scope
     * @param  {Number=}  uid     An optional unique ID for the function to be set
     * @return {Function}
     */
    videojs.bind = Fn.bind;

    /**
     * Create a Video.js player plugin
     * Plugins are only initialized when options for the plugin are included
     * in the player options, or the plugin function on the player instance is
     * called.
     * **See the plugin guide in the docs for a more detailed example**
     * ```js
     *     // Make a plugin that alerts when the player plays
     *     videojs.plugin('myPlugin', function(myPluginOptions) {
 *       myPluginOptions = myPluginOptions || {};
 *
 *       var player = this;
 *       var alertText = myPluginOptions.text || 'Player is playing!'
 *
 *       player.on('play', function(){
 *         alert(alertText);
 *       });
 *     });
     *     // USAGE EXAMPLES
     *     // EXAMPLE 1: New player with plugin options, call plugin immediately
     *     var player1 = videojs('idOne', {
 *       myPlugin: {
 *         text: 'Custom text!'
 *       }
 *     });
     *     // Click play
     *     // --> Should alert 'Custom text!'
     *     // EXAMPLE 3: New player, initialize plugin later
     *     var player3 = videojs('idThree');
     *     // Click play
     *     // --> NO ALERT
     *     // Click pause
     *     // Initialize plugin using the plugin function on the player instance
     *     player3.myPlugin({
 *       text: 'Plugin added later!'
 *     });
     *     // Click play
     *     // --> Should alert 'Plugin added later!'
     * ```
     *
     * @param {String} name The plugin name
     * @param {Function} fn The plugin function that will be called with options
     * @mixes videojs
     * @method plugin
     */
    videojs.plugin = _pluginsJs2['default'];

    /**
     * Adding languages so that they're available to all players.
     * ```js
     *     videojs.addLanguage('es', { 'Hello': 'Hola' });
     * ```
     *
     * @param  {String} code The language code or dictionary property
     * @param  {Object} data The data values to be translated
     * @return {Object} The resulting language dictionary object
     * @mixes videojs
     * @method addLanguage
     */
    videojs.addLanguage = function (code, data) {
        var _merge;

        code = ('' + code).toLowerCase();
        return _lodashCompatObjectMerge2['default'](videojs.options.languages, (_merge = {}, _merge[code] = data, _merge))[code];
    };

    /**
     * Log debug messages.
     *
     * @param {...Object} messages One or more messages to log
     */
    videojs.log = _utilsLogJs2['default'];

    /**
     * Creates an emulated TimeRange object.
     *
     * @param  {Number|Array} start Start time in seconds or an array of ranges
     * @param  {Number} end   End time in seconds
     * @return {Object}       Fake TimeRange object
     * @method createTimeRange
     */
    videojs.createTimeRange = videojs.createTimeRanges = _utilsTimeRangesJs.createTimeRanges;

    /**
     * Format seconds as a time string, H:MM:SS or M:SS
     * Supplying a guide (in seconds) will force a number of leading zeros
     * to cover the length of the guide
     *
     * @param  {Number} seconds Number of seconds to be turned into a string
     * @param  {Number} guide   Number (in seconds) to model the string after
     * @return {String}         Time formatted as H:MM:SS or M:SS
     * @method formatTime
     */
    videojs.formatTime = _utilsFormatTimeJs2['default'];

    /**
     * Resolve and parse the elements of a URL
     *
     * @param  {String} url The url to parse
     * @return {Object}     An object of url details
     * @method parseUrl
     */
    videojs.parseUrl = Url.parseUrl;

    /**
     * Returns whether the url passed is a cross domain request or not.
     *
     * @param {String} url The url to check
     * @return {Boolean}   Whether it is a cross domain request or not
     * @method isCrossOrigin
     */
    videojs.isCrossOrigin = Url.isCrossOrigin;

    /**
     * Event target class.
     *
     * @type {Function}
     */
    videojs.EventTarget = _eventTarget2['default'];

    /**
     * Add an event listener to element
     * It stores the handler function in a separate cache object
     * and adds a generic handler to the element's event,
     * along with a unique id (guid) to the element.
     *
     * @param  {Element|Object}   elem Element or object to bind listeners to
     * @param  {String|Array}   type Type of event to bind to.
     * @param  {Function} fn   Event listener.
     * @method on
     */
    videojs.on = Events.on;

    /**
     * Trigger a listener only once for an event
     *
     * @param  {Element|Object}   elem Element or object to
     * @param  {String|Array}   type Name/type of event
     * @param  {Function} fn Event handler function
     * @method one
     */
    videojs.one = Events.one;

    /**
     * Removes event listeners from an element
     *
     * @param  {Element|Object}   elem Object to remove listeners from
     * @param  {String|Array=}   type Type of listener to remove. Don't include to remove all events from element.
     * @param  {Function} fn   Specific listener to remove. Don't include to remove listeners for an event type.
     * @method off
     */
    videojs.off = Events.off;

    /**
     * Trigger an event for an element
     *
     * @param  {Element|Object}      elem  Element to trigger an event on
     * @param  {Event|Object|String} event A string (the type) or an event object with a type attribute
     * @param  {Object} [hash] data hash to pass along with the event
     * @return {Boolean=} Returned only if default was prevented
     * @method trigger
     */
    videojs.trigger = Events.trigger;

    /**
     * A cross-browser XMLHttpRequest wrapper. Here's a simple example:
     *
     *     videojs.xhr({
 *       body: someJSONString,
 *       uri: "/foo",
 *       headers: {
 *         "Content-Type": "application/json"
 *       }
 *     }, function (err, resp, body) {
 *       // check resp.statusCode
 *     });
     *
     * Check out the [full
     * documentation](https://github.com/Raynos/xhr/blob/v2.1.0/README.md)
     * for more options.
     *
     * @param {Object} options settings for the request.
     * @return {XMLHttpRequest|XDomainRequest} the request object.
     * @see https://github.com/Raynos/xhr
     */
    videojs.xhr = _xhr2['default'];

    /**
     * TextTrack class
     *
     * @type {Function}
     */
    videojs.TextTrack = _tracksTextTrackJs2['default'];

    /**
     * export the AudioTrack class so that source handlers can create
     * AudioTracks and then add them to the players AudioTrackList
     *
     * @type {Function}
     */
    videojs.AudioTrack = _tracksAudioTrackJs2['default'];

    /**
     * export the VideoTrack class so that source handlers can create
     * VideoTracks and then add them to the players VideoTrackList
     *
     * @type {Function}
     */
    videojs.VideoTrack = _tracksVideoTrackJs2['default'];

    /**
     * Determines, via duck typing, whether or not a value is a DOM element.
     *
     * @method isEl
     * @param  {Mixed} value
     * @return {Boolean}
     */
    videojs.isEl = Dom.isEl;

    /**
     * Determines, via duck typing, whether or not a value is a text node.
     *
     * @method isTextNode
     * @param  {Mixed} value
     * @return {Boolean}
     */
    videojs.isTextNode = Dom.isTextNode;

    /**
     * Creates an element and applies properties.
     *
     * @method createEl
     * @param  {String} [tagName='div'] Name of tag to be created.
     * @param  {Object} [properties={}] Element properties to be applied.
     * @param  {Object} [attributes={}] Element attributes to be applied.
     * @return {Element}
     */
    videojs.createEl = Dom.createEl;

    /**
     * Check if an element has a CSS class
     *
     * @method hasClass
     * @param {Element} element Element to check
     * @param {String} classToCheck Classname to check
     */
    videojs.hasClass = Dom.hasElClass;

    /**
     * Add a CSS class name to an element
     *
     * @method addClass
     * @param {Element} element    Element to add class name to
     * @param {String} classToAdd Classname to add
     */
    videojs.addClass = Dom.addElClass;

    /**
     * Remove a CSS class name from an element
     *
     * @method removeClass
     * @param {Element} element    Element to remove from class name
     * @param {String} classToRemove Classname to remove
     */
    videojs.removeClass = Dom.removeElClass;

    /**
     * Adds or removes a CSS class name on an element depending on an optional
     * condition or the presence/absence of the class name.
     *
     * @method toggleElClass
     * @param  {Element} element
     * @param  {String} classToToggle
     * @param  {Boolean|Function} [predicate]
     *         Can be a function that returns a Boolean. If `true`, the class
     *         will be added; if `false`, the class will be removed. If not
     *         given, the class will be added if not present and vice versa.
     */
    videojs.toggleClass = Dom.toggleElClass;

    /**
     * Apply attributes to an HTML element.
     *
     * @method setAttributes
     * @param  {Element} el         Target element.
     * @param  {Object=} attributes Element attributes to be applied.
     */
    videojs.setAttributes = Dom.setElAttributes;

    /**
     * Get an element's attribute values, as defined on the HTML tag
     * Attributes are not the same as properties. They're defined on the tag
     * or with setAttribute (which shouldn't be used with HTML)
     * This will return true or false for boolean attributes.
     *
     * @method getAttributes
     * @param  {Element} tag Element from which to get tag attributes
     * @return {Object}
     */
    videojs.getAttributes = Dom.getElAttributes;

    /**
     * Empties the contents of an element.
     *
     * @method emptyEl
     * @param  {Element} el
     * @return {Element}
     */
    videojs.emptyEl = Dom.emptyEl;

    /**
     * Normalizes and appends content to an element.
     *
     * The content for an element can be passed in multiple types and
     * combinations, whose behavior is as follows:
     *
     * - String
     *   Normalized into a text node.
     *
     * - Element, TextNode
     *   Passed through.
     *
     * - Array
     *   A one-dimensional array of strings, elements, nodes, or functions (which
     *   return single strings, elements, or nodes).
     *
     * - Function
     *   If the sole argument, is expected to produce a string, element,
     *   node, or array.
     *
     * @method appendContent
     * @param  {Element} el
     * @param  {String|Element|TextNode|Array|Function} content
     * @return {Element}
     */
    videojs.appendContent = Dom.appendContent;

    /**
     * Normalizes and inserts content into an element; this is identical to
     * `appendContent()`, except it empties the element first.
     *
     * The content for an element can be passed in multiple types and
     * combinations, whose behavior is as follows:
     *
     * - String
     *   Normalized into a text node.
     *
     * - Element, TextNode
     *   Passed through.
     *
     * - Array
     *   A one-dimensional array of strings, elements, nodes, or functions (which
     *   return single strings, elements, or nodes).
     *
     * - Function
     *   If the sole argument, is expected to produce a string, element,
     *   node, or array.
     *
     * @method insertContent
     * @param  {Element} el
     * @param  {String|Element|TextNode|Array|Function} content
     * @return {Element}
     */
    videojs.insertContent = Dom.insertContent;

    /*
     * Custom Universal Module Definition (UMD)
     *
     * Video.js will never be a non-browser lib so we can simplify UMD a bunch and
     * still support requirejs and browserify. This also needs to be closure
     * compiler compatible, so string keys are used.
     */
    if (typeof define === 'function' && define['amd']) {
        define('videojs', [], function () {
            return videojs;
        });

        // checking that module is an object too because of umdjs/umd#35
    } else if (typeof exports === 'object' && typeof module === 'object') {
        module['exports'] = videojs;
    }

    exports['default'] = videojs;
    module.exports = exports['default'];

},{"../../src/js/utils/merge-options.js":148,"./component":67,"./event-target":104,"./extend.js":105,"./player":113,"./plugins.js":114,"./setup":118,"./tech/flash.js":121,"./tech/html5.js":122,"./tech/tech.js":124,"./tracks/audio-track.js":126,"./tracks/text-track.js":134,"./tracks/video-track.js":139,"./utils/browser.js":140,"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/format-time.js":145,"./utils/log.js":147,"./utils/stylesheet.js":149,"./utils/time-ranges.js":150,"./utils/url.js":152,"global/document":1,"global/window":2,"lodash-compat/object/merge":40,"xhr":56}]},{},[153])(153)
});


//# sourceMappingURL=video.js.map
/* vtt.js - v0.12.1 (https://github.com/mozilla/vtt.js) built on 08-07-2015 */

(function(root) {
    var vttjs = root.vttjs = {};
    var cueShim = vttjs.VTTCue;
    var regionShim = vttjs.VTTRegion;
    var oldVTTCue = root.VTTCue;
    var oldVTTRegion = root.VTTRegion;

    vttjs.shim = function() {
        vttjs.VTTCue = cueShim;
        vttjs.VTTRegion = regionShim;
    };

    vttjs.restore = function() {
        vttjs.VTTCue = oldVTTCue;
        vttjs.VTTRegion = oldVTTRegion;
    };
}(this));

/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, vttjs) {

    var autoKeyword = "auto";
    var directionSetting = {
        "": true,
        "lr": true,
        "rl": true
    };
    var alignSetting = {
        "start": true,
        "middle": true,
        "end": true,
        "left": true,
        "right": true
    };

    function findDirectionSetting(value) {
        if (typeof value !== "string") {
            return false;
        }
        var dir = directionSetting[value.toLowerCase()];
        return dir ? value.toLowerCase() : false;
    }

    function findAlignSetting(value) {
        if (typeof value !== "string") {
            return false;
        }
        var align = alignSetting[value.toLowerCase()];
        return align ? value.toLowerCase() : false;
    }

    function extend(obj) {
        var i = 1;
        for (; i < arguments.length; i++) {
            var cobj = arguments[i];
            for (var p in cobj) {
                obj[p] = cobj[p];
            }
        }

        return obj;
    }

    function VTTCue(startTime, endTime, text) {
        var cue = this;
        var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
        var baseObj = {};

        if (isIE8) {
            cue = document.createElement('custom');
        } else {
            baseObj.enumerable = true;
        }

        /**
         * Shim implementation specific properties. These properties are not in
         * the spec.
         */

            // Lets us know when the VTTCue's data has changed in such a way that we need
            // to recompute its display state. This lets us compute its display state
            // lazily.
        cue.hasBeenReset = false;

        /**
         * VTTCue and TextTrackCue properties
         * http://dev.w3.org/html5/webvtt/#vttcue-interface
         */

        var _id = "";
        var _pauseOnExit = false;
        var _startTime = startTime;
        var _endTime = endTime;
        var _text = text;
        var _region = null;
        var _vertical = "";
        var _snapToLines = true;
        var _line = "auto";
        var _lineAlign = "start";
        var _position = 50;
        var _positionAlign = "middle";
        var _size = 50;
        var _align = "middle";

        Object.defineProperty(cue,
            "id", extend({}, baseObj, {
                get: function() {
                    return _id;
                },
                set: function(value) {
                    _id = "" + value;
                }
            }));

        Object.defineProperty(cue,
            "pauseOnExit", extend({}, baseObj, {
                get: function() {
                    return _pauseOnExit;
                },
                set: function(value) {
                    _pauseOnExit = !!value;
                }
            }));

        Object.defineProperty(cue,
            "startTime", extend({}, baseObj, {
                get: function() {
                    return _startTime;
                },
                set: function(value) {
                    if (typeof value !== "number") {
                        throw new TypeError("Start time must be set to a number.");
                    }
                    _startTime = value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "endTime", extend({}, baseObj, {
                get: function() {
                    return _endTime;
                },
                set: function(value) {
                    if (typeof value !== "number") {
                        throw new TypeError("End time must be set to a number.");
                    }
                    _endTime = value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "text", extend({}, baseObj, {
                get: function() {
                    return _text;
                },
                set: function(value) {
                    _text = "" + value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "region", extend({}, baseObj, {
                get: function() {
                    return _region;
                },
                set: function(value) {
                    _region = value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "vertical", extend({}, baseObj, {
                get: function() {
                    return _vertical;
                },
                set: function(value) {
                    var setting = findDirectionSetting(value);
                    // Have to check for false because the setting an be an empty string.
                    if (setting === false) {
                        throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _vertical = setting;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "snapToLines", extend({}, baseObj, {
                get: function() {
                    return _snapToLines;
                },
                set: function(value) {
                    _snapToLines = !!value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "line", extend({}, baseObj, {
                get: function() {
                    return _line;
                },
                set: function(value) {
                    if (typeof value !== "number" && value !== autoKeyword) {
                        throw new SyntaxError("An invalid number or illegal string was specified.");
                    }
                    _line = value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "lineAlign", extend({}, baseObj, {
                get: function() {
                    return _lineAlign;
                },
                set: function(value) {
                    var setting = findAlignSetting(value);
                    if (!setting) {
                        throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _lineAlign = setting;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "position", extend({}, baseObj, {
                get: function() {
                    return _position;
                },
                set: function(value) {
                    if (value < 0 || value > 100) {
                        throw new Error("Position must be between 0 and 100.");
                    }
                    _position = value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "positionAlign", extend({}, baseObj, {
                get: function() {
                    return _positionAlign;
                },
                set: function(value) {
                    var setting = findAlignSetting(value);
                    if (!setting) {
                        throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _positionAlign = setting;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "size", extend({}, baseObj, {
                get: function() {
                    return _size;
                },
                set: function(value) {
                    if (value < 0 || value > 100) {
                        throw new Error("Size must be between 0 and 100.");
                    }
                    _size = value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "align", extend({}, baseObj, {
                get: function() {
                    return _align;
                },
                set: function(value) {
                    var setting = findAlignSetting(value);
                    if (!setting) {
                        throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _align = setting;
                    this.hasBeenReset = true;
                }
            }));

        /**
         * Other <track> spec defined properties
         */

            // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
        cue.displayState = undefined;

        if (isIE8) {
            return cue;
        }
    }

    /**
     * VTTCue methods
     */

    VTTCue.prototype.getCueAsHTML = function() {
        // Assume WebVTT.convertCueToDOMTree is on the global.
        return WebVTT.convertCueToDOMTree(window, this.text);
    };

    root.VTTCue = root.VTTCue || VTTCue;
    vttjs.VTTCue = VTTCue;
}(this, (this.vttjs || {})));

/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, vttjs) {

    var scrollSetting = {
        "": true,
        "up": true
    };

    function findScrollSetting(value) {
        if (typeof value !== "string") {
            return false;
        }
        var scroll = scrollSetting[value.toLowerCase()];
        return scroll ? value.toLowerCase() : false;
    }

    function isValidPercentValue(value) {
        return typeof value === "number" && (value >= 0 && value <= 100);
    }

    // VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface
    function VTTRegion() {
        var _width = 100;
        var _lines = 3;
        var _regionAnchorX = 0;
        var _regionAnchorY = 100;
        var _viewportAnchorX = 0;
        var _viewportAnchorY = 100;
        var _scroll = "";

        Object.defineProperties(this, {
            "width": {
                enumerable: true,
                get: function() {
                    return _width;
                },
                set: function(value) {
                    if (!isValidPercentValue(value)) {
                        throw new Error("Width must be between 0 and 100.");
                    }
                    _width = value;
                }
            },
            "lines": {
                enumerable: true,
                get: function() {
                    return _lines;
                },
                set: function(value) {
                    if (typeof value !== "number") {
                        throw new TypeError("Lines must be set to a number.");
                    }
                    _lines = value;
                }
            },
            "regionAnchorY": {
                enumerable: true,
                get: function() {
                    return _regionAnchorY;
                },
                set: function(value) {
                    if (!isValidPercentValue(value)) {
                        throw new Error("RegionAnchorX must be between 0 and 100.");
                    }
                    _regionAnchorY = value;
                }
            },
            "regionAnchorX": {
                enumerable: true,
                get: function() {
                    return _regionAnchorX;
                },
                set: function(value) {
                    if(!isValidPercentValue(value)) {
                        throw new Error("RegionAnchorY must be between 0 and 100.");
                    }
                    _regionAnchorX = value;
                }
            },
            "viewportAnchorY": {
                enumerable: true,
                get: function() {
                    return _viewportAnchorY;
                },
                set: function(value) {
                    if (!isValidPercentValue(value)) {
                        throw new Error("ViewportAnchorY must be between 0 and 100.");
                    }
                    _viewportAnchorY = value;
                }
            },
            "viewportAnchorX": {
                enumerable: true,
                get: function() {
                    return _viewportAnchorX;
                },
                set: function(value) {
                    if (!isValidPercentValue(value)) {
                        throw new Error("ViewportAnchorX must be between 0 and 100.");
                    }
                    _viewportAnchorX = value;
                }
            },
            "scroll": {
                enumerable: true,
                get: function() {
                    return _scroll;
                },
                set: function(value) {
                    var setting = findScrollSetting(value);
                    // Have to check for false as an empty string is a legal value.
                    if (setting === false) {
                        throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _scroll = setting;
                }
            }
        });
    }

    root.VTTRegion = root.VTTRegion || VTTRegion;
    vttjs.VTTRegion = VTTRegion;
}(this, (this.vttjs || {})));

/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */

(function(global) {

    var _objCreate = Object.create || (function() {
            function F() {}
            return function(o) {
                if (arguments.length !== 1) {
                    throw new Error('Object.create shim only accepts one parameter.');
                }
                F.prototype = o;
                return new F();
            };
        })();

    // Creates a new ParserError object from an errorData object. The errorData
    // object should have default code and message properties. The default message
    // property can be overriden by passing in a message parameter.
    // See ParsingError.Errors below for acceptable errors.
    function ParsingError(errorData, message) {
        this.name = "ParsingError";
        this.code = errorData.code;
        this.message = message || errorData.message;
    }
    ParsingError.prototype = _objCreate(Error.prototype);
    ParsingError.prototype.constructor = ParsingError;

    // ParsingError metadata for acceptable ParsingErrors.
    ParsingError.Errors = {
        BadSignature: {
            code: 0,
            message: "Malformed WebVTT signature."
        },
        BadTimeStamp: {
            code: 1,
            message: "Malformed time stamp."
        }
    };

    // Try to parse input as a time stamp.
    function parseTimeStamp(input) {

        function computeSeconds(h, m, s, f) {
            return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
        }

        var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
        if (!m) {
            return null;
        }

        if (m[3]) {
            // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
            return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4]);
        } else if (m[1] > 59) {
            // Timestamp takes the form of [hours]:[minutes].[milliseconds]
            // First position is hours as it's over 59.
            return computeSeconds(m[1], m[2], 0,  m[4]);
        } else {
            // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
            return computeSeconds(0, m[1], m[2], m[4]);
        }
    }

    // A settings object holds key/value pairs and will ignore anything but the first
    // assignment to a specific key.
    function Settings() {
        this.values = _objCreate(null);
    }

    Settings.prototype = {
        // Only accept the first assignment to any key.
        set: function(k, v) {
            if (!this.get(k) && v !== "") {
                this.values[k] = v;
            }
        },
        // Return the value for a key, or a default value.
        // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
        // a number of possible default values as properties where 'defaultKey' is
        // the key of the property that will be chosen; otherwise it's assumed to be
        // a single value.
        get: function(k, dflt, defaultKey) {
            if (defaultKey) {
                return this.has(k) ? this.values[k] : dflt[defaultKey];
            }
            return this.has(k) ? this.values[k] : dflt;
        },
        // Check whether we have a value for a key.
        has: function(k) {
            return k in this.values;
        },
        // Accept a setting if its one of the given alternatives.
        alt: function(k, v, a) {
            for (var n = 0; n < a.length; ++n) {
                if (v === a[n]) {
                    this.set(k, v);
                    break;
                }
            }
        },
        // Accept a setting if its a valid (signed) integer.
        integer: function(k, v) {
            if (/^-?\d+$/.test(v)) { // integer
                this.set(k, parseInt(v, 10));
            }
        },
        // Accept a setting if its a valid percentage.
        percent: function(k, v) {
            var m;
            if ((m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/))) {
                v = parseFloat(v);
                if (v >= 0 && v <= 100) {
                    this.set(k, v);
                    return true;
                }
            }
            return false;
        }
    };

    // Helper function to parse input into groups separated by 'groupDelim', and
    // interprete each group as a key/value pair separated by 'keyValueDelim'.
    function parseOptions(input, callback, keyValueDelim, groupDelim) {
        var groups = groupDelim ? input.split(groupDelim) : [input];
        for (var i in groups) {
            if (typeof groups[i] !== "string") {
                continue;
            }
            var kv = groups[i].split(keyValueDelim);
            if (kv.length !== 2) {
                continue;
            }
            var k = kv[0];
            var v = kv[1];
            callback(k, v);
        }
    }

    function parseCue(input, cue, regionList) {
        // Remember the original input if we need to throw an error.
        var oInput = input;
        // 4.1 WebVTT timestamp
        function consumeTimeStamp() {
            var ts = parseTimeStamp(input);
            if (ts === null) {
                throw new ParsingError(ParsingError.Errors.BadTimeStamp,
                    "Malformed timestamp: " + oInput);
            }
            // Remove time stamp from input.
            input = input.replace(/^[^\sa-zA-Z-]+/, "");
            return ts;
        }

        // 4.4.2 WebVTT cue settings
        function consumeCueSettings(input, cue) {
            var settings = new Settings();

            parseOptions(input, function (k, v) {
                switch (k) {
                    case "region":
                        // Find the last region we parsed with the same region id.
                        for (var i = regionList.length - 1; i >= 0; i--) {
                            if (regionList[i].id === v) {
                                settings.set(k, regionList[i].region);
                                break;
                            }
                        }
                        break;
                    case "vertical":
                        settings.alt(k, v, ["rl", "lr"]);
                        break;
                    case "line":
                        var vals = v.split(","),
                            vals0 = vals[0];
                        settings.integer(k, vals0);
                        settings.percent(k, vals0) ? settings.set("snapToLines", false) : null;
                        settings.alt(k, vals0, ["auto"]);
                        if (vals.length === 2) {
                            settings.alt("lineAlign", vals[1], ["start", "middle", "end"]);
                        }
                        break;
                    case "position":
                        vals = v.split(",");
                        settings.percent(k, vals[0]);
                        if (vals.length === 2) {
                            settings.alt("positionAlign", vals[1], ["start", "middle", "end"]);
                        }
                        break;
                    case "size":
                        settings.percent(k, v);
                        break;
                    case "align":
                        settings.alt(k, v, ["start", "middle", "end", "left", "right"]);
                        break;
                }
            }, /:/, /\s/);

            // Apply default values for any missing fields.
            cue.region = settings.get("region", null);
            cue.vertical = settings.get("vertical", "");
            cue.line = settings.get("line", "auto");
            cue.lineAlign = settings.get("lineAlign", "start");
            cue.snapToLines = settings.get("snapToLines", true);
            cue.size = settings.get("size", 100);
            cue.align = settings.get("align", "middle");
            cue.position = settings.get("position", {
                start: 0,
                left: 0,
                middle: 50,
                end: 100,
                right: 100
            }, cue.align);
            cue.positionAlign = settings.get("positionAlign", {
                start: "start",
                left: "start",
                middle: "middle",
                end: "end",
                right: "end"
            }, cue.align);
        }

        function skipWhitespace() {
            input = input.replace(/^\s+/, "");
        }

        // 4.1 WebVTT cue timings.
        skipWhitespace();
        cue.startTime = consumeTimeStamp();   // (1) collect cue start time
        skipWhitespace();
        if (input.substr(0, 3) !== "-->") {     // (3) next characters must match "-->"
            throw new ParsingError(ParsingError.Errors.BadTimeStamp,
                "Malformed time stamp (time stamps must be separated by '-->'): " +
                oInput);
        }
        input = input.substr(3);
        skipWhitespace();
        cue.endTime = consumeTimeStamp();     // (5) collect cue end time

        // 4.1 WebVTT cue settings list.
        skipWhitespace();
        consumeCueSettings(input, cue);
    }

    var ESCAPE = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&lrm;": "\u200e",
        "&rlm;": "\u200f",
        "&nbsp;": "\u00a0"
    };

    var TAG_NAME = {
        c: "span",
        i: "i",
        b: "b",
        u: "u",
        ruby: "ruby",
        rt: "rt",
        v: "span",
        lang: "span"
    };

    var TAG_ANNOTATION = {
        v: "title",
        lang: "lang"
    };

    var NEEDS_PARENT = {
        rt: "ruby"
    };

    // Parse content into a document fragment.
    function parseContent(window, input) {
        function nextToken() {
            // Check for end-of-string.
            if (!input) {
                return null;
            }

            // Consume 'n' characters from the input.
            function consume(result) {
                input = input.substr(result.length);
                return result;
            }

            var m = input.match(/^([^<]*)(<[^>]+>?)?/);
            // If there is some text before the next tag, return it, otherwise return
            // the tag.
            return consume(m[1] ? m[1] : m[2]);
        }

        // Unescape a string 's'.
        function unescape1(e) {
            return ESCAPE[e];
        }
        function unescape(s) {
            while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {
                s = s.replace(m[0], unescape1);
            }
            return s;
        }

        function shouldAdd(current, element) {
            return !NEEDS_PARENT[element.localName] ||
                NEEDS_PARENT[element.localName] === current.localName;
        }

        // Create an element for this tag.
        function createElement(type, annotation) {
            var tagName = TAG_NAME[type];
            if (!tagName) {
                return null;
            }
            var element = window.document.createElement(tagName);
            element.localName = tagName;
            var name = TAG_ANNOTATION[type];
            if (name && annotation) {
                element[name] = annotation.trim();
            }
            return element;
        }

        var rootDiv = window.document.createElement("div"),
            current = rootDiv,
            t,
            tagStack = [];

        while ((t = nextToken()) !== null) {
            if (t[0] === '<') {
                if (t[1] === "/") {
                    // If the closing tag matches, move back up to the parent node.
                    if (tagStack.length &&
                        tagStack[tagStack.length - 1] === t.substr(2).replace(">", "")) {
                        tagStack.pop();
                        current = current.parentNode;
                    }
                    // Otherwise just ignore the end tag.
                    continue;
                }
                var ts = parseTimeStamp(t.substr(1, t.length - 2));
                var node;
                if (ts) {
                    // Timestamps are lead nodes as well.
                    node = window.document.createProcessingInstruction("timestamp", ts);
                    current.appendChild(node);
                    continue;
                }
                var m = t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
                // If we can't parse the tag, skip to the next tag.
                if (!m) {
                    continue;
                }
                // Try to construct an element, and ignore the tag if we couldn't.
                node = createElement(m[1], m[3]);
                if (!node) {
                    continue;
                }
                // Determine if the tag should be added based on the context of where it
                // is placed in the cuetext.
                if (!shouldAdd(current, node)) {
                    continue;
                }
                // Set the class list (as a list of classes, separated by space).
                if (m[2]) {
                    node.className = m[2].substr(1).replace('.', ' ');
                }
                // Append the node to the current node, and enter the scope of the new
                // node.
                tagStack.push(m[1]);
                current.appendChild(node);
                current = node;
                continue;
            }

            // Text nodes are leaf nodes.
            current.appendChild(window.document.createTextNode(unescape(t)));
        }

        return rootDiv;
    }

    // This is a list of all the Unicode characters that have a strong
    // right-to-left category. What this means is that these characters are
    // written right-to-left for sure. It was generated by pulling all the strong
    // right-to-left characters out of the Unicode data table. That table can
    // found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt
    var strongRTLChars = [0x05BE, 0x05C0, 0x05C3, 0x05C6, 0x05D0, 0x05D1,
        0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7, 0x05D8, 0x05D9, 0x05DA,
        0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF, 0x05E0, 0x05E1, 0x05E2, 0x05E3,
        0x05E4, 0x05E5, 0x05E6, 0x05E7, 0x05E8, 0x05E9, 0x05EA, 0x05F0, 0x05F1,
        0x05F2, 0x05F3, 0x05F4, 0x0608, 0x060B, 0x060D, 0x061B, 0x061E, 0x061F,
        0x0620, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627, 0x0628,
        0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F, 0x0630, 0x0631,
        0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063A,
        0x063B, 0x063C, 0x063D, 0x063E, 0x063F, 0x0640, 0x0641, 0x0642, 0x0643,
        0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x0649, 0x064A, 0x066D, 0x066E,
        0x066F, 0x0671, 0x0672, 0x0673, 0x0674, 0x0675, 0x0676, 0x0677, 0x0678,
        0x0679, 0x067A, 0x067B, 0x067C, 0x067D, 0x067E, 0x067F, 0x0680, 0x0681,
        0x0682, 0x0683, 0x0684, 0x0685, 0x0686, 0x0687, 0x0688, 0x0689, 0x068A,
        0x068B, 0x068C, 0x068D, 0x068E, 0x068F, 0x0690, 0x0691, 0x0692, 0x0693,
        0x0694, 0x0695, 0x0696, 0x0697, 0x0698, 0x0699, 0x069A, 0x069B, 0x069C,
        0x069D, 0x069E, 0x069F, 0x06A0, 0x06A1, 0x06A2, 0x06A3, 0x06A4, 0x06A5,
        0x06A6, 0x06A7, 0x06A8, 0x06A9, 0x06AA, 0x06AB, 0x06AC, 0x06AD, 0x06AE,
        0x06AF, 0x06B0, 0x06B1, 0x06B2, 0x06B3, 0x06B4, 0x06B5, 0x06B6, 0x06B7,
        0x06B8, 0x06B9, 0x06BA, 0x06BB, 0x06BC, 0x06BD, 0x06BE, 0x06BF, 0x06C0,
        0x06C1, 0x06C2, 0x06C3, 0x06C4, 0x06C5, 0x06C6, 0x06C7, 0x06C8, 0x06C9,
        0x06CA, 0x06CB, 0x06CC, 0x06CD, 0x06CE, 0x06CF, 0x06D0, 0x06D1, 0x06D2,
        0x06D3, 0x06D4, 0x06D5, 0x06E5, 0x06E6, 0x06EE, 0x06EF, 0x06FA, 0x06FB,
        0x06FC, 0x06FD, 0x06FE, 0x06FF, 0x0700, 0x0701, 0x0702, 0x0703, 0x0704,
        0x0705, 0x0706, 0x0707, 0x0708, 0x0709, 0x070A, 0x070B, 0x070C, 0x070D,
        0x070F, 0x0710, 0x0712, 0x0713, 0x0714, 0x0715, 0x0716, 0x0717, 0x0718,
        0x0719, 0x071A, 0x071B, 0x071C, 0x071D, 0x071E, 0x071F, 0x0720, 0x0721,
        0x0722, 0x0723, 0x0724, 0x0725, 0x0726, 0x0727, 0x0728, 0x0729, 0x072A,
        0x072B, 0x072C, 0x072D, 0x072E, 0x072F, 0x074D, 0x074E, 0x074F, 0x0750,
        0x0751, 0x0752, 0x0753, 0x0754, 0x0755, 0x0756, 0x0757, 0x0758, 0x0759,
        0x075A, 0x075B, 0x075C, 0x075D, 0x075E, 0x075F, 0x0760, 0x0761, 0x0762,
        0x0763, 0x0764, 0x0765, 0x0766, 0x0767, 0x0768, 0x0769, 0x076A, 0x076B,
        0x076C, 0x076D, 0x076E, 0x076F, 0x0770, 0x0771, 0x0772, 0x0773, 0x0774,
        0x0775, 0x0776, 0x0777, 0x0778, 0x0779, 0x077A, 0x077B, 0x077C, 0x077D,
        0x077E, 0x077F, 0x0780, 0x0781, 0x0782, 0x0783, 0x0784, 0x0785, 0x0786,
        0x0787, 0x0788, 0x0789, 0x078A, 0x078B, 0x078C, 0x078D, 0x078E, 0x078F,
        0x0790, 0x0791, 0x0792, 0x0793, 0x0794, 0x0795, 0x0796, 0x0797, 0x0798,
        0x0799, 0x079A, 0x079B, 0x079C, 0x079D, 0x079E, 0x079F, 0x07A0, 0x07A1,
        0x07A2, 0x07A3, 0x07A4, 0x07A5, 0x07B1, 0x07C0, 0x07C1, 0x07C2, 0x07C3,
        0x07C4, 0x07C5, 0x07C6, 0x07C7, 0x07C8, 0x07C9, 0x07CA, 0x07CB, 0x07CC,
        0x07CD, 0x07CE, 0x07CF, 0x07D0, 0x07D1, 0x07D2, 0x07D3, 0x07D4, 0x07D5,
        0x07D6, 0x07D7, 0x07D8, 0x07D9, 0x07DA, 0x07DB, 0x07DC, 0x07DD, 0x07DE,
        0x07DF, 0x07E0, 0x07E1, 0x07E2, 0x07E3, 0x07E4, 0x07E5, 0x07E6, 0x07E7,
        0x07E8, 0x07E9, 0x07EA, 0x07F4, 0x07F5, 0x07FA, 0x0800, 0x0801, 0x0802,
        0x0803, 0x0804, 0x0805, 0x0806, 0x0807, 0x0808, 0x0809, 0x080A, 0x080B,
        0x080C, 0x080D, 0x080E, 0x080F, 0x0810, 0x0811, 0x0812, 0x0813, 0x0814,
        0x0815, 0x081A, 0x0824, 0x0828, 0x0830, 0x0831, 0x0832, 0x0833, 0x0834,
        0x0835, 0x0836, 0x0837, 0x0838, 0x0839, 0x083A, 0x083B, 0x083C, 0x083D,
        0x083E, 0x0840, 0x0841, 0x0842, 0x0843, 0x0844, 0x0845, 0x0846, 0x0847,
        0x0848, 0x0849, 0x084A, 0x084B, 0x084C, 0x084D, 0x084E, 0x084F, 0x0850,
        0x0851, 0x0852, 0x0853, 0x0854, 0x0855, 0x0856, 0x0857, 0x0858, 0x085E,
        0x08A0, 0x08A2, 0x08A3, 0x08A4, 0x08A5, 0x08A6, 0x08A7, 0x08A8, 0x08A9,
        0x08AA, 0x08AB, 0x08AC, 0x200F, 0xFB1D, 0xFB1F, 0xFB20, 0xFB21, 0xFB22,
        0xFB23, 0xFB24, 0xFB25, 0xFB26, 0xFB27, 0xFB28, 0xFB2A, 0xFB2B, 0xFB2C,
        0xFB2D, 0xFB2E, 0xFB2F, 0xFB30, 0xFB31, 0xFB32, 0xFB33, 0xFB34, 0xFB35,
        0xFB36, 0xFB38, 0xFB39, 0xFB3A, 0xFB3B, 0xFB3C, 0xFB3E, 0xFB40, 0xFB41,
        0xFB43, 0xFB44, 0xFB46, 0xFB47, 0xFB48, 0xFB49, 0xFB4A, 0xFB4B, 0xFB4C,
        0xFB4D, 0xFB4E, 0xFB4F, 0xFB50, 0xFB51, 0xFB52, 0xFB53, 0xFB54, 0xFB55,
        0xFB56, 0xFB57, 0xFB58, 0xFB59, 0xFB5A, 0xFB5B, 0xFB5C, 0xFB5D, 0xFB5E,
        0xFB5F, 0xFB60, 0xFB61, 0xFB62, 0xFB63, 0xFB64, 0xFB65, 0xFB66, 0xFB67,
        0xFB68, 0xFB69, 0xFB6A, 0xFB6B, 0xFB6C, 0xFB6D, 0xFB6E, 0xFB6F, 0xFB70,
        0xFB71, 0xFB72, 0xFB73, 0xFB74, 0xFB75, 0xFB76, 0xFB77, 0xFB78, 0xFB79,
        0xFB7A, 0xFB7B, 0xFB7C, 0xFB7D, 0xFB7E, 0xFB7F, 0xFB80, 0xFB81, 0xFB82,
        0xFB83, 0xFB84, 0xFB85, 0xFB86, 0xFB87, 0xFB88, 0xFB89, 0xFB8A, 0xFB8B,
        0xFB8C, 0xFB8D, 0xFB8E, 0xFB8F, 0xFB90, 0xFB91, 0xFB92, 0xFB93, 0xFB94,
        0xFB95, 0xFB96, 0xFB97, 0xFB98, 0xFB99, 0xFB9A, 0xFB9B, 0xFB9C, 0xFB9D,
        0xFB9E, 0xFB9F, 0xFBA0, 0xFBA1, 0xFBA2, 0xFBA3, 0xFBA4, 0xFBA5, 0xFBA6,
        0xFBA7, 0xFBA8, 0xFBA9, 0xFBAA, 0xFBAB, 0xFBAC, 0xFBAD, 0xFBAE, 0xFBAF,
        0xFBB0, 0xFBB1, 0xFBB2, 0xFBB3, 0xFBB4, 0xFBB5, 0xFBB6, 0xFBB7, 0xFBB8,
        0xFBB9, 0xFBBA, 0xFBBB, 0xFBBC, 0xFBBD, 0xFBBE, 0xFBBF, 0xFBC0, 0xFBC1,
        0xFBD3, 0xFBD4, 0xFBD5, 0xFBD6, 0xFBD7, 0xFBD8, 0xFBD9, 0xFBDA, 0xFBDB,
        0xFBDC, 0xFBDD, 0xFBDE, 0xFBDF, 0xFBE0, 0xFBE1, 0xFBE2, 0xFBE3, 0xFBE4,
        0xFBE5, 0xFBE6, 0xFBE7, 0xFBE8, 0xFBE9, 0xFBEA, 0xFBEB, 0xFBEC, 0xFBED,
        0xFBEE, 0xFBEF, 0xFBF0, 0xFBF1, 0xFBF2, 0xFBF3, 0xFBF4, 0xFBF5, 0xFBF6,
        0xFBF7, 0xFBF8, 0xFBF9, 0xFBFA, 0xFBFB, 0xFBFC, 0xFBFD, 0xFBFE, 0xFBFF,
        0xFC00, 0xFC01, 0xFC02, 0xFC03, 0xFC04, 0xFC05, 0xFC06, 0xFC07, 0xFC08,
        0xFC09, 0xFC0A, 0xFC0B, 0xFC0C, 0xFC0D, 0xFC0E, 0xFC0F, 0xFC10, 0xFC11,
        0xFC12, 0xFC13, 0xFC14, 0xFC15, 0xFC16, 0xFC17, 0xFC18, 0xFC19, 0xFC1A,
        0xFC1B, 0xFC1C, 0xFC1D, 0xFC1E, 0xFC1F, 0xFC20, 0xFC21, 0xFC22, 0xFC23,
        0xFC24, 0xFC25, 0xFC26, 0xFC27, 0xFC28, 0xFC29, 0xFC2A, 0xFC2B, 0xFC2C,
        0xFC2D, 0xFC2E, 0xFC2F, 0xFC30, 0xFC31, 0xFC32, 0xFC33, 0xFC34, 0xFC35,
        0xFC36, 0xFC37, 0xFC38, 0xFC39, 0xFC3A, 0xFC3B, 0xFC3C, 0xFC3D, 0xFC3E,
        0xFC3F, 0xFC40, 0xFC41, 0xFC42, 0xFC43, 0xFC44, 0xFC45, 0xFC46, 0xFC47,
        0xFC48, 0xFC49, 0xFC4A, 0xFC4B, 0xFC4C, 0xFC4D, 0xFC4E, 0xFC4F, 0xFC50,
        0xFC51, 0xFC52, 0xFC53, 0xFC54, 0xFC55, 0xFC56, 0xFC57, 0xFC58, 0xFC59,
        0xFC5A, 0xFC5B, 0xFC5C, 0xFC5D, 0xFC5E, 0xFC5F, 0xFC60, 0xFC61, 0xFC62,
        0xFC63, 0xFC64, 0xFC65, 0xFC66, 0xFC67, 0xFC68, 0xFC69, 0xFC6A, 0xFC6B,
        0xFC6C, 0xFC6D, 0xFC6E, 0xFC6F, 0xFC70, 0xFC71, 0xFC72, 0xFC73, 0xFC74,
        0xFC75, 0xFC76, 0xFC77, 0xFC78, 0xFC79, 0xFC7A, 0xFC7B, 0xFC7C, 0xFC7D,
        0xFC7E, 0xFC7F, 0xFC80, 0xFC81, 0xFC82, 0xFC83, 0xFC84, 0xFC85, 0xFC86,
        0xFC87, 0xFC88, 0xFC89, 0xFC8A, 0xFC8B, 0xFC8C, 0xFC8D, 0xFC8E, 0xFC8F,
        0xFC90, 0xFC91, 0xFC92, 0xFC93, 0xFC94, 0xFC95, 0xFC96, 0xFC97, 0xFC98,
        0xFC99, 0xFC9A, 0xFC9B, 0xFC9C, 0xFC9D, 0xFC9E, 0xFC9F, 0xFCA0, 0xFCA1,
        0xFCA2, 0xFCA3, 0xFCA4, 0xFCA5, 0xFCA6, 0xFCA7, 0xFCA8, 0xFCA9, 0xFCAA,
        0xFCAB, 0xFCAC, 0xFCAD, 0xFCAE, 0xFCAF, 0xFCB0, 0xFCB1, 0xFCB2, 0xFCB3,
        0xFCB4, 0xFCB5, 0xFCB6, 0xFCB7, 0xFCB8, 0xFCB9, 0xFCBA, 0xFCBB, 0xFCBC,
        0xFCBD, 0xFCBE, 0xFCBF, 0xFCC0, 0xFCC1, 0xFCC2, 0xFCC3, 0xFCC4, 0xFCC5,
        0xFCC6, 0xFCC7, 0xFCC8, 0xFCC9, 0xFCCA, 0xFCCB, 0xFCCC, 0xFCCD, 0xFCCE,
        0xFCCF, 0xFCD0, 0xFCD1, 0xFCD2, 0xFCD3, 0xFCD4, 0xFCD5, 0xFCD6, 0xFCD7,
        0xFCD8, 0xFCD9, 0xFCDA, 0xFCDB, 0xFCDC, 0xFCDD, 0xFCDE, 0xFCDF, 0xFCE0,
        0xFCE1, 0xFCE2, 0xFCE3, 0xFCE4, 0xFCE5, 0xFCE6, 0xFCE7, 0xFCE8, 0xFCE9,
        0xFCEA, 0xFCEB, 0xFCEC, 0xFCED, 0xFCEE, 0xFCEF, 0xFCF0, 0xFCF1, 0xFCF2,
        0xFCF3, 0xFCF4, 0xFCF5, 0xFCF6, 0xFCF7, 0xFCF8, 0xFCF9, 0xFCFA, 0xFCFB,
        0xFCFC, 0xFCFD, 0xFCFE, 0xFCFF, 0xFD00, 0xFD01, 0xFD02, 0xFD03, 0xFD04,
        0xFD05, 0xFD06, 0xFD07, 0xFD08, 0xFD09, 0xFD0A, 0xFD0B, 0xFD0C, 0xFD0D,
        0xFD0E, 0xFD0F, 0xFD10, 0xFD11, 0xFD12, 0xFD13, 0xFD14, 0xFD15, 0xFD16,
        0xFD17, 0xFD18, 0xFD19, 0xFD1A, 0xFD1B, 0xFD1C, 0xFD1D, 0xFD1E, 0xFD1F,
        0xFD20, 0xFD21, 0xFD22, 0xFD23, 0xFD24, 0xFD25, 0xFD26, 0xFD27, 0xFD28,
        0xFD29, 0xFD2A, 0xFD2B, 0xFD2C, 0xFD2D, 0xFD2E, 0xFD2F, 0xFD30, 0xFD31,
        0xFD32, 0xFD33, 0xFD34, 0xFD35, 0xFD36, 0xFD37, 0xFD38, 0xFD39, 0xFD3A,
        0xFD3B, 0xFD3C, 0xFD3D, 0xFD50, 0xFD51, 0xFD52, 0xFD53, 0xFD54, 0xFD55,
        0xFD56, 0xFD57, 0xFD58, 0xFD59, 0xFD5A, 0xFD5B, 0xFD5C, 0xFD5D, 0xFD5E,
        0xFD5F, 0xFD60, 0xFD61, 0xFD62, 0xFD63, 0xFD64, 0xFD65, 0xFD66, 0xFD67,
        0xFD68, 0xFD69, 0xFD6A, 0xFD6B, 0xFD6C, 0xFD6D, 0xFD6E, 0xFD6F, 0xFD70,
        0xFD71, 0xFD72, 0xFD73, 0xFD74, 0xFD75, 0xFD76, 0xFD77, 0xFD78, 0xFD79,
        0xFD7A, 0xFD7B, 0xFD7C, 0xFD7D, 0xFD7E, 0xFD7F, 0xFD80, 0xFD81, 0xFD82,
        0xFD83, 0xFD84, 0xFD85, 0xFD86, 0xFD87, 0xFD88, 0xFD89, 0xFD8A, 0xFD8B,
        0xFD8C, 0xFD8D, 0xFD8E, 0xFD8F, 0xFD92, 0xFD93, 0xFD94, 0xFD95, 0xFD96,
        0xFD97, 0xFD98, 0xFD99, 0xFD9A, 0xFD9B, 0xFD9C, 0xFD9D, 0xFD9E, 0xFD9F,
        0xFDA0, 0xFDA1, 0xFDA2, 0xFDA3, 0xFDA4, 0xFDA5, 0xFDA6, 0xFDA7, 0xFDA8,
        0xFDA9, 0xFDAA, 0xFDAB, 0xFDAC, 0xFDAD, 0xFDAE, 0xFDAF, 0xFDB0, 0xFDB1,
        0xFDB2, 0xFDB3, 0xFDB4, 0xFDB5, 0xFDB6, 0xFDB7, 0xFDB8, 0xFDB9, 0xFDBA,
        0xFDBB, 0xFDBC, 0xFDBD, 0xFDBE, 0xFDBF, 0xFDC0, 0xFDC1, 0xFDC2, 0xFDC3,
        0xFDC4, 0xFDC5, 0xFDC6, 0xFDC7, 0xFDF0, 0xFDF1, 0xFDF2, 0xFDF3, 0xFDF4,
        0xFDF5, 0xFDF6, 0xFDF7, 0xFDF8, 0xFDF9, 0xFDFA, 0xFDFB, 0xFDFC, 0xFE70,
        0xFE71, 0xFE72, 0xFE73, 0xFE74, 0xFE76, 0xFE77, 0xFE78, 0xFE79, 0xFE7A,
        0xFE7B, 0xFE7C, 0xFE7D, 0xFE7E, 0xFE7F, 0xFE80, 0xFE81, 0xFE82, 0xFE83,
        0xFE84, 0xFE85, 0xFE86, 0xFE87, 0xFE88, 0xFE89, 0xFE8A, 0xFE8B, 0xFE8C,
        0xFE8D, 0xFE8E, 0xFE8F, 0xFE90, 0xFE91, 0xFE92, 0xFE93, 0xFE94, 0xFE95,
        0xFE96, 0xFE97, 0xFE98, 0xFE99, 0xFE9A, 0xFE9B, 0xFE9C, 0xFE9D, 0xFE9E,
        0xFE9F, 0xFEA0, 0xFEA1, 0xFEA2, 0xFEA3, 0xFEA4, 0xFEA5, 0xFEA6, 0xFEA7,
        0xFEA8, 0xFEA9, 0xFEAA, 0xFEAB, 0xFEAC, 0xFEAD, 0xFEAE, 0xFEAF, 0xFEB0,
        0xFEB1, 0xFEB2, 0xFEB3, 0xFEB4, 0xFEB5, 0xFEB6, 0xFEB7, 0xFEB8, 0xFEB9,
        0xFEBA, 0xFEBB, 0xFEBC, 0xFEBD, 0xFEBE, 0xFEBF, 0xFEC0, 0xFEC1, 0xFEC2,
        0xFEC3, 0xFEC4, 0xFEC5, 0xFEC6, 0xFEC7, 0xFEC8, 0xFEC9, 0xFECA, 0xFECB,
        0xFECC, 0xFECD, 0xFECE, 0xFECF, 0xFED0, 0xFED1, 0xFED2, 0xFED3, 0xFED4,
        0xFED5, 0xFED6, 0xFED7, 0xFED8, 0xFED9, 0xFEDA, 0xFEDB, 0xFEDC, 0xFEDD,
        0xFEDE, 0xFEDF, 0xFEE0, 0xFEE1, 0xFEE2, 0xFEE3, 0xFEE4, 0xFEE5, 0xFEE6,
        0xFEE7, 0xFEE8, 0xFEE9, 0xFEEA, 0xFEEB, 0xFEEC, 0xFEED, 0xFEEE, 0xFEEF,
        0xFEF0, 0xFEF1, 0xFEF2, 0xFEF3, 0xFEF4, 0xFEF5, 0xFEF6, 0xFEF7, 0xFEF8,
        0xFEF9, 0xFEFA, 0xFEFB, 0xFEFC, 0x10800, 0x10801, 0x10802, 0x10803,
        0x10804, 0x10805, 0x10808, 0x1080A, 0x1080B, 0x1080C, 0x1080D, 0x1080E,
        0x1080F, 0x10810, 0x10811, 0x10812, 0x10813, 0x10814, 0x10815, 0x10816,
        0x10817, 0x10818, 0x10819, 0x1081A, 0x1081B, 0x1081C, 0x1081D, 0x1081E,
        0x1081F, 0x10820, 0x10821, 0x10822, 0x10823, 0x10824, 0x10825, 0x10826,
        0x10827, 0x10828, 0x10829, 0x1082A, 0x1082B, 0x1082C, 0x1082D, 0x1082E,
        0x1082F, 0x10830, 0x10831, 0x10832, 0x10833, 0x10834, 0x10835, 0x10837,
        0x10838, 0x1083C, 0x1083F, 0x10840, 0x10841, 0x10842, 0x10843, 0x10844,
        0x10845, 0x10846, 0x10847, 0x10848, 0x10849, 0x1084A, 0x1084B, 0x1084C,
        0x1084D, 0x1084E, 0x1084F, 0x10850, 0x10851, 0x10852, 0x10853, 0x10854,
        0x10855, 0x10857, 0x10858, 0x10859, 0x1085A, 0x1085B, 0x1085C, 0x1085D,
        0x1085E, 0x1085F, 0x10900, 0x10901, 0x10902, 0x10903, 0x10904, 0x10905,
        0x10906, 0x10907, 0x10908, 0x10909, 0x1090A, 0x1090B, 0x1090C, 0x1090D,
        0x1090E, 0x1090F, 0x10910, 0x10911, 0x10912, 0x10913, 0x10914, 0x10915,
        0x10916, 0x10917, 0x10918, 0x10919, 0x1091A, 0x1091B, 0x10920, 0x10921,
        0x10922, 0x10923, 0x10924, 0x10925, 0x10926, 0x10927, 0x10928, 0x10929,
        0x1092A, 0x1092B, 0x1092C, 0x1092D, 0x1092E, 0x1092F, 0x10930, 0x10931,
        0x10932, 0x10933, 0x10934, 0x10935, 0x10936, 0x10937, 0x10938, 0x10939,
        0x1093F, 0x10980, 0x10981, 0x10982, 0x10983, 0x10984, 0x10985, 0x10986,
        0x10987, 0x10988, 0x10989, 0x1098A, 0x1098B, 0x1098C, 0x1098D, 0x1098E,
        0x1098F, 0x10990, 0x10991, 0x10992, 0x10993, 0x10994, 0x10995, 0x10996,
        0x10997, 0x10998, 0x10999, 0x1099A, 0x1099B, 0x1099C, 0x1099D, 0x1099E,
        0x1099F, 0x109A0, 0x109A1, 0x109A2, 0x109A3, 0x109A4, 0x109A5, 0x109A6,
        0x109A7, 0x109A8, 0x109A9, 0x109AA, 0x109AB, 0x109AC, 0x109AD, 0x109AE,
        0x109AF, 0x109B0, 0x109B1, 0x109B2, 0x109B3, 0x109B4, 0x109B5, 0x109B6,
        0x109B7, 0x109BE, 0x109BF, 0x10A00, 0x10A10, 0x10A11, 0x10A12, 0x10A13,
        0x10A15, 0x10A16, 0x10A17, 0x10A19, 0x10A1A, 0x10A1B, 0x10A1C, 0x10A1D,
        0x10A1E, 0x10A1F, 0x10A20, 0x10A21, 0x10A22, 0x10A23, 0x10A24, 0x10A25,
        0x10A26, 0x10A27, 0x10A28, 0x10A29, 0x10A2A, 0x10A2B, 0x10A2C, 0x10A2D,
        0x10A2E, 0x10A2F, 0x10A30, 0x10A31, 0x10A32, 0x10A33, 0x10A40, 0x10A41,
        0x10A42, 0x10A43, 0x10A44, 0x10A45, 0x10A46, 0x10A47, 0x10A50, 0x10A51,
        0x10A52, 0x10A53, 0x10A54, 0x10A55, 0x10A56, 0x10A57, 0x10A58, 0x10A60,
        0x10A61, 0x10A62, 0x10A63, 0x10A64, 0x10A65, 0x10A66, 0x10A67, 0x10A68,
        0x10A69, 0x10A6A, 0x10A6B, 0x10A6C, 0x10A6D, 0x10A6E, 0x10A6F, 0x10A70,
        0x10A71, 0x10A72, 0x10A73, 0x10A74, 0x10A75, 0x10A76, 0x10A77, 0x10A78,
        0x10A79, 0x10A7A, 0x10A7B, 0x10A7C, 0x10A7D, 0x10A7E, 0x10A7F, 0x10B00,
        0x10B01, 0x10B02, 0x10B03, 0x10B04, 0x10B05, 0x10B06, 0x10B07, 0x10B08,
        0x10B09, 0x10B0A, 0x10B0B, 0x10B0C, 0x10B0D, 0x10B0E, 0x10B0F, 0x10B10,
        0x10B11, 0x10B12, 0x10B13, 0x10B14, 0x10B15, 0x10B16, 0x10B17, 0x10B18,
        0x10B19, 0x10B1A, 0x10B1B, 0x10B1C, 0x10B1D, 0x10B1E, 0x10B1F, 0x10B20,
        0x10B21, 0x10B22, 0x10B23, 0x10B24, 0x10B25, 0x10B26, 0x10B27, 0x10B28,
        0x10B29, 0x10B2A, 0x10B2B, 0x10B2C, 0x10B2D, 0x10B2E, 0x10B2F, 0x10B30,
        0x10B31, 0x10B32, 0x10B33, 0x10B34, 0x10B35, 0x10B40, 0x10B41, 0x10B42,
        0x10B43, 0x10B44, 0x10B45, 0x10B46, 0x10B47, 0x10B48, 0x10B49, 0x10B4A,
        0x10B4B, 0x10B4C, 0x10B4D, 0x10B4E, 0x10B4F, 0x10B50, 0x10B51, 0x10B52,
        0x10B53, 0x10B54, 0x10B55, 0x10B58, 0x10B59, 0x10B5A, 0x10B5B, 0x10B5C,
        0x10B5D, 0x10B5E, 0x10B5F, 0x10B60, 0x10B61, 0x10B62, 0x10B63, 0x10B64,
        0x10B65, 0x10B66, 0x10B67, 0x10B68, 0x10B69, 0x10B6A, 0x10B6B, 0x10B6C,
        0x10B6D, 0x10B6E, 0x10B6F, 0x10B70, 0x10B71, 0x10B72, 0x10B78, 0x10B79,
        0x10B7A, 0x10B7B, 0x10B7C, 0x10B7D, 0x10B7E, 0x10B7F, 0x10C00, 0x10C01,
        0x10C02, 0x10C03, 0x10C04, 0x10C05, 0x10C06, 0x10C07, 0x10C08, 0x10C09,
        0x10C0A, 0x10C0B, 0x10C0C, 0x10C0D, 0x10C0E, 0x10C0F, 0x10C10, 0x10C11,
        0x10C12, 0x10C13, 0x10C14, 0x10C15, 0x10C16, 0x10C17, 0x10C18, 0x10C19,
        0x10C1A, 0x10C1B, 0x10C1C, 0x10C1D, 0x10C1E, 0x10C1F, 0x10C20, 0x10C21,
        0x10C22, 0x10C23, 0x10C24, 0x10C25, 0x10C26, 0x10C27, 0x10C28, 0x10C29,
        0x10C2A, 0x10C2B, 0x10C2C, 0x10C2D, 0x10C2E, 0x10C2F, 0x10C30, 0x10C31,
        0x10C32, 0x10C33, 0x10C34, 0x10C35, 0x10C36, 0x10C37, 0x10C38, 0x10C39,
        0x10C3A, 0x10C3B, 0x10C3C, 0x10C3D, 0x10C3E, 0x10C3F, 0x10C40, 0x10C41,
        0x10C42, 0x10C43, 0x10C44, 0x10C45, 0x10C46, 0x10C47, 0x10C48, 0x1EE00,
        0x1EE01, 0x1EE02, 0x1EE03, 0x1EE05, 0x1EE06, 0x1EE07, 0x1EE08, 0x1EE09,
        0x1EE0A, 0x1EE0B, 0x1EE0C, 0x1EE0D, 0x1EE0E, 0x1EE0F, 0x1EE10, 0x1EE11,
        0x1EE12, 0x1EE13, 0x1EE14, 0x1EE15, 0x1EE16, 0x1EE17, 0x1EE18, 0x1EE19,
        0x1EE1A, 0x1EE1B, 0x1EE1C, 0x1EE1D, 0x1EE1E, 0x1EE1F, 0x1EE21, 0x1EE22,
        0x1EE24, 0x1EE27, 0x1EE29, 0x1EE2A, 0x1EE2B, 0x1EE2C, 0x1EE2D, 0x1EE2E,
        0x1EE2F, 0x1EE30, 0x1EE31, 0x1EE32, 0x1EE34, 0x1EE35, 0x1EE36, 0x1EE37,
        0x1EE39, 0x1EE3B, 0x1EE42, 0x1EE47, 0x1EE49, 0x1EE4B, 0x1EE4D, 0x1EE4E,
        0x1EE4F, 0x1EE51, 0x1EE52, 0x1EE54, 0x1EE57, 0x1EE59, 0x1EE5B, 0x1EE5D,
        0x1EE5F, 0x1EE61, 0x1EE62, 0x1EE64, 0x1EE67, 0x1EE68, 0x1EE69, 0x1EE6A,
        0x1EE6C, 0x1EE6D, 0x1EE6E, 0x1EE6F, 0x1EE70, 0x1EE71, 0x1EE72, 0x1EE74,
        0x1EE75, 0x1EE76, 0x1EE77, 0x1EE79, 0x1EE7A, 0x1EE7B, 0x1EE7C, 0x1EE7E,
        0x1EE80, 0x1EE81, 0x1EE82, 0x1EE83, 0x1EE84, 0x1EE85, 0x1EE86, 0x1EE87,
        0x1EE88, 0x1EE89, 0x1EE8B, 0x1EE8C, 0x1EE8D, 0x1EE8E, 0x1EE8F, 0x1EE90,
        0x1EE91, 0x1EE92, 0x1EE93, 0x1EE94, 0x1EE95, 0x1EE96, 0x1EE97, 0x1EE98,
        0x1EE99, 0x1EE9A, 0x1EE9B, 0x1EEA1, 0x1EEA2, 0x1EEA3, 0x1EEA5, 0x1EEA6,
        0x1EEA7, 0x1EEA8, 0x1EEA9, 0x1EEAB, 0x1EEAC, 0x1EEAD, 0x1EEAE, 0x1EEAF,
        0x1EEB0, 0x1EEB1, 0x1EEB2, 0x1EEB3, 0x1EEB4, 0x1EEB5, 0x1EEB6, 0x1EEB7,
        0x1EEB8, 0x1EEB9, 0x1EEBA, 0x1EEBB, 0x10FFFD];

    function determineBidi(cueDiv) {
        var nodeStack = [],
            text = "",
            charCode;

        if (!cueDiv || !cueDiv.childNodes) {
            return "ltr";
        }

        function pushNodes(nodeStack, node) {
            for (var i = node.childNodes.length - 1; i >= 0; i--) {
                nodeStack.push(node.childNodes[i]);
            }
        }

        function nextTextNode(nodeStack) {
            if (!nodeStack || !nodeStack.length) {
                return null;
            }

            var node = nodeStack.pop(),
                text = node.textContent || node.innerText;
            if (text) {
                // TODO: This should match all unicode type B characters (paragraph
                // separator characters). See issue #115.
                var m = text.match(/^.*(\n|\r)/);
                if (m) {
                    nodeStack.length = 0;
                    return m[0];
                }
                return text;
            }
            if (node.tagName === "ruby") {
                return nextTextNode(nodeStack);
            }
            if (node.childNodes) {
                pushNodes(nodeStack, node);
                return nextTextNode(nodeStack);
            }
        }

        pushNodes(nodeStack, cueDiv);
        while ((text = nextTextNode(nodeStack))) {
            for (var i = 0; i < text.length; i++) {
                charCode = text.charCodeAt(i);
                for (var j = 0; j < strongRTLChars.length; j++) {
                    if (strongRTLChars[j] === charCode) {
                        return "rtl";
                    }
                }
            }
        }
        return "ltr";
    }

    function computeLinePos(cue) {
        if (typeof cue.line === "number" &&
            (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {
            return cue.line;
        }
        if (!cue.track || !cue.track.textTrackList ||
            !cue.track.textTrackList.mediaElement) {
            return -1;
        }
        var track = cue.track,
            trackList = track.textTrackList,
            count = 0;
        for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {
            if (trackList[i].mode === "showing") {
                count++;
            }
        }
        return ++count * -1;
    }

    function StyleBox() {
    }

    // Apply styles to a div. If there is no div passed then it defaults to the
    // div on 'this'.
    StyleBox.prototype.applyStyles = function(styles, div) {
        div = div || this.div;
        for (var prop in styles) {
            if (styles.hasOwnProperty(prop)) {
                div.style[prop] = styles[prop];
            }
        }
    };

    StyleBox.prototype.formatStyle = function(val, unit) {
        return val === 0 ? 0 : val + unit;
    };

    // Constructs the computed display state of the cue (a div). Places the div
    // into the overlay which should be a block level element (usually a div).
    function CueStyleBox(window, cue, styleOptions) {
        var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
        var color = "rgba(255, 255, 255, 1)";
        var backgroundColor = "rgba(0, 0, 0, 0.8)";

        if (isIE8) {
            color = "rgb(255, 255, 255)";
            backgroundColor = "rgb(0, 0, 0)";
        }

        StyleBox.call(this);
        this.cue = cue;

        // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will
        // have inline positioning and will function as the cue background box.
        this.cueDiv = parseContent(window, cue.text);
        var styles = {
            color: color,
            backgroundColor: backgroundColor,
            position: "relative",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            display: "inline"
        };

        if (!isIE8) {
            styles.writingMode = cue.vertical === "" ? "horizontal-tb"
                : cue.vertical === "lr" ? "vertical-lr"
                : "vertical-rl";
            styles.unicodeBidi = "plaintext";
        }
        this.applyStyles(styles, this.cueDiv);

        // Create an absolutely positioned div that will be used to position the cue
        // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS
        // mirrors of them except "middle" which is "center" in CSS.
        this.div = window.document.createElement("div");
        styles = {
            textAlign: cue.align === "middle" ? "center" : cue.align,
            font: styleOptions.font,
            whiteSpace: "pre-line",
            position: "absolute"
        };

        if (!isIE8) {
            styles.direction = determineBidi(this.cueDiv);
            styles.writingMode = cue.vertical === "" ? "horizontal-tb"
                : cue.vertical === "lr" ? "vertical-lr"
                : "vertical-rl".
                stylesunicodeBidi =  "plaintext";
        }

        this.applyStyles(styles);

        this.div.appendChild(this.cueDiv);

        // Calculate the distance from the reference edge of the viewport to the text
        // position of the cue box. The reference edge will be resolved later when
        // the box orientation styles are applied.
        var textPos = 0;
        switch (cue.positionAlign) {
            case "start":
                textPos = cue.position;
                break;
            case "middle":
                textPos = cue.position - (cue.size / 2);
                break;
            case "end":
                textPos = cue.position - cue.size;
                break;
        }

        // Horizontal box orientation; textPos is the distance from the left edge of the
        // area to the left edge of the box and cue.size is the distance extending to
        // the right from there.
        if (cue.vertical === "") {
            this.applyStyles({
                left:  this.formatStyle(textPos, "%"),
                width: this.formatStyle(cue.size, "%")
            });
            // Vertical box orientation; textPos is the distance from the top edge of the
            // area to the top edge of the box and cue.size is the height extending
            // downwards from there.
        } else {
            this.applyStyles({
                top: this.formatStyle(textPos, "%"),
                height: this.formatStyle(cue.size, "%")
            });
        }

        this.move = function(box) {
            this.applyStyles({
                top: this.formatStyle(box.top, "px"),
                bottom: this.formatStyle(box.bottom, "px"),
                left: this.formatStyle(box.left, "px"),
                right: this.formatStyle(box.right, "px"),
                height: this.formatStyle(box.height, "px"),
                width: this.formatStyle(box.width, "px")
            });
        };
    }
    CueStyleBox.prototype = _objCreate(StyleBox.prototype);
    CueStyleBox.prototype.constructor = CueStyleBox;

    // Represents the co-ordinates of an Element in a way that we can easily
    // compute things with such as if it overlaps or intersects with another Element.
    // Can initialize it with either a StyleBox or another BoxPosition.
    function BoxPosition(obj) {
        var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);

        // Either a BoxPosition was passed in and we need to copy it, or a StyleBox
        // was passed in and we need to copy the results of 'getBoundingClientRect'
        // as the object returned is readonly. All co-ordinate values are in reference
        // to the viewport origin (top left).
        var lh, height, width, top;
        if (obj.div) {
            height = obj.div.offsetHeight;
            width = obj.div.offsetWidth;
            top = obj.div.offsetTop;

            var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&
                rects.getClientRects && rects.getClientRects();
            obj = obj.div.getBoundingClientRect();
            // In certain cases the outter div will be slightly larger then the sum of
            // the inner div's lines. This could be due to bold text, etc, on some platforms.
            // In this case we should get the average line height and use that. This will
            // result in the desired behaviour.
            lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)
                : 0;

        }
        this.left = obj.left;
        this.right = obj.right;
        this.top = obj.top || top;
        this.height = obj.height || height;
        this.bottom = obj.bottom || (top + (obj.height || height));
        this.width = obj.width || width;
        this.lineHeight = lh !== undefined ? lh : obj.lineHeight;

        if (isIE8 && !this.lineHeight) {
            this.lineHeight = 13;
        }
    }

    // Move the box along a particular axis. Optionally pass in an amount to move
    // the box. If no amount is passed then the default is the line height of the
    // box.
    BoxPosition.prototype.move = function(axis, toMove) {
        toMove = toMove !== undefined ? toMove : this.lineHeight;
        switch (axis) {
            case "+x":
                this.left += toMove;
                this.right += toMove;
                break;
            case "-x":
                this.left -= toMove;
                this.right -= toMove;
                break;
            case "+y":
                this.top += toMove;
                this.bottom += toMove;
                break;
            case "-y":
                this.top -= toMove;
                this.bottom -= toMove;
                break;
        }
    };

    // Check if this box overlaps another box, b2.
    BoxPosition.prototype.overlaps = function(b2) {
        return this.left < b2.right &&
            this.right > b2.left &&
            this.top < b2.bottom &&
            this.bottom > b2.top;
    };

    // Check if this box overlaps any other boxes in boxes.
    BoxPosition.prototype.overlapsAny = function(boxes) {
        for (var i = 0; i < boxes.length; i++) {
            if (this.overlaps(boxes[i])) {
                return true;
            }
        }
        return false;
    };

    // Check if this box is within another box.
    BoxPosition.prototype.within = function(container) {
        return this.top >= container.top &&
            this.bottom <= container.bottom &&
            this.left >= container.left &&
            this.right <= container.right;
    };

    // Check if this box is entirely within the container or it is overlapping
    // on the edge opposite of the axis direction passed. For example, if "+x" is
    // passed and the box is overlapping on the left edge of the container, then
    // return true.
    BoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {
        switch (axis) {
            case "+x":
                return this.left < container.left;
            case "-x":
                return this.right > container.right;
            case "+y":
                return this.top < container.top;
            case "-y":
                return this.bottom > container.bottom;
        }
    };

    // Find the percentage of the area that this box is overlapping with another
    // box.
    BoxPosition.prototype.intersectPercentage = function(b2) {
        var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),
            y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),
            intersectArea = x * y;
        return intersectArea / (this.height * this.width);
    };

    // Convert the positions from this box to CSS compatible positions using
    // the reference container's positions. This has to be done because this
    // box's positions are in reference to the viewport origin, whereas, CSS
    // values are in referecne to their respective edges.
    BoxPosition.prototype.toCSSCompatValues = function(reference) {
        return {
            top: this.top - reference.top,
            bottom: reference.bottom - this.bottom,
            left: this.left - reference.left,
            right: reference.right - this.right,
            height: this.height,
            width: this.width
        };
    };

    // Get an object that represents the box's position without anything extra.
    // Can pass a StyleBox, HTMLElement, or another BoxPositon.
    BoxPosition.getSimpleBoxPosition = function(obj) {
        var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
        var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
        var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;

        obj = obj.div ? obj.div.getBoundingClientRect() :
            obj.tagName ? obj.getBoundingClientRect() : obj;
        var ret = {
            left: obj.left,
            right: obj.right,
            top: obj.top || top,
            height: obj.height || height,
            bottom: obj.bottom || (top + (obj.height || height)),
            width: obj.width || width
        };
        return ret;
    };

    // Move a StyleBox to its specified, or next best, position. The containerBox
    // is the box that contains the StyleBox, such as a div. boxPositions are
    // a list of other boxes that the styleBox can't overlap with.
    function moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {

        // Find the best position for a cue box, b, on the video. The axis parameter
        // is a list of axis, the order of which, it will move the box along. For example:
        // Passing ["+x", "-x"] will move the box first along the x axis in the positive
        // direction. If it doesn't find a good position for it there it will then move
        // it along the x axis in the negative direction.
        function findBestPosition(b, axis) {
            var bestPosition,
                specifiedPosition = new BoxPosition(b),
                percentage = 1; // Highest possible so the first thing we get is better.

            for (var i = 0; i < axis.length; i++) {
                while (b.overlapsOppositeAxis(containerBox, axis[i]) ||
                (b.within(containerBox) && b.overlapsAny(boxPositions))) {
                    b.move(axis[i]);
                }
                // We found a spot where we aren't overlapping anything. This is our
                // best position.
                if (b.within(containerBox)) {
                    return b;
                }
                var p = b.intersectPercentage(containerBox);
                // If we're outside the container box less then we were on our last try
                // then remember this position as the best position.
                if (percentage > p) {
                    bestPosition = new BoxPosition(b);
                    percentage = p;
                }
                // Reset the box position to the specified position.
                b = new BoxPosition(specifiedPosition);
            }
            return bestPosition || specifiedPosition;
        }

        var boxPosition = new BoxPosition(styleBox),
            cue = styleBox.cue,
            linePos = computeLinePos(cue),
            axis = [];

        // If we have a line number to align the cue to.
        if (cue.snapToLines) {
            var size;
            switch (cue.vertical) {
                case "":
                    axis = [ "+y", "-y" ];
                    size = "height";
                    break;
                case "rl":
                    axis = [ "+x", "-x" ];
                    size = "width";
                    break;
                case "lr":
                    axis = [ "-x", "+x" ];
                    size = "width";
                    break;
            }

            var step = boxPosition.lineHeight,
                position = step * Math.round(linePos),
                maxPosition = containerBox[size] + step,
                initialAxis = axis[0];

            // If the specified intial position is greater then the max position then
            // clamp the box to the amount of steps it would take for the box to
            // reach the max position.
            if (Math.abs(position) > maxPosition) {
                position = position < 0 ? -1 : 1;
                position *= Math.ceil(maxPosition / step) * step;
            }

            // If computed line position returns negative then line numbers are
            // relative to the bottom of the video instead of the top. Therefore, we
            // need to increase our initial position by the length or width of the
            // video, depending on the writing direction, and reverse our axis directions.
            if (linePos < 0) {
                position += cue.vertical === "" ? containerBox.height : containerBox.width;
                axis = axis.reverse();
            }

            // Move the box to the specified position. This may not be its best
            // position.
            boxPosition.move(initialAxis, position);

        } else {
            // If we have a percentage line value for the cue.
            var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;

            switch (cue.lineAlign) {
                case "middle":
                    linePos -= (calculatedPercentage / 2);
                    break;
                case "end":
                    linePos -= calculatedPercentage;
                    break;
            }

            // Apply initial line position to the cue box.
            switch (cue.vertical) {
                case "":
                    styleBox.applyStyles({
                        top: styleBox.formatStyle(linePos, "%")
                    });
                    break;
                case "rl":
                    styleBox.applyStyles({
                        left: styleBox.formatStyle(linePos, "%")
                    });
                    break;
                case "lr":
                    styleBox.applyStyles({
                        right: styleBox.formatStyle(linePos, "%")
                    });
                    break;
            }

            axis = [ "+y", "-x", "+x", "-y" ];

            // Get the box position again after we've applied the specified positioning
            // to it.
            boxPosition = new BoxPosition(styleBox);
        }

        var bestPosition = findBestPosition(boxPosition, axis);
        styleBox.move(bestPosition.toCSSCompatValues(containerBox));
    }

    function WebVTT() {
        // Nothing
    }

    // Helper to allow strings to be decoded instead of the default binary utf8 data.
    WebVTT.StringDecoder = function() {
        return {
            decode: function(data) {
                if (!data) {
                    return "";
                }
                if (typeof data !== "string") {
                    throw new Error("Error - expected string data.");
                }
                return decodeURIComponent(encodeURIComponent(data));
            }
        };
    };

    WebVTT.convertCueToDOMTree = function(window, cuetext) {
        if (!window || !cuetext) {
            return null;
        }
        return parseContent(window, cuetext);
    };

    var FONT_SIZE_PERCENT = 0.05;
    var FONT_STYLE = "sans-serif";
    var CUE_BACKGROUND_PADDING = "1.5%";

    // Runs the processing model over the cues and regions passed to it.
    // @param overlay A block level element (usually a div) that the computed cues
    //                and regions will be placed into.
    WebVTT.processCues = function(window, cues, overlay) {
        if (!window || !cues || !overlay) {
            return null;
        }

        // Remove all previous children.
        while (overlay.firstChild) {
            overlay.removeChild(overlay.firstChild);
        }

        var paddedOverlay = window.document.createElement("div");
        paddedOverlay.style.position = "absolute";
        paddedOverlay.style.left = "0";
        paddedOverlay.style.right = "0";
        paddedOverlay.style.top = "0";
        paddedOverlay.style.bottom = "0";
        paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;
        overlay.appendChild(paddedOverlay);

        // Determine if we need to compute the display states of the cues. This could
        // be the case if a cue's state has been changed since the last computation or
        // if it has not been computed yet.
        function shouldCompute(cues) {
            for (var i = 0; i < cues.length; i++) {
                if (cues[i].hasBeenReset || !cues[i].displayState) {
                    return true;
                }
            }
            return false;
        }

        // We don't need to recompute the cues' display states. Just reuse them.
        if (!shouldCompute(cues)) {
            for (var i = 0; i < cues.length; i++) {
                paddedOverlay.appendChild(cues[i].displayState);
            }
            return;
        }

        var boxPositions = [],
            containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),
            fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;
        var styleOptions = {
            font: fontSize + "px " + FONT_STYLE
        };

        (function() {
            var styleBox, cue;

            for (var i = 0; i < cues.length; i++) {
                cue = cues[i];

                // Compute the intial position and styles of the cue div.
                styleBox = new CueStyleBox(window, cue, styleOptions);
                paddedOverlay.appendChild(styleBox.div);

                // Move the cue div to it's correct line position.
                moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);

                // Remember the computed div so that we don't have to recompute it later
                // if we don't have too.
                cue.displayState = styleBox.div;

                boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));
            }
        })();
    };

    WebVTT.Parser = function(window, vttjs, decoder) {
        if (!decoder) {
            decoder = vttjs;
            vttjs = {};
        }
        if (!vttjs) {
            vttjs = {};
        }

        this.window = window;
        this.vttjs = vttjs;
        this.state = "INITIAL";
        this.buffer = "";
        this.decoder = decoder || new TextDecoder("utf8");
        this.regionList = [];
    };

    WebVTT.Parser.prototype = {
        // If the error is a ParsingError then report it to the consumer if
        // possible. If it's not a ParsingError then throw it like normal.
        reportOrThrowError: function(e) {
            if (e instanceof ParsingError) {
                this.onparsingerror && this.onparsingerror(e);
            } else {
                throw e;
            }
        },
        parse: function (data) {
            var self = this;

            // If there is no data then we won't decode it, but will just try to parse
            // whatever is in buffer already. This may occur in circumstances, for
            // example when flush() is called.
            if (data) {
                // Try to decode the data that we received.
                self.buffer += self.decoder.decode(data, {stream: true});
            }

            function collectNextLine() {
                var buffer = self.buffer;
                var pos = 0;
                while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
                    ++pos;
                }
                var line = buffer.substr(0, pos);
                // Advance the buffer early in case we fail below.
                if (buffer[pos] === '\r') {
                    ++pos;
                }
                if (buffer[pos] === '\n') {
                    ++pos;
                }
                self.buffer = buffer.substr(pos);
                return line;
            }

            // 3.4 WebVTT region and WebVTT region settings syntax
            function parseRegion(input) {
                var settings = new Settings();

                parseOptions(input, function (k, v) {
                    switch (k) {
                        case "id":
                            settings.set(k, v);
                            break;
                        case "width":
                            settings.percent(k, v);
                            break;
                        case "lines":
                            settings.integer(k, v);
                            break;
                        case "regionanchor":
                        case "viewportanchor":
                            var xy = v.split(',');
                            if (xy.length !== 2) {
                                break;
                            }
                            // We have to make sure both x and y parse, so use a temporary
                            // settings object here.
                            var anchor = new Settings();
                            anchor.percent("x", xy[0]);
                            anchor.percent("y", xy[1]);
                            if (!anchor.has("x") || !anchor.has("y")) {
                                break;
                            }
                            settings.set(k + "X", anchor.get("x"));
                            settings.set(k + "Y", anchor.get("y"));
                            break;
                        case "scroll":
                            settings.alt(k, v, ["up"]);
                            break;
                    }
                }, /=/, /\s/);

                // Create the region, using default values for any values that were not
                // specified.
                if (settings.has("id")) {
                    var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();
                    region.width = settings.get("width", 100);
                    region.lines = settings.get("lines", 3);
                    region.regionAnchorX = settings.get("regionanchorX", 0);
                    region.regionAnchorY = settings.get("regionanchorY", 100);
                    region.viewportAnchorX = settings.get("viewportanchorX", 0);
                    region.viewportAnchorY = settings.get("viewportanchorY", 100);
                    region.scroll = settings.get("scroll", "");
                    // Register the region.
                    self.onregion && self.onregion(region);
                    // Remember the VTTRegion for later in case we parse any VTTCues that
                    // reference it.
                    self.regionList.push({
                        id: settings.get("id"),
                        region: region
                    });
                }
            }

            // 3.2 WebVTT metadata header syntax
            function parseHeader(input) {
                parseOptions(input, function (k, v) {
                    switch (k) {
                        case "Region":
                            // 3.3 WebVTT region metadata header syntax
                            parseRegion(v);
                            break;
                    }
                }, /:/);
            }

            // 5.1 WebVTT file parsing.
            try {
                var line;
                if (self.state === "INITIAL") {
                    // We can't start parsing until we have the first line.
                    if (!/\r\n|\n/.test(self.buffer)) {
                        return this;
                    }

                    line = collectNextLine();

                    var m = line.match(/^WEBVTT([ \t].*)?$/);
                    if (!m || !m[0]) {
                        throw new ParsingError(ParsingError.Errors.BadSignature);
                    }

                    self.state = "HEADER";
                }

                var alreadyCollectedLine = false;
                while (self.buffer) {
                    // We can't parse a line until we have the full line.
                    if (!/\r\n|\n/.test(self.buffer)) {
                        return this;
                    }

                    if (!alreadyCollectedLine) {
                        line = collectNextLine();
                    } else {
                        alreadyCollectedLine = false;
                    }

                    switch (self.state) {
                        case "HEADER":
                            // 13-18 - Allow a header (metadata) under the WEBVTT line.
                            if (/:/.test(line)) {
                                parseHeader(line);
                            } else if (!line) {
                                // An empty line terminates the header and starts the body (cues).
                                self.state = "ID";
                            }
                            continue;
                        case "NOTE":
                            // Ignore NOTE blocks.
                            if (!line) {
                                self.state = "ID";
                            }
                            continue;
                        case "ID":
                            // Check for the start of NOTE blocks.
                            if (/^NOTE($|[ \t])/.test(line)) {
                                self.state = "NOTE";
                                break;
                            }
                            // 19-29 - Allow any number of line terminators, then initialize new cue values.
                            if (!line) {
                                continue;
                            }
                            self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, "");
                            self.state = "CUE";
                            // 30-39 - Check if self line contains an optional identifier or timing data.
                            if (line.indexOf("-->") === -1) {
                                self.cue.id = line;
                                continue;
                            }
                        // Process line as start of a cue.
                        /*falls through*/
                        case "CUE":
                            // 40 - Collect cue timings and settings.
                            try {
                                parseCue(line, self.cue, self.regionList);
                            } catch (e) {
                                self.reportOrThrowError(e);
                                // In case of an error ignore rest of the cue.
                                self.cue = null;
                                self.state = "BADCUE";
                                continue;
                            }
                            self.state = "CUETEXT";
                            continue;
                        case "CUETEXT":
                            var hasSubstring = line.indexOf("-->") !== -1;
                            // 34 - If we have an empty line then report the cue.
                            // 35 - If we have the special substring '-->' then report the cue,
                            // but do not collect the line as we need to process the current
                            // one as a new cue.
                            if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                                // We are done parsing self cue.
                                self.oncue && self.oncue(self.cue);
                                self.cue = null;
                                self.state = "ID";
                                continue;
                            }
                            if (self.cue.text) {
                                self.cue.text += "\n";
                            }
                            self.cue.text += line;
                            continue;
                        case "BADCUE": // BADCUE
                            // 54-62 - Collect and discard the remaining cue.
                            if (!line) {
                                self.state = "ID";
                            }
                            continue;
                    }
                }
            } catch (e) {
                self.reportOrThrowError(e);

                // If we are currently parsing a cue, report what we have.
                if (self.state === "CUETEXT" && self.cue && self.oncue) {
                    self.oncue(self.cue);
                }
                self.cue = null;
                // Enter BADWEBVTT state if header was not parsed correctly otherwise
                // another exception occurred so enter BADCUE state.
                self.state = self.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
            }
            return this;
        },
        flush: function () {
            var self = this;
            try {
                // Finish decoding the stream.
                self.buffer += self.decoder.decode();
                // Synthesize the end of the current cue or region.
                if (self.cue || self.state === "HEADER") {
                    self.buffer += "\n\n";
                    self.parse();
                }
                // If we've flushed, parsed, and we're still on the INITIAL state then
                // that means we don't have enough of the stream to parse the first
                // line.
                if (self.state === "INITIAL") {
                    throw new ParsingError(ParsingError.Errors.BadSignature);
                }
            } catch(e) {
                self.reportOrThrowError(e);
            }
            self.onflush && self.onflush();
            return this;
        }
    };

    global.WebVTT = WebVTT;

}(this, (this.vttjs || {})));

!function(){!function(a){var b=a&&a.videojs;if(b){b.CDN_VERSION="5.11.6";var c="https:"===a.location.protocol?"https://":"http://";b.options.flash.swf=c+"vjs.zencdn.net/swf/5.1.0/video-js.swf"}}(window),function(a,b,c,d,e,f,g){b&&b.HELP_IMPROVE_VIDEOJS!==!1&&(e.random()>.01||(f=b.location,g=b.videojs||{},a.src="//www.google-analytics.com/__utm.gif?utmwv=5.4.2&utmac=UA-16505296-3&utmn=1&utmhn="+d(f.hostname)+"&utmsr="+b.screen.availWidth+"x"+b.screen.availHeight+"&utmul="+(c.language||c.userLanguage||"").toLowerCase()+"&utmr="+d(f.href)+"&utmp="+d(f.hostname+f.pathname)+"&utmcc=__utma%3D1."+e.floor(1e10*e.random())+".1.1.1.1%3B&utme=8(vjsv*cdnv)9("+g.VERSION+"*"+g.CDN_VERSION+")"))}(new Image,window,navigator,encodeURIComponent,Math)}();
